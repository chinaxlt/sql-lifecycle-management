Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    ALTER
    ANALYZE
    ANY
    APPROXIMATE
    ARRAY
    AT
    BERNOULLI
    CALL
    CATALOGS
    COALESCE
    COLUMN
    COLUMNS
    COMMIT
    COMMITTED
    CONFIDENCE
    CONSTRAINT
    CUBE
    CURRENT
    DATA
    DATE
    DAY
    DESCRIBE
    DISTRIBUTED
    DROP
    ESCAPE
    EXPLAIN
    EXTRACT
    FOLLOWING
    FORCE
    FORMAT
    FUNCTIONS
    GRANT
    GRAPHVIZ
    GROUPING
    HOUR
    ICONST
    IF
    INDEX
    INTERVAL
    ISOLATION
    LEVEL
    LOCK
    LOGICAL
    MAP
    MINUTE
    MODE
    MONTH
    NFC
    NFD
    NFKC
    NFKD
    NO
    NORMALIZE
    NULLIF
    NUMBER
    ONLY
    OPTION
    ORDINALITY
    OVER
    PARTITION
    PARTITIONS
    POISSONIZED
    POSITION
    PRECEDING
    PRIVILEGES
    PUBLIC
    RANGE
    READ
    RECURSIVE
    RENAME
    REPEATABLE
    REPLACE
    RESCALED
    RESET
    ROLLBACK
    ROLLUP
    ROW
    ROWS
    SCHEMAS
    SECOND
    SERIALIZABLE
    SESSION
    SETS
    SHARE
    SHOW
    SOME
    START
    STRATIFY
    STRING
    SUBSTRING
    SYSTEM
    TABLES
    TABLESAMPLE
    TEXT
    TIME
    TO
    TOP
    TRANSACTION
    TRY
    TRY_CAST
    TYPE
    UNBOUNDED
    UNCOMMITTED
    UNNEST
    USE
    VIEW
    WITH
    WORK
    WRITE
    YEAR
    ZONE

Grammar

Rule 0     S' -> command
Rule 1     command -> ddl
Rule 2     command -> dml
Rule 3     ddl -> create_table
Rule 4     dml -> statement
Rule 5     create_table -> CREATE TABLE identifier LPAREN column_list RPAREN create_table_end
Rule 6     create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end
Rule 7     create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ identifier
Rule 8     create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER
Rule 9     column_list -> column
Rule 10    column_list -> column_list COMMA column
Rule 11    column -> identifier column_type
Rule 12    column -> identifier column_type UNIQUE
Rule 13    column_type -> INT column_end
Rule 14    column_type -> INT LPAREN INTEGER RPAREN column_end
Rule 15    column_type -> FLOAT column_end
Rule 16    column_type -> BIGINT column_end
Rule 17    column_type -> BIGINT LPAREN INTEGER RPAREN column_end
Rule 18    column_type -> TINYINT LPAREN INTEGER RPAREN column_end
Rule 19    column_type -> DATETIME column_end
Rule 20    column_type -> DATETIME LPAREN INTEGER RPAREN column_end
Rule 21    column_type -> VARCHAR LPAREN INTEGER RPAREN column_end
Rule 22    column_type -> CHAR LPAREN INTEGER RPAREN column_end
Rule 23    column_type -> TIMESTAMP column_end
Rule 24    column_end -> collate NOT NULL comment_end
Rule 25    column_end -> collate NOT NULL DEFAULT SCONST comment_end
Rule 26    column_end -> collate DEFAULT NULL comment_end
Rule 27    column_end -> collate NULL DEFAULT NULL comment_end
Rule 28    column_end -> collate UNSIGNED AUTO_INCREMENT comment_end
Rule 29    column_end -> collate NOT NULL AUTO_INCREMENT comment_end
Rule 30    column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
Rule 31    column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
Rule 32    column_end -> empty
Rule 33    collate -> COLLATE identifier
Rule 34    collate -> empty
Rule 35    comment_end -> COMMENT SCONST
Rule 36    comment_end -> empty
Rule 37    primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN
Rule 38    primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list
Rule 39    index_list -> index_key identifier LPAREN index_column_list RPAREN index_end
Rule 40    index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end
Rule 41    index_key -> KEY
Rule 42    index_key -> UNIQUE KEY
Rule 43    index_column_list -> identifier
Rule 44    index_column_list -> index_column_list COMMA identifier
Rule 45    index_end -> BLOCK_SIZE INTEGER
Rule 46    index_end -> empty
Rule 47    statement -> cursor_specification
Rule 48    statement -> delete
Rule 49    statement -> update
Rule 50    statement -> insert
Rule 51    insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN
Rule 52    insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
Rule 53    insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec
Rule 54    insert -> INSERT ignore INTO table_reference query_spec
Rule 55    insert_value -> value
Rule 56    insert_value -> insert_value COMMA value
Rule 57    ignore -> IGNORE
Rule 58    ignore -> empty
Rule 59    delete -> DELETE FROM relations where_opt order_by_opt limit_opt
Rule 60    update -> UPDATE relations SET update_set_list where_opt order_by_opt limit_opt
Rule 61    update_set_list -> update_set
Rule 62    update_set_list -> update_set_list COMMA update_set
Rule 63    update_set -> comparison_predicate
Rule 64    cursor_specification -> query_expression order_by_opt limit_opt for_update_opt
Rule 65    subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN
Rule 66    for_update_opt -> FOR UPDATE
Rule 67    for_update_opt -> FOR UPDATE NOWAIT
Rule 68    for_update_opt -> FOR UPDATE WAIT INTEGER
Rule 69    for_update_opt -> empty
Rule 70    query_expression -> query_expression_body
Rule 71    query_expression_body -> nonjoin_query_expression
Rule 72    query_expression_body -> joined_table
Rule 73    order_by_opt -> ORDER BY sort_items
Rule 74    order_by_opt -> empty
Rule 75    sort_items -> sort_item
Rule 76    sort_items -> sort_items COMMA sort_item
Rule 77    sort_item -> value_expression order_opt null_ordering_opt
Rule 78    order_opt -> ASC
Rule 79    order_opt -> DESC
Rule 80    order_opt -> empty
Rule 81    null_ordering_opt -> NULLS FIRST
Rule 82    null_ordering_opt -> NULLS LAST
Rule 83    null_ordering_opt -> empty
Rule 84    limit_opt -> LIMIT INTEGER
Rule 85    limit_opt -> LIMIT INTEGER COMMA INTEGER
Rule 86    limit_opt -> LIMIT QM
Rule 87    limit_opt -> LIMIT QM COMMA QM
Rule 88    limit_opt -> LIMIT ALL
Rule 89    limit_opt -> LIMIT INTEGER OFFSET INTEGER
Rule 90    limit_opt -> empty
Rule 91    nonjoin_query_expression -> nonjoin_query_term
Rule 92    nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
Rule 93    nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
Rule 94    nonjoin_query_term -> nonjoin_query_primary
Rule 95    nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
Rule 96    nonjoin_query_primary -> simple_table
Rule 97    nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN
Rule 98    simple_table -> query_spec
Rule 99    simple_table -> explicit_table
Rule 100   simple_table -> table_value_constructor
Rule 101   explicit_table -> TABLE qualified_name
Rule 102   table_value_constructor -> VALUES values_list
Rule 103   values_list -> values_list COMMA expression
Rule 104   values_list -> expression
Rule 105   query_spec -> SELECT select_items table_expression_opt
Rule 106   where_opt -> WHERE search_condition
Rule 107   where_opt -> WHERE LPAREN search_condition RPAREN
Rule 108   where_opt -> empty
Rule 109   group_by_opt -> GROUP BY grouping_expressions
Rule 110   group_by_opt -> empty
Rule 111   grouping_expressions -> value_expression
Rule 112   grouping_expressions -> grouping_expressions COMMA value_expression
Rule 113   having_opt -> HAVING search_condition
Rule 114   having_opt -> empty
Rule 115   set_quantifier_opt -> ALL
Rule 116   set_quantifier_opt -> empty
Rule 117   select_items -> select_item
Rule 118   select_items -> select_items COMMA select_item
Rule 119   select_item -> derived_column
Rule 120   select_item -> DISTINCT LPAREN derived_column RPAREN
Rule 121   select_item -> DISTINCT derived_column
Rule 122   derived_column -> value_expression alias_opt
Rule 123   table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt
Rule 124   table_expression_opt -> empty
Rule 125   relations -> relations COMMA table_reference
Rule 126   relations -> table_reference
Rule 127   table_reference -> table_primary
Rule 128   table_reference -> joined_table
Rule 129   table_primary -> aliased_relation
Rule 130   table_primary -> derived_table
Rule 131   joined_table -> cross_join
Rule 132   joined_table -> qualified_join
Rule 133   joined_table -> natural_join
Rule 134   cross_join -> table_reference CROSS JOIN table_primary
Rule 135   qualified_join -> table_reference join_type JOIN table_reference join_criteria
Rule 136   natural_join -> table_reference NATURAL join_type JOIN table_primary
Rule 137   join_type -> INNER
Rule 138   join_type -> LEFT outer_opt
Rule 139   join_type -> RIGHT outer_opt
Rule 140   join_type -> FULL outer_opt
Rule 141   join_type -> empty
Rule 142   outer_opt -> OUTER
Rule 143   outer_opt -> empty
Rule 144   join_criteria -> ON search_condition
Rule 145   join_criteria -> USING LPAREN join_columns RPAREN
Rule 146   join_criteria -> empty
Rule 147   join_columns -> identifier
Rule 148   join_columns -> join_columns COMMA identifier
Rule 149   aliased_relation -> qualified_name alias_opt
Rule 150   derived_table -> subquery alias_opt
Rule 151   alias_opt -> alias
Rule 152   alias_opt -> empty
Rule 153   alias -> as_opt identifier
Rule 154   expression -> search_condition
Rule 155   search_condition -> boolean_term
Rule 156   search_condition -> LPAREN search_condition RPAREN
Rule 157   search_condition -> search_condition OR search_condition
Rule 158   search_condition -> search_condition AND search_condition
Rule 159   boolean_term -> boolean_factor
Rule 160   boolean_term -> LPAREN boolean_term RPAREN
Rule 161   boolean_factor -> not_opt boolean_test
Rule 162   boolean_test -> boolean_primary
Rule 163   boolean_primary -> predicate
Rule 164   boolean_primary -> value_expression
Rule 165   predicate -> comparison_predicate
Rule 166   predicate -> between_predicate
Rule 167   predicate -> in_predicate
Rule 168   predicate -> like_predicate
Rule 169   predicate -> regexp_predicate
Rule 170   predicate -> null_predicate
Rule 171   predicate -> exists_predicate
Rule 172   comparison_predicate -> value_expression comparison_operator value_expression
Rule 173   between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression
Rule 174   in_predicate -> value_expression not_opt IN in_value
Rule 175   in_value -> LPAREN in_expressions RPAREN
Rule 176   in_value -> subquery
Rule 177   in_expressions -> value_expression
Rule 178   in_expressions -> in_expressions COMMA value_expression
Rule 179   like_predicate -> value_expression not_opt LIKE value_expression
Rule 180   regexp_predicate -> value_expression REGEXP value_expression
Rule 181   null_predicate -> value_expression IS not_opt NULL
Rule 182   exists_predicate -> EXISTS subquery
Rule 183   value_expression -> numeric_value_expression
Rule 184   numeric_value_expression -> numeric_value_expression PLUS term
Rule 185   numeric_value_expression -> numeric_value_expression MINUS term
Rule 186   numeric_value_expression -> term
Rule 187   term -> term ASTERISK factor
Rule 188   term -> term SLASH factor
Rule 189   term -> term PERCENT factor
Rule 190   term -> term CONCAT factor
Rule 191   term -> factor
Rule 192   factor -> sign_opt primary_expression
Rule 193   primary_expression -> parenthetic_primary_expression
Rule 194   primary_expression -> base_primary_expression
Rule 195   parenthetic_primary_expression -> LPAREN value_expression RPAREN
Rule 196   parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN
Rule 197   base_primary_expression -> value
Rule 198   base_primary_expression -> qualified_name
Rule 199   base_primary_expression -> subquery
Rule 200   base_primary_expression -> function_call
Rule 201   base_primary_expression -> date_time
Rule 202   base_primary_expression -> case_specification
Rule 203   base_primary_expression -> cast_specification
Rule 204   value -> NULL
Rule 205   value -> SCONST
Rule 206   value -> number
Rule 207   value -> boolean_value
Rule 208   value -> QUOTED_IDENTIFIER
Rule 209   value -> QM
Rule 210   function_call -> qualified_name LPAREN call_args RPAREN
Rule 211   function_call -> qualified_name LPAREN DISTINCT call_args RPAREN
Rule 212   call_args -> call_list
Rule 213   call_args -> empty_call_args
Rule 214   empty_call_args -> ASTERISK
Rule 215   empty_call_args -> empty
Rule 216   case_specification -> simple_case
Rule 217   case_specification -> searched_case
Rule 218   simple_case -> CASE value_expression when_clauses else_opt END
Rule 219   searched_case -> CASE when_clauses else_opt END
Rule 220   cast_specification -> CAST LPAREN value_expression AS data_type RPAREN
Rule 221   when_clauses -> when_clauses when_clause
Rule 222   when_clauses -> when_clause
Rule 223   when_clause -> WHEN search_condition THEN value_expression
Rule 224   else_opt -> ELSE value_expression
Rule 225   else_opt -> empty
Rule 226   call_list -> call_list COMMA expression
Rule 227   call_list -> expression
Rule 228   data_type -> base_data_type type_param_list_opt
Rule 229   type_param_list_opt -> LPAREN type_param_list RPAREN
Rule 230   type_param_list_opt -> empty
Rule 231   type_param_list -> type_param_list COMMA type_parameter
Rule 232   type_param_list -> type_parameter
Rule 233   type_parameter -> INTEGER
Rule 234   type_parameter -> base_data_type
Rule 235   base_data_type -> identifier
Rule 236   date_time -> CURRENT_DATE
Rule 237   date_time -> CURRENT_TIME integer_param_opt
Rule 238   date_time -> CURRENT_TIMESTAMP integer_param_opt
Rule 239   date_time -> LOCALTIME integer_param_opt
Rule 240   date_time -> LOCALTIMESTAMP integer_param_opt
Rule 241   comparison_operator -> EQ
Rule 242   comparison_operator -> NE
Rule 243   comparison_operator -> LT
Rule 244   comparison_operator -> LE
Rule 245   comparison_operator -> GT
Rule 246   comparison_operator -> GE
Rule 247   as_opt -> AS
Rule 248   as_opt -> empty
Rule 249   not_opt -> NOT
Rule 250   not_opt -> empty
Rule 251   boolean_value -> TRUE
Rule 252   boolean_value -> FALSE
Rule 253   sign_opt -> sign
Rule 254   sign_opt -> empty
Rule 255   sign -> PLUS
Rule 256   sign -> MINUS
Rule 257   integer_param_opt -> LPAREN INTEGER RPAREN
Rule 258   integer_param_opt -> LPAREN RPAREN
Rule 259   integer_param_opt -> empty
Rule 260   qualified_name -> qualified_name PERIOD qualified_name
Rule 261   qualified_name -> identifier
Rule 262   identifier -> IDENTIFIER
Rule 263   identifier -> quoted_identifier
Rule 264   identifier -> non_reserved
Rule 265   identifier -> DIGIT_IDENTIFIER
Rule 266   identifier -> ASTERISK
Rule 267   non_reserved -> NON_RESERVED
Rule 268   quoted_identifier -> BACKQUOTED_IDENTIFIER
Rule 269   number -> DECIMAL
Rule 270   number -> INTEGER
Rule 271   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 
ALL                  : 88 115
ALTER                : 
ANALYZE              : 
AND                  : 158 173
ANY                  : 
APPROXIMATE          : 
ARRAY                : 
AS                   : 220 247
ASC                  : 78
ASTERISK             : 187 214 266
AT                   : 
AUTO_INCREMENT       : 28 29
BACKQUOTED_IDENTIFIER : 268
BERNOULLI            : 
BETWEEN              : 173
BIGINT               : 16 17
BLOCK_SIZE           : 8 45
BY                   : 73 109
CALL                 : 
CASE                 : 218 219
CAST                 : 220
CATALOGS             : 
CHAR                 : 22
CHARSET              : 7 8
COALESCE             : 
COLLATE              : 8 33
COLUMN               : 
COLUMNS              : 
COMMA                : 6 10 38 40 44 56 62 76 85 87 103 112 118 125 148 178 226 231
COMMENT              : 35
COMMIT               : 
COMMITTED            : 
COMPRESSION          : 8
CONCAT               : 190
CONFIDENCE           : 
CONSTRAINT           : 
CREATE               : 5 6
CROSS                : 134
CUBE                 : 
CURRENT              : 
CURRENT_DATE         : 236
CURRENT_TIME         : 237
CURRENT_TIMESTAMP    : 30 31 31 238
DATA                 : 
DATE                 : 
DATETIME             : 19 20
DAY                  : 
DECIMAL              : 269
DEFAULT              : 7 8 25 26 27 30 31
DELETE               : 59
DESC                 : 79
DESCRIBE             : 
DIGIT_IDENTIFIER     : 265
DISTINCT             : 120 121 211
DISTRIBUTED          : 
DROP                 : 
ELSE                 : 224
END                  : 218 219
ENGINE               : 7
EQ                   : 7 7 8 8 8 8 8 8 8 8 241
ESCAPE               : 
EXCEPT               : 93
EXISTS               : 182
EXPLAIN              : 
EXTRACT              : 
FALSE                : 8 252
FIRST                : 81
FLOAT                : 15
FOLLOWING            : 
FOR                  : 66 67 68
FORCE                : 
FORMAT               : 
FROM                 : 59 123
FULL                 : 140
FUNCTIONS            : 
GE                   : 246
GRANT                : 
GRAPHVIZ             : 
GROUP                : 109
GROUPING             : 
GT                   : 245
HAVING               : 113
HOUR                 : 
ICONST               : 
IDENTIFIER           : 262
IF                   : 
IGNORE               : 57
IN                   : 174
INDEX                : 
INNER                : 137
INSERT               : 51 52 53 54
INT                  : 13 14
INTEGER              : 8 8 8 8 14 17 18 20 21 22 45 68 84 85 85 89 89 233 257 270
INTERSECT            : 95
INTERVAL             : 
INTO                 : 51 52 53 54
IS                   : 181
ISOLATION            : 
JOIN                 : 134 135 136
KEY                  : 37 38 41 42
LAST                 : 82
LE                   : 244
LEFT                 : 138
LEVEL                : 
LIKE                 : 179
LIMIT                : 84 85 86 87 88 89
LOCALTIME            : 239
LOCALTIMESTAMP       : 240
LOCK                 : 
LOGICAL              : 
LPAREN               : 5 6 14 17 18 20 21 22 37 38 39 40 51 52 52 53 65 97 107 120 145 156 160 175 195 196 210 211 220 229 257 258
LT                   : 243
MAP                  : 
MINUS                : 185 256
MINUTE               : 
MODE                 : 
MONTH                : 
NATURAL              : 136
NE                   : 242
NFC                  : 
NFD                  : 
NFKC                 : 
NFKD                 : 
NO                   : 
NON_RESERVED         : 267
NORMALIZE            : 
NOT                  : 24 25 29 30 31 249
NOWAIT               : 67
NULL                 : 24 25 26 27 27 29 30 31 181 204
NULLIF               : 
NULLS                : 81 82
NUMBER               : 
OFFSET               : 89
ON                   : 31 144
ONLY                 : 
OPTION               : 
OR                   : 157
ORDER                : 73
ORDINALITY           : 
OUTER                : 142
OVER                 : 
PARTITION            : 
PARTITIONS           : 
PCTFREE              : 8
PERCENT              : 189
PERIOD               : 260
PLUS                 : 184 255
POISSONIZED          : 
POSITION             : 
PRECEDING            : 
PRIMARY              : 37 38
PRIVILEGES           : 
PUBLIC               : 
QM                   : 86 87 87 209
QUOTED_IDENTIFIER    : 208
RANGE                : 
READ                 : 
RECURSIVE            : 
REGEXP               : 180
RENAME               : 
REPEATABLE           : 
REPLACE              : 
REPLICA_NUM          : 8
RESCALED             : 
RESET                : 
RIGHT                : 139
ROLLBACK             : 
ROLLUP               : 
ROW                  : 
ROWS                 : 
RPAREN               : 5 6 14 17 18 20 21 22 37 38 39 40 51 52 52 53 65 97 107 120 145 156 160 175 195 196 210 211 220 229 257 258
SCHEMAS              : 
SCONST               : 8 25 35 205
SECOND               : 
SELECT               : 105
SERIALIZABLE         : 
SESSION              : 
SET                  : 60
SETS                 : 
SHARE                : 
SHOW                 : 
SLASH                : 188
SOME                 : 
START                : 
STRATIFY             : 
STRING               : 
SUBSTRING            : 
SYSTEM               : 
TABLE                : 5 6 101
TABLES               : 
TABLESAMPLE          : 
TABLET_SIZE          : 8
TEXT                 : 
THEN                 : 223
TIME                 : 
TIMESTAMP            : 23
TINYINT              : 18
TO                   : 
TOP                  : 
TRANSACTION          : 
TRUE                 : 251
TRY                  : 
TRY_CAST             : 
TYPE                 : 
UNBOUNDED            : 
UNCOMMITTED          : 
UNION                : 92
UNIQUE               : 12 42
UNNEST               : 
UNSIGNED             : 28
UPDATE               : 31 60 66 67 68
USE                  : 
USE_BLOOM_FILTER     : 8
USING                : 145
VALUES               : 51 52 102
VARCHAR              : 21
VIEW                 : 
WAIT                 : 68
WHEN                 : 223
WHERE                : 106 107
WITH                 : 
WORK                 : 
WRITE                : 
YEAR                 : 
ZONE                 : 
error                : 

Nonterminals, with rules where they appear

alias                : 151
alias_opt            : 122 149 150
aliased_relation     : 129
as_opt               : 153
base_data_type       : 228 234
base_primary_expression : 194
between_predicate    : 166
boolean_factor       : 159
boolean_primary      : 162
boolean_term         : 155 160
boolean_test         : 161
boolean_value        : 207
call_args            : 210 211
call_list            : 212 226
case_specification   : 202
cast_specification   : 203
collate              : 24 25 26 27 28 29 30 31
column               : 9 10
column_end           : 13 14 15 16 17 18 19 20 21 22 23
column_list          : 5 6 10
column_type          : 11 12
command              : 0
comment_end          : 24 25 26 27 28 29 30 31
comparison_operator  : 172
comparison_predicate : 63 165
create_table         : 3
create_table_end     : 5 6
cross_join           : 131
cursor_specification : 47
data_type            : 220
date_time            : 201
ddl                  : 1
delete               : 48
derived_column       : 119 120 121
derived_table        : 130
dml                  : 2
else_opt             : 218 219
empty                : 32 34 36 46 58 69 74 80 83 90 108 110 114 116 124 141 143 146 152 215 225 230 248 250 254 259
empty_call_args      : 213
exists_predicate     : 171
explicit_table       : 99
expression           : 103 104 226 227
factor               : 187 188 189 190 191
for_update_opt       : 64 123
function_call        : 200
group_by_opt         : 123
grouping_expressions : 109 112
having_opt           : 123
identifier           : 5 6 7 7 8 8 11 12 33 39 40 43 44 147 148 153 235 261
ignore               : 51 52 53 54
in_expressions       : 175 178
in_predicate         : 167
in_value             : 174
index_column_list    : 37 38 39 40 44 52 53
index_end            : 39 40
index_key            : 39 40
index_list           : 38 40
insert               : 50
insert_value         : 51 52 56
integer_param_opt    : 237 238 239 240
join_columns         : 145 148
join_criteria        : 135
join_type            : 135 136
joined_table         : 72 128
like_predicate       : 168
limit_opt            : 59 60 64 65
natural_join         : 133
non_reserved         : 264
nonjoin_query_expression : 71 92 93 97
nonjoin_query_primary : 94 95
nonjoin_query_term   : 91 92 93 95
not_opt              : 161 173 174 179 181
null_ordering_opt    : 77
null_predicate       : 170
number               : 206
numeric_value_expression : 183 184 185
order_by_opt         : 59 60 64 65
order_opt            : 77
outer_opt            : 138 139 140
parenthetic_primary_expression : 193 196
predicate            : 163
primary_clause       : 6
primary_expression   : 192
qualified_join       : 132
qualified_name       : 101 149 198 210 211 260 260
query_expression     : 64 65
query_expression_body : 70
query_spec           : 53 54 98
quoted_identifier    : 263
regexp_predicate     : 169
relations            : 59 60 123 125
search_condition     : 106 107 113 144 154 156 157 157 158 158 223
searched_case        : 217
select_item          : 117 118
select_items         : 105 118
set_quantifier_opt   : 92 93 95
sign                 : 253
sign_opt             : 192
simple_case          : 216
simple_table         : 96
sort_item            : 75 76
sort_items           : 73 76
statement            : 4
subquery             : 150 176 182 199
table_expression_opt : 105
table_primary        : 127 134 136
table_reference      : 51 52 53 54 125 126 134 135 135 136
table_value_constructor : 100
term                 : 184 185 186 187 188 189 190
type_param_list      : 229 231
type_param_list_opt  : 228
type_parameter       : 231 232
update               : 49
update_set           : 61 62
update_set_list      : 60 62
value                : 55 56 197
value_expression     : 77 111 112 122 164 172 172 173 173 173 174 177 178 179 179 180 180 181 195 218 220 223 224
values_list          : 102 103
when_clause          : 221 222
when_clauses         : 218 219 221
where_opt            : 59 60 123

Parsing method: LALR

state 0

    (0) S' -> . command
    (1) command -> . ddl
    (2) command -> . dml
    (3) ddl -> . create_table
    (4) dml -> . statement
    (5) create_table -> . CREATE TABLE identifier LPAREN column_list RPAREN create_table_end
    (6) create_table -> . CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end
    (47) statement -> . cursor_specification
    (48) statement -> . delete
    (49) statement -> . update
    (50) statement -> . insert
    (64) cursor_specification -> . query_expression order_by_opt limit_opt for_update_opt
    (59) delete -> . DELETE FROM relations where_opt order_by_opt limit_opt
    (60) update -> . UPDATE relations SET update_set_list where_opt order_by_opt limit_opt
    (51) insert -> . INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN
    (52) insert -> . INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (53) insert -> . INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec
    (54) insert -> . INSERT ignore INTO table_reference query_spec
    (70) query_expression -> . query_expression_body
    (71) query_expression_body -> . nonjoin_query_expression
    (72) query_expression_body -> . joined_table
    (91) nonjoin_query_expression -> . nonjoin_query_term
    (92) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    CREATE          shift and go to state 6
    DELETE          shift and go to state 15
    UPDATE          shift and go to state 16
    INSERT          shift and go to state 17
    LPAREN          shift and go to state 9
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    command                        shift and go to state 1
    ddl                            shift and go to state 2
    dml                            shift and go to state 3
    create_table                   shift and go to state 4
    statement                      shift and go to state 5
    identifier                     shift and go to state 8
    cursor_specification           shift and go to state 10
    delete                         shift and go to state 11
    update                         shift and go to state 12
    insert                         shift and go to state 13
    query_expression               shift and go to state 14
    table_reference                shift and go to state 18
    query_spec                     shift and go to state 20
    query_expression_body          shift and go to state 21
    nonjoin_query_expression       shift and go to state 22
    joined_table                   shift and go to state 23
    nonjoin_query_term             shift and go to state 24
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    nonjoin_query_primary          shift and go to state 28
    table_primary                  shift and go to state 29
    simple_table                   shift and go to state 30
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 1

    (0) S' -> command .



state 2

    (1) command -> ddl .

    $end            reduce using rule 1 (command -> ddl .)


state 3

    (2) command -> dml .

    $end            reduce using rule 2 (command -> dml .)


state 4

    (3) ddl -> create_table .

    $end            reduce using rule 3 (ddl -> create_table .)


state 5

    (4) dml -> statement .

    $end            reduce using rule 4 (dml -> statement .)


state 6

    (5) create_table -> CREATE . TABLE identifier LPAREN column_list RPAREN create_table_end
    (6) create_table -> CREATE . TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end

    TABLE           shift and go to state 45


state 7

    (101) explicit_table -> TABLE . qualified_name
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    qualified_name                 shift and go to state 46
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 8

    (261) qualified_name -> identifier .

    PERIOD          reduce using rule 261 (qualified_name -> identifier .)
    AS              reduce using rule 261 (qualified_name -> identifier .)
    IDENTIFIER      reduce using rule 261 (qualified_name -> identifier .)
    DIGIT_IDENTIFIER reduce using rule 261 (qualified_name -> identifier .)
    ASTERISK        reduce using rule 261 (qualified_name -> identifier .)
    BACKQUOTED_IDENTIFIER reduce using rule 261 (qualified_name -> identifier .)
    NON_RESERVED    reduce using rule 261 (qualified_name -> identifier .)
    CROSS           reduce using rule 261 (qualified_name -> identifier .)
    NATURAL         reduce using rule 261 (qualified_name -> identifier .)
    INNER           reduce using rule 261 (qualified_name -> identifier .)
    LEFT            reduce using rule 261 (qualified_name -> identifier .)
    RIGHT           reduce using rule 261 (qualified_name -> identifier .)
    FULL            reduce using rule 261 (qualified_name -> identifier .)
    JOIN            reduce using rule 261 (qualified_name -> identifier .)
    INTERSECT       reduce using rule 261 (qualified_name -> identifier .)
    UNION           reduce using rule 261 (qualified_name -> identifier .)
    EXCEPT          reduce using rule 261 (qualified_name -> identifier .)
    ORDER           reduce using rule 261 (qualified_name -> identifier .)
    LIMIT           reduce using rule 261 (qualified_name -> identifier .)
    FOR             reduce using rule 261 (qualified_name -> identifier .)
    $end            reduce using rule 261 (qualified_name -> identifier .)
    RPAREN          reduce using rule 261 (qualified_name -> identifier .)
    SET             reduce using rule 261 (qualified_name -> identifier .)
    COMMA           reduce using rule 261 (qualified_name -> identifier .)
    WHERE           reduce using rule 261 (qualified_name -> identifier .)
    LPAREN          reduce using rule 261 (qualified_name -> identifier .)
    SLASH           reduce using rule 261 (qualified_name -> identifier .)
    PERCENT         reduce using rule 261 (qualified_name -> identifier .)
    CONCAT          reduce using rule 261 (qualified_name -> identifier .)
    PLUS            reduce using rule 261 (qualified_name -> identifier .)
    MINUS           reduce using rule 261 (qualified_name -> identifier .)
    FROM            reduce using rule 261 (qualified_name -> identifier .)
    REGEXP          reduce using rule 261 (qualified_name -> identifier .)
    IS              reduce using rule 261 (qualified_name -> identifier .)
    EQ              reduce using rule 261 (qualified_name -> identifier .)
    NE              reduce using rule 261 (qualified_name -> identifier .)
    LT              reduce using rule 261 (qualified_name -> identifier .)
    LE              reduce using rule 261 (qualified_name -> identifier .)
    GT              reduce using rule 261 (qualified_name -> identifier .)
    GE              reduce using rule 261 (qualified_name -> identifier .)
    NOT             reduce using rule 261 (qualified_name -> identifier .)
    BETWEEN         reduce using rule 261 (qualified_name -> identifier .)
    IN              reduce using rule 261 (qualified_name -> identifier .)
    LIKE            reduce using rule 261 (qualified_name -> identifier .)
    OR              reduce using rule 261 (qualified_name -> identifier .)
    AND             reduce using rule 261 (qualified_name -> identifier .)
    GROUP           reduce using rule 261 (qualified_name -> identifier .)
    HAVING          reduce using rule 261 (qualified_name -> identifier .)
    THEN            reduce using rule 261 (qualified_name -> identifier .)
    VALUES          reduce using rule 261 (qualified_name -> identifier .)
    SELECT          reduce using rule 261 (qualified_name -> identifier .)
    ON              reduce using rule 261 (qualified_name -> identifier .)
    USING           reduce using rule 261 (qualified_name -> identifier .)
    ASC             reduce using rule 261 (qualified_name -> identifier .)
    DESC            reduce using rule 261 (qualified_name -> identifier .)
    NULLS           reduce using rule 261 (qualified_name -> identifier .)
    WHEN            reduce using rule 261 (qualified_name -> identifier .)
    END             reduce using rule 261 (qualified_name -> identifier .)
    ELSE            reduce using rule 261 (qualified_name -> identifier .)


state 9

    (97) nonjoin_query_primary -> LPAREN . nonjoin_query_expression RPAREN
    (65) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (91) nonjoin_query_expression -> . nonjoin_query_term
    (92) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (70) query_expression -> . query_expression_body
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (71) query_expression_body -> . nonjoin_query_expression
    (72) query_expression_body -> . joined_table
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 9
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    nonjoin_query_expression       shift and go to state 47
    query_expression               shift and go to state 48
    nonjoin_query_term             shift and go to state 24
    query_expression_body          shift and go to state 21
    nonjoin_query_primary          shift and go to state 28
    joined_table                   shift and go to state 23
    simple_table                   shift and go to state 30
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32
    table_reference                shift and go to state 18
    table_primary                  shift and go to state 29
    qualified_name                 shift and go to state 36
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 10

    (47) statement -> cursor_specification .

    $end            reduce using rule 47 (statement -> cursor_specification .)


state 11

    (48) statement -> delete .

    $end            reduce using rule 48 (statement -> delete .)


state 12

    (49) statement -> update .

    $end            reduce using rule 49 (statement -> update .)


state 13

    (50) statement -> insert .

    $end            reduce using rule 50 (statement -> insert .)


state 14

    (64) cursor_specification -> query_expression . order_by_opt limit_opt for_update_opt
    (73) order_by_opt -> . ORDER BY sort_items
    (74) order_by_opt -> . empty
    (271) empty -> .

    ORDER           shift and go to state 50
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)

    order_by_opt                   shift and go to state 49
    empty                          shift and go to state 51

state 15

    (59) delete -> DELETE . FROM relations where_opt order_by_opt limit_opt

    FROM            shift and go to state 52


state 16

    (60) update -> UPDATE . relations SET update_set_list where_opt order_by_opt limit_opt
    (125) relations -> . relations COMMA table_reference
    (126) relations -> . table_reference
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    relations                      shift and go to state 53
    table_reference                shift and go to state 54
    table_primary                  shift and go to state 29
    joined_table                   shift and go to state 55
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 17

    (51) insert -> INSERT . ignore INTO table_reference VALUES LPAREN insert_value RPAREN
    (52) insert -> INSERT . ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (53) insert -> INSERT . ignore INTO table_reference LPAREN index_column_list RPAREN query_spec
    (54) insert -> INSERT . ignore INTO table_reference query_spec
    (57) ignore -> . IGNORE
    (58) ignore -> . empty
    (271) empty -> .

    IGNORE          shift and go to state 58
    INTO            reduce using rule 271 (empty -> .)

    ignore                         shift and go to state 57
    empty                          shift and go to state 59

state 18

    (134) cross_join -> table_reference . CROSS JOIN table_primary
    (135) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (136) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (137) join_type -> . INNER
    (138) join_type -> . LEFT outer_opt
    (139) join_type -> . RIGHT outer_opt
    (140) join_type -> . FULL outer_opt
    (141) join_type -> . empty
    (271) empty -> .

    CROSS           shift and go to state 60
    NATURAL         shift and go to state 62
    INNER           shift and go to state 63
    LEFT            shift and go to state 64
    RIGHT           shift and go to state 65
    FULL            shift and go to state 66
    JOIN            reduce using rule 271 (empty -> .)

    join_type                      shift and go to state 61
    empty                          shift and go to state 67

state 19

    (102) table_value_constructor -> VALUES . values_list
    (103) values_list -> . values_list COMMA expression
    (104) values_list -> . expression
    (154) expression -> . search_condition
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    values_list                    shift and go to state 68
    expression                     shift and go to state 69
    search_condition               shift and go to state 70
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 20

    (98) simple_table -> query_spec .

    INTERSECT       reduce using rule 98 (simple_table -> query_spec .)
    UNION           reduce using rule 98 (simple_table -> query_spec .)
    EXCEPT          reduce using rule 98 (simple_table -> query_spec .)
    ORDER           reduce using rule 98 (simple_table -> query_spec .)
    LIMIT           reduce using rule 98 (simple_table -> query_spec .)
    FOR             reduce using rule 98 (simple_table -> query_spec .)
    $end            reduce using rule 98 (simple_table -> query_spec .)
    RPAREN          reduce using rule 98 (simple_table -> query_spec .)


state 21

    (70) query_expression -> query_expression_body .

    ORDER           reduce using rule 70 (query_expression -> query_expression_body .)
    LIMIT           reduce using rule 70 (query_expression -> query_expression_body .)
    FOR             reduce using rule 70 (query_expression -> query_expression_body .)
    $end            reduce using rule 70 (query_expression -> query_expression_body .)
    RPAREN          reduce using rule 70 (query_expression -> query_expression_body .)


state 22

    (71) query_expression_body -> nonjoin_query_expression .
    (92) nonjoin_query_expression -> nonjoin_query_expression . UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> nonjoin_query_expression . EXCEPT set_quantifier_opt nonjoin_query_term

    ORDER           reduce using rule 71 (query_expression_body -> nonjoin_query_expression .)
    LIMIT           reduce using rule 71 (query_expression_body -> nonjoin_query_expression .)
    FOR             reduce using rule 71 (query_expression_body -> nonjoin_query_expression .)
    $end            reduce using rule 71 (query_expression_body -> nonjoin_query_expression .)
    RPAREN          reduce using rule 71 (query_expression_body -> nonjoin_query_expression .)
    UNION           shift and go to state 77
    EXCEPT          shift and go to state 78


state 23

    (72) query_expression_body -> joined_table .
    (128) table_reference -> joined_table .

    ORDER           reduce using rule 72 (query_expression_body -> joined_table .)
    LIMIT           reduce using rule 72 (query_expression_body -> joined_table .)
    FOR             reduce using rule 72 (query_expression_body -> joined_table .)
    $end            reduce using rule 72 (query_expression_body -> joined_table .)
    RPAREN          reduce using rule 72 (query_expression_body -> joined_table .)
    CROSS           reduce using rule 128 (table_reference -> joined_table .)
    NATURAL         reduce using rule 128 (table_reference -> joined_table .)
    INNER           reduce using rule 128 (table_reference -> joined_table .)
    LEFT            reduce using rule 128 (table_reference -> joined_table .)
    RIGHT           reduce using rule 128 (table_reference -> joined_table .)
    FULL            reduce using rule 128 (table_reference -> joined_table .)
    JOIN            reduce using rule 128 (table_reference -> joined_table .)


state 24

    (91) nonjoin_query_expression -> nonjoin_query_term .
    (95) nonjoin_query_term -> nonjoin_query_term . INTERSECT set_quantifier_opt nonjoin_query_primary

    UNION           reduce using rule 91 (nonjoin_query_expression -> nonjoin_query_term .)
    EXCEPT          reduce using rule 91 (nonjoin_query_expression -> nonjoin_query_term .)
    ORDER           reduce using rule 91 (nonjoin_query_expression -> nonjoin_query_term .)
    LIMIT           reduce using rule 91 (nonjoin_query_expression -> nonjoin_query_term .)
    FOR             reduce using rule 91 (nonjoin_query_expression -> nonjoin_query_term .)
    $end            reduce using rule 91 (nonjoin_query_expression -> nonjoin_query_term .)
    RPAREN          reduce using rule 91 (nonjoin_query_expression -> nonjoin_query_term .)
    INTERSECT       shift and go to state 79


state 25

    (131) joined_table -> cross_join .

    ORDER           reduce using rule 131 (joined_table -> cross_join .)
    LIMIT           reduce using rule 131 (joined_table -> cross_join .)
    FOR             reduce using rule 131 (joined_table -> cross_join .)
    $end            reduce using rule 131 (joined_table -> cross_join .)
    CROSS           reduce using rule 131 (joined_table -> cross_join .)
    NATURAL         reduce using rule 131 (joined_table -> cross_join .)
    INNER           reduce using rule 131 (joined_table -> cross_join .)
    LEFT            reduce using rule 131 (joined_table -> cross_join .)
    RIGHT           reduce using rule 131 (joined_table -> cross_join .)
    FULL            reduce using rule 131 (joined_table -> cross_join .)
    JOIN            reduce using rule 131 (joined_table -> cross_join .)
    RPAREN          reduce using rule 131 (joined_table -> cross_join .)
    SET             reduce using rule 131 (joined_table -> cross_join .)
    COMMA           reduce using rule 131 (joined_table -> cross_join .)
    WHERE           reduce using rule 131 (joined_table -> cross_join .)
    GROUP           reduce using rule 131 (joined_table -> cross_join .)
    HAVING          reduce using rule 131 (joined_table -> cross_join .)
    INTERSECT       reduce using rule 131 (joined_table -> cross_join .)
    UNION           reduce using rule 131 (joined_table -> cross_join .)
    EXCEPT          reduce using rule 131 (joined_table -> cross_join .)
    VALUES          reduce using rule 131 (joined_table -> cross_join .)
    LPAREN          reduce using rule 131 (joined_table -> cross_join .)
    SELECT          reduce using rule 131 (joined_table -> cross_join .)
    ON              reduce using rule 131 (joined_table -> cross_join .)
    USING           reduce using rule 131 (joined_table -> cross_join .)


state 26

    (132) joined_table -> qualified_join .

    ORDER           reduce using rule 132 (joined_table -> qualified_join .)
    LIMIT           reduce using rule 132 (joined_table -> qualified_join .)
    FOR             reduce using rule 132 (joined_table -> qualified_join .)
    $end            reduce using rule 132 (joined_table -> qualified_join .)
    CROSS           reduce using rule 132 (joined_table -> qualified_join .)
    NATURAL         reduce using rule 132 (joined_table -> qualified_join .)
    INNER           reduce using rule 132 (joined_table -> qualified_join .)
    LEFT            reduce using rule 132 (joined_table -> qualified_join .)
    RIGHT           reduce using rule 132 (joined_table -> qualified_join .)
    FULL            reduce using rule 132 (joined_table -> qualified_join .)
    JOIN            reduce using rule 132 (joined_table -> qualified_join .)
    RPAREN          reduce using rule 132 (joined_table -> qualified_join .)
    SET             reduce using rule 132 (joined_table -> qualified_join .)
    COMMA           reduce using rule 132 (joined_table -> qualified_join .)
    WHERE           reduce using rule 132 (joined_table -> qualified_join .)
    GROUP           reduce using rule 132 (joined_table -> qualified_join .)
    HAVING          reduce using rule 132 (joined_table -> qualified_join .)
    INTERSECT       reduce using rule 132 (joined_table -> qualified_join .)
    UNION           reduce using rule 132 (joined_table -> qualified_join .)
    EXCEPT          reduce using rule 132 (joined_table -> qualified_join .)
    VALUES          reduce using rule 132 (joined_table -> qualified_join .)
    LPAREN          reduce using rule 132 (joined_table -> qualified_join .)
    SELECT          reduce using rule 132 (joined_table -> qualified_join .)
    ON              reduce using rule 132 (joined_table -> qualified_join .)
    USING           reduce using rule 132 (joined_table -> qualified_join .)


state 27

    (133) joined_table -> natural_join .

    ORDER           reduce using rule 133 (joined_table -> natural_join .)
    LIMIT           reduce using rule 133 (joined_table -> natural_join .)
    FOR             reduce using rule 133 (joined_table -> natural_join .)
    $end            reduce using rule 133 (joined_table -> natural_join .)
    CROSS           reduce using rule 133 (joined_table -> natural_join .)
    NATURAL         reduce using rule 133 (joined_table -> natural_join .)
    INNER           reduce using rule 133 (joined_table -> natural_join .)
    LEFT            reduce using rule 133 (joined_table -> natural_join .)
    RIGHT           reduce using rule 133 (joined_table -> natural_join .)
    FULL            reduce using rule 133 (joined_table -> natural_join .)
    JOIN            reduce using rule 133 (joined_table -> natural_join .)
    RPAREN          reduce using rule 133 (joined_table -> natural_join .)
    SET             reduce using rule 133 (joined_table -> natural_join .)
    COMMA           reduce using rule 133 (joined_table -> natural_join .)
    WHERE           reduce using rule 133 (joined_table -> natural_join .)
    GROUP           reduce using rule 133 (joined_table -> natural_join .)
    HAVING          reduce using rule 133 (joined_table -> natural_join .)
    INTERSECT       reduce using rule 133 (joined_table -> natural_join .)
    UNION           reduce using rule 133 (joined_table -> natural_join .)
    EXCEPT          reduce using rule 133 (joined_table -> natural_join .)
    VALUES          reduce using rule 133 (joined_table -> natural_join .)
    LPAREN          reduce using rule 133 (joined_table -> natural_join .)
    SELECT          reduce using rule 133 (joined_table -> natural_join .)
    ON              reduce using rule 133 (joined_table -> natural_join .)
    USING           reduce using rule 133 (joined_table -> natural_join .)


state 28

    (94) nonjoin_query_term -> nonjoin_query_primary .

    INTERSECT       reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)
    UNION           reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)
    EXCEPT          reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)
    ORDER           reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)
    LIMIT           reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)
    FOR             reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)
    $end            reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)
    RPAREN          reduce using rule 94 (nonjoin_query_term -> nonjoin_query_primary .)


state 29

    (127) table_reference -> table_primary .

    CROSS           reduce using rule 127 (table_reference -> table_primary .)
    NATURAL         reduce using rule 127 (table_reference -> table_primary .)
    INNER           reduce using rule 127 (table_reference -> table_primary .)
    LEFT            reduce using rule 127 (table_reference -> table_primary .)
    RIGHT           reduce using rule 127 (table_reference -> table_primary .)
    FULL            reduce using rule 127 (table_reference -> table_primary .)
    JOIN            reduce using rule 127 (table_reference -> table_primary .)
    SET             reduce using rule 127 (table_reference -> table_primary .)
    COMMA           reduce using rule 127 (table_reference -> table_primary .)
    WHERE           reduce using rule 127 (table_reference -> table_primary .)
    ORDER           reduce using rule 127 (table_reference -> table_primary .)
    LIMIT           reduce using rule 127 (table_reference -> table_primary .)
    $end            reduce using rule 127 (table_reference -> table_primary .)
    GROUP           reduce using rule 127 (table_reference -> table_primary .)
    HAVING          reduce using rule 127 (table_reference -> table_primary .)
    FOR             reduce using rule 127 (table_reference -> table_primary .)
    INTERSECT       reduce using rule 127 (table_reference -> table_primary .)
    UNION           reduce using rule 127 (table_reference -> table_primary .)
    EXCEPT          reduce using rule 127 (table_reference -> table_primary .)
    RPAREN          reduce using rule 127 (table_reference -> table_primary .)
    VALUES          reduce using rule 127 (table_reference -> table_primary .)
    LPAREN          reduce using rule 127 (table_reference -> table_primary .)
    SELECT          reduce using rule 127 (table_reference -> table_primary .)
    ON              reduce using rule 127 (table_reference -> table_primary .)
    USING           reduce using rule 127 (table_reference -> table_primary .)


state 30

    (96) nonjoin_query_primary -> simple_table .

    INTERSECT       reduce using rule 96 (nonjoin_query_primary -> simple_table .)
    UNION           reduce using rule 96 (nonjoin_query_primary -> simple_table .)
    EXCEPT          reduce using rule 96 (nonjoin_query_primary -> simple_table .)
    ORDER           reduce using rule 96 (nonjoin_query_primary -> simple_table .)
    LIMIT           reduce using rule 96 (nonjoin_query_primary -> simple_table .)
    FOR             reduce using rule 96 (nonjoin_query_primary -> simple_table .)
    $end            reduce using rule 96 (nonjoin_query_primary -> simple_table .)
    RPAREN          reduce using rule 96 (nonjoin_query_primary -> simple_table .)


state 31

    (99) simple_table -> explicit_table .

    INTERSECT       reduce using rule 99 (simple_table -> explicit_table .)
    UNION           reduce using rule 99 (simple_table -> explicit_table .)
    EXCEPT          reduce using rule 99 (simple_table -> explicit_table .)
    ORDER           reduce using rule 99 (simple_table -> explicit_table .)
    LIMIT           reduce using rule 99 (simple_table -> explicit_table .)
    FOR             reduce using rule 99 (simple_table -> explicit_table .)
    $end            reduce using rule 99 (simple_table -> explicit_table .)
    RPAREN          reduce using rule 99 (simple_table -> explicit_table .)


state 32

    (100) simple_table -> table_value_constructor .

    INTERSECT       reduce using rule 100 (simple_table -> table_value_constructor .)
    UNION           reduce using rule 100 (simple_table -> table_value_constructor .)
    EXCEPT          reduce using rule 100 (simple_table -> table_value_constructor .)
    ORDER           reduce using rule 100 (simple_table -> table_value_constructor .)
    LIMIT           reduce using rule 100 (simple_table -> table_value_constructor .)
    FOR             reduce using rule 100 (simple_table -> table_value_constructor .)
    $end            reduce using rule 100 (simple_table -> table_value_constructor .)
    RPAREN          reduce using rule 100 (simple_table -> table_value_constructor .)


state 33

    (129) table_primary -> aliased_relation .

    CROSS           reduce using rule 129 (table_primary -> aliased_relation .)
    NATURAL         reduce using rule 129 (table_primary -> aliased_relation .)
    INNER           reduce using rule 129 (table_primary -> aliased_relation .)
    LEFT            reduce using rule 129 (table_primary -> aliased_relation .)
    RIGHT           reduce using rule 129 (table_primary -> aliased_relation .)
    FULL            reduce using rule 129 (table_primary -> aliased_relation .)
    JOIN            reduce using rule 129 (table_primary -> aliased_relation .)
    SET             reduce using rule 129 (table_primary -> aliased_relation .)
    COMMA           reduce using rule 129 (table_primary -> aliased_relation .)
    WHERE           reduce using rule 129 (table_primary -> aliased_relation .)
    ORDER           reduce using rule 129 (table_primary -> aliased_relation .)
    LIMIT           reduce using rule 129 (table_primary -> aliased_relation .)
    $end            reduce using rule 129 (table_primary -> aliased_relation .)
    GROUP           reduce using rule 129 (table_primary -> aliased_relation .)
    HAVING          reduce using rule 129 (table_primary -> aliased_relation .)
    FOR             reduce using rule 129 (table_primary -> aliased_relation .)
    INTERSECT       reduce using rule 129 (table_primary -> aliased_relation .)
    UNION           reduce using rule 129 (table_primary -> aliased_relation .)
    EXCEPT          reduce using rule 129 (table_primary -> aliased_relation .)
    RPAREN          reduce using rule 129 (table_primary -> aliased_relation .)
    VALUES          reduce using rule 129 (table_primary -> aliased_relation .)
    LPAREN          reduce using rule 129 (table_primary -> aliased_relation .)
    SELECT          reduce using rule 129 (table_primary -> aliased_relation .)
    ON              reduce using rule 129 (table_primary -> aliased_relation .)
    USING           reduce using rule 129 (table_primary -> aliased_relation .)


state 34

    (130) table_primary -> derived_table .

    CROSS           reduce using rule 130 (table_primary -> derived_table .)
    NATURAL         reduce using rule 130 (table_primary -> derived_table .)
    INNER           reduce using rule 130 (table_primary -> derived_table .)
    LEFT            reduce using rule 130 (table_primary -> derived_table .)
    RIGHT           reduce using rule 130 (table_primary -> derived_table .)
    FULL            reduce using rule 130 (table_primary -> derived_table .)
    JOIN            reduce using rule 130 (table_primary -> derived_table .)
    SET             reduce using rule 130 (table_primary -> derived_table .)
    COMMA           reduce using rule 130 (table_primary -> derived_table .)
    WHERE           reduce using rule 130 (table_primary -> derived_table .)
    ORDER           reduce using rule 130 (table_primary -> derived_table .)
    LIMIT           reduce using rule 130 (table_primary -> derived_table .)
    $end            reduce using rule 130 (table_primary -> derived_table .)
    GROUP           reduce using rule 130 (table_primary -> derived_table .)
    HAVING          reduce using rule 130 (table_primary -> derived_table .)
    FOR             reduce using rule 130 (table_primary -> derived_table .)
    INTERSECT       reduce using rule 130 (table_primary -> derived_table .)
    UNION           reduce using rule 130 (table_primary -> derived_table .)
    EXCEPT          reduce using rule 130 (table_primary -> derived_table .)
    RPAREN          reduce using rule 130 (table_primary -> derived_table .)
    VALUES          reduce using rule 130 (table_primary -> derived_table .)
    LPAREN          reduce using rule 130 (table_primary -> derived_table .)
    SELECT          reduce using rule 130 (table_primary -> derived_table .)
    ON              reduce using rule 130 (table_primary -> derived_table .)
    USING           reduce using rule 130 (table_primary -> derived_table .)


state 35

    (105) query_spec -> SELECT . select_items table_expression_opt
    (117) select_items -> . select_item
    (118) select_items -> . select_items COMMA select_item
    (119) select_item -> . derived_column
    (120) select_item -> . DISTINCT LPAREN derived_column RPAREN
    (121) select_item -> . DISTINCT derived_column
    (122) derived_column -> . value_expression alias_opt
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    DISTINCT        shift and go to state 83
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    select_items                   shift and go to state 80
    select_item                    shift and go to state 81
    derived_column                 shift and go to state 82
    value_expression               shift and go to state 84
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 36

    (149) aliased_relation -> qualified_name . alias_opt
    (260) qualified_name -> qualified_name . PERIOD qualified_name
    (151) alias_opt -> . alias
    (152) alias_opt -> . empty
    (153) alias -> . as_opt identifier
    (271) empty -> .
    (247) as_opt -> . AS
    (248) as_opt -> . empty

    PERIOD          shift and go to state 94
    CROSS           reduce using rule 271 (empty -> .)
    NATURAL         reduce using rule 271 (empty -> .)
    INNER           reduce using rule 271 (empty -> .)
    LEFT            reduce using rule 271 (empty -> .)
    RIGHT           reduce using rule 271 (empty -> .)
    FULL            reduce using rule 271 (empty -> .)
    JOIN            reduce using rule 271 (empty -> .)
    SET             reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    WHERE           reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)
    LPAREN          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    ON              reduce using rule 271 (empty -> .)
    USING           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    AS              shift and go to state 98

    alias_opt                      shift and go to state 93
    alias                          shift and go to state 95
    empty                          shift and go to state 96
    as_opt                         shift and go to state 97

state 37

    (150) derived_table -> subquery . alias_opt
    (151) alias_opt -> . alias
    (152) alias_opt -> . empty
    (153) alias -> . as_opt identifier
    (271) empty -> .
    (247) as_opt -> . AS
    (248) as_opt -> . empty

    CROSS           reduce using rule 271 (empty -> .)
    NATURAL         reduce using rule 271 (empty -> .)
    INNER           reduce using rule 271 (empty -> .)
    LEFT            reduce using rule 271 (empty -> .)
    RIGHT           reduce using rule 271 (empty -> .)
    FULL            reduce using rule 271 (empty -> .)
    JOIN            reduce using rule 271 (empty -> .)
    SET             reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    WHERE           reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)
    LPAREN          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    ON              reduce using rule 271 (empty -> .)
    USING           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    AS              shift and go to state 98

    alias_opt                      shift and go to state 99
    alias                          shift and go to state 95
    empty                          shift and go to state 96
    as_opt                         shift and go to state 97

state 38

    (262) identifier -> IDENTIFIER .

    PERIOD          reduce using rule 262 (identifier -> IDENTIFIER .)
    AS              reduce using rule 262 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 262 (identifier -> IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 262 (identifier -> IDENTIFIER .)
    ASTERISK        reduce using rule 262 (identifier -> IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 262 (identifier -> IDENTIFIER .)
    NON_RESERVED    reduce using rule 262 (identifier -> IDENTIFIER .)
    CROSS           reduce using rule 262 (identifier -> IDENTIFIER .)
    NATURAL         reduce using rule 262 (identifier -> IDENTIFIER .)
    INNER           reduce using rule 262 (identifier -> IDENTIFIER .)
    LEFT            reduce using rule 262 (identifier -> IDENTIFIER .)
    RIGHT           reduce using rule 262 (identifier -> IDENTIFIER .)
    FULL            reduce using rule 262 (identifier -> IDENTIFIER .)
    JOIN            reduce using rule 262 (identifier -> IDENTIFIER .)
    INTERSECT       reduce using rule 262 (identifier -> IDENTIFIER .)
    UNION           reduce using rule 262 (identifier -> IDENTIFIER .)
    EXCEPT          reduce using rule 262 (identifier -> IDENTIFIER .)
    ORDER           reduce using rule 262 (identifier -> IDENTIFIER .)
    LIMIT           reduce using rule 262 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 262 (identifier -> IDENTIFIER .)
    $end            reduce using rule 262 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 262 (identifier -> IDENTIFIER .)
    SET             reduce using rule 262 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 262 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 262 (identifier -> IDENTIFIER .)
    WHERE           reduce using rule 262 (identifier -> IDENTIFIER .)
    SLASH           reduce using rule 262 (identifier -> IDENTIFIER .)
    PERCENT         reduce using rule 262 (identifier -> IDENTIFIER .)
    CONCAT          reduce using rule 262 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 262 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 262 (identifier -> IDENTIFIER .)
    FROM            reduce using rule 262 (identifier -> IDENTIFIER .)
    REGEXP          reduce using rule 262 (identifier -> IDENTIFIER .)
    IS              reduce using rule 262 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 262 (identifier -> IDENTIFIER .)
    NE              reduce using rule 262 (identifier -> IDENTIFIER .)
    LT              reduce using rule 262 (identifier -> IDENTIFIER .)
    LE              reduce using rule 262 (identifier -> IDENTIFIER .)
    GT              reduce using rule 262 (identifier -> IDENTIFIER .)
    GE              reduce using rule 262 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 262 (identifier -> IDENTIFIER .)
    BETWEEN         reduce using rule 262 (identifier -> IDENTIFIER .)
    IN              reduce using rule 262 (identifier -> IDENTIFIER .)
    LIKE            reduce using rule 262 (identifier -> IDENTIFIER .)
    OR              reduce using rule 262 (identifier -> IDENTIFIER .)
    AND             reduce using rule 262 (identifier -> IDENTIFIER .)
    GROUP           reduce using rule 262 (identifier -> IDENTIFIER .)
    HAVING          reduce using rule 262 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 262 (identifier -> IDENTIFIER .)
    VALUES          reduce using rule 262 (identifier -> IDENTIFIER .)
    SELECT          reduce using rule 262 (identifier -> IDENTIFIER .)
    ON              reduce using rule 262 (identifier -> IDENTIFIER .)
    USING           reduce using rule 262 (identifier -> IDENTIFIER .)
    ASC             reduce using rule 262 (identifier -> IDENTIFIER .)
    DESC            reduce using rule 262 (identifier -> IDENTIFIER .)
    NULLS           reduce using rule 262 (identifier -> IDENTIFIER .)
    WHEN            reduce using rule 262 (identifier -> IDENTIFIER .)
    END             reduce using rule 262 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 262 (identifier -> IDENTIFIER .)
    INT             reduce using rule 262 (identifier -> IDENTIFIER .)
    FLOAT           reduce using rule 262 (identifier -> IDENTIFIER .)
    BIGINT          reduce using rule 262 (identifier -> IDENTIFIER .)
    TINYINT         reduce using rule 262 (identifier -> IDENTIFIER .)
    DATETIME        reduce using rule 262 (identifier -> IDENTIFIER .)
    VARCHAR         reduce using rule 262 (identifier -> IDENTIFIER .)
    CHAR            reduce using rule 262 (identifier -> IDENTIFIER .)
    TIMESTAMP       reduce using rule 262 (identifier -> IDENTIFIER .)
    DEFAULT         reduce using rule 262 (identifier -> IDENTIFIER .)
    NULL            reduce using rule 262 (identifier -> IDENTIFIER .)
    UNSIGNED        reduce using rule 262 (identifier -> IDENTIFIER .)
    COLLATE         reduce using rule 262 (identifier -> IDENTIFIER .)
    COMPRESSION     reduce using rule 262 (identifier -> IDENTIFIER .)


state 39

    (263) identifier -> quoted_identifier .

    PERIOD          reduce using rule 263 (identifier -> quoted_identifier .)
    AS              reduce using rule 263 (identifier -> quoted_identifier .)
    IDENTIFIER      reduce using rule 263 (identifier -> quoted_identifier .)
    DIGIT_IDENTIFIER reduce using rule 263 (identifier -> quoted_identifier .)
    ASTERISK        reduce using rule 263 (identifier -> quoted_identifier .)
    BACKQUOTED_IDENTIFIER reduce using rule 263 (identifier -> quoted_identifier .)
    NON_RESERVED    reduce using rule 263 (identifier -> quoted_identifier .)
    CROSS           reduce using rule 263 (identifier -> quoted_identifier .)
    NATURAL         reduce using rule 263 (identifier -> quoted_identifier .)
    INNER           reduce using rule 263 (identifier -> quoted_identifier .)
    LEFT            reduce using rule 263 (identifier -> quoted_identifier .)
    RIGHT           reduce using rule 263 (identifier -> quoted_identifier .)
    FULL            reduce using rule 263 (identifier -> quoted_identifier .)
    JOIN            reduce using rule 263 (identifier -> quoted_identifier .)
    INTERSECT       reduce using rule 263 (identifier -> quoted_identifier .)
    UNION           reduce using rule 263 (identifier -> quoted_identifier .)
    EXCEPT          reduce using rule 263 (identifier -> quoted_identifier .)
    ORDER           reduce using rule 263 (identifier -> quoted_identifier .)
    LIMIT           reduce using rule 263 (identifier -> quoted_identifier .)
    FOR             reduce using rule 263 (identifier -> quoted_identifier .)
    $end            reduce using rule 263 (identifier -> quoted_identifier .)
    RPAREN          reduce using rule 263 (identifier -> quoted_identifier .)
    SET             reduce using rule 263 (identifier -> quoted_identifier .)
    COMMA           reduce using rule 263 (identifier -> quoted_identifier .)
    LPAREN          reduce using rule 263 (identifier -> quoted_identifier .)
    WHERE           reduce using rule 263 (identifier -> quoted_identifier .)
    SLASH           reduce using rule 263 (identifier -> quoted_identifier .)
    PERCENT         reduce using rule 263 (identifier -> quoted_identifier .)
    CONCAT          reduce using rule 263 (identifier -> quoted_identifier .)
    PLUS            reduce using rule 263 (identifier -> quoted_identifier .)
    MINUS           reduce using rule 263 (identifier -> quoted_identifier .)
    FROM            reduce using rule 263 (identifier -> quoted_identifier .)
    REGEXP          reduce using rule 263 (identifier -> quoted_identifier .)
    IS              reduce using rule 263 (identifier -> quoted_identifier .)
    EQ              reduce using rule 263 (identifier -> quoted_identifier .)
    NE              reduce using rule 263 (identifier -> quoted_identifier .)
    LT              reduce using rule 263 (identifier -> quoted_identifier .)
    LE              reduce using rule 263 (identifier -> quoted_identifier .)
    GT              reduce using rule 263 (identifier -> quoted_identifier .)
    GE              reduce using rule 263 (identifier -> quoted_identifier .)
    NOT             reduce using rule 263 (identifier -> quoted_identifier .)
    BETWEEN         reduce using rule 263 (identifier -> quoted_identifier .)
    IN              reduce using rule 263 (identifier -> quoted_identifier .)
    LIKE            reduce using rule 263 (identifier -> quoted_identifier .)
    OR              reduce using rule 263 (identifier -> quoted_identifier .)
    AND             reduce using rule 263 (identifier -> quoted_identifier .)
    GROUP           reduce using rule 263 (identifier -> quoted_identifier .)
    HAVING          reduce using rule 263 (identifier -> quoted_identifier .)
    THEN            reduce using rule 263 (identifier -> quoted_identifier .)
    VALUES          reduce using rule 263 (identifier -> quoted_identifier .)
    SELECT          reduce using rule 263 (identifier -> quoted_identifier .)
    ON              reduce using rule 263 (identifier -> quoted_identifier .)
    USING           reduce using rule 263 (identifier -> quoted_identifier .)
    ASC             reduce using rule 263 (identifier -> quoted_identifier .)
    DESC            reduce using rule 263 (identifier -> quoted_identifier .)
    NULLS           reduce using rule 263 (identifier -> quoted_identifier .)
    WHEN            reduce using rule 263 (identifier -> quoted_identifier .)
    END             reduce using rule 263 (identifier -> quoted_identifier .)
    ELSE            reduce using rule 263 (identifier -> quoted_identifier .)
    INT             reduce using rule 263 (identifier -> quoted_identifier .)
    FLOAT           reduce using rule 263 (identifier -> quoted_identifier .)
    BIGINT          reduce using rule 263 (identifier -> quoted_identifier .)
    TINYINT         reduce using rule 263 (identifier -> quoted_identifier .)
    DATETIME        reduce using rule 263 (identifier -> quoted_identifier .)
    VARCHAR         reduce using rule 263 (identifier -> quoted_identifier .)
    CHAR            reduce using rule 263 (identifier -> quoted_identifier .)
    TIMESTAMP       reduce using rule 263 (identifier -> quoted_identifier .)
    DEFAULT         reduce using rule 263 (identifier -> quoted_identifier .)
    NULL            reduce using rule 263 (identifier -> quoted_identifier .)
    UNSIGNED        reduce using rule 263 (identifier -> quoted_identifier .)
    COLLATE         reduce using rule 263 (identifier -> quoted_identifier .)
    COMPRESSION     reduce using rule 263 (identifier -> quoted_identifier .)


state 40

    (264) identifier -> non_reserved .

    PERIOD          reduce using rule 264 (identifier -> non_reserved .)
    AS              reduce using rule 264 (identifier -> non_reserved .)
    IDENTIFIER      reduce using rule 264 (identifier -> non_reserved .)
    DIGIT_IDENTIFIER reduce using rule 264 (identifier -> non_reserved .)
    ASTERISK        reduce using rule 264 (identifier -> non_reserved .)
    BACKQUOTED_IDENTIFIER reduce using rule 264 (identifier -> non_reserved .)
    NON_RESERVED    reduce using rule 264 (identifier -> non_reserved .)
    CROSS           reduce using rule 264 (identifier -> non_reserved .)
    NATURAL         reduce using rule 264 (identifier -> non_reserved .)
    INNER           reduce using rule 264 (identifier -> non_reserved .)
    LEFT            reduce using rule 264 (identifier -> non_reserved .)
    RIGHT           reduce using rule 264 (identifier -> non_reserved .)
    FULL            reduce using rule 264 (identifier -> non_reserved .)
    JOIN            reduce using rule 264 (identifier -> non_reserved .)
    INTERSECT       reduce using rule 264 (identifier -> non_reserved .)
    UNION           reduce using rule 264 (identifier -> non_reserved .)
    EXCEPT          reduce using rule 264 (identifier -> non_reserved .)
    ORDER           reduce using rule 264 (identifier -> non_reserved .)
    LIMIT           reduce using rule 264 (identifier -> non_reserved .)
    FOR             reduce using rule 264 (identifier -> non_reserved .)
    $end            reduce using rule 264 (identifier -> non_reserved .)
    RPAREN          reduce using rule 264 (identifier -> non_reserved .)
    SET             reduce using rule 264 (identifier -> non_reserved .)
    COMMA           reduce using rule 264 (identifier -> non_reserved .)
    LPAREN          reduce using rule 264 (identifier -> non_reserved .)
    WHERE           reduce using rule 264 (identifier -> non_reserved .)
    SLASH           reduce using rule 264 (identifier -> non_reserved .)
    PERCENT         reduce using rule 264 (identifier -> non_reserved .)
    CONCAT          reduce using rule 264 (identifier -> non_reserved .)
    PLUS            reduce using rule 264 (identifier -> non_reserved .)
    MINUS           reduce using rule 264 (identifier -> non_reserved .)
    FROM            reduce using rule 264 (identifier -> non_reserved .)
    REGEXP          reduce using rule 264 (identifier -> non_reserved .)
    IS              reduce using rule 264 (identifier -> non_reserved .)
    EQ              reduce using rule 264 (identifier -> non_reserved .)
    NE              reduce using rule 264 (identifier -> non_reserved .)
    LT              reduce using rule 264 (identifier -> non_reserved .)
    LE              reduce using rule 264 (identifier -> non_reserved .)
    GT              reduce using rule 264 (identifier -> non_reserved .)
    GE              reduce using rule 264 (identifier -> non_reserved .)
    NOT             reduce using rule 264 (identifier -> non_reserved .)
    BETWEEN         reduce using rule 264 (identifier -> non_reserved .)
    IN              reduce using rule 264 (identifier -> non_reserved .)
    LIKE            reduce using rule 264 (identifier -> non_reserved .)
    OR              reduce using rule 264 (identifier -> non_reserved .)
    AND             reduce using rule 264 (identifier -> non_reserved .)
    GROUP           reduce using rule 264 (identifier -> non_reserved .)
    HAVING          reduce using rule 264 (identifier -> non_reserved .)
    THEN            reduce using rule 264 (identifier -> non_reserved .)
    VALUES          reduce using rule 264 (identifier -> non_reserved .)
    SELECT          reduce using rule 264 (identifier -> non_reserved .)
    ON              reduce using rule 264 (identifier -> non_reserved .)
    USING           reduce using rule 264 (identifier -> non_reserved .)
    ASC             reduce using rule 264 (identifier -> non_reserved .)
    DESC            reduce using rule 264 (identifier -> non_reserved .)
    NULLS           reduce using rule 264 (identifier -> non_reserved .)
    WHEN            reduce using rule 264 (identifier -> non_reserved .)
    END             reduce using rule 264 (identifier -> non_reserved .)
    ELSE            reduce using rule 264 (identifier -> non_reserved .)
    INT             reduce using rule 264 (identifier -> non_reserved .)
    FLOAT           reduce using rule 264 (identifier -> non_reserved .)
    BIGINT          reduce using rule 264 (identifier -> non_reserved .)
    TINYINT         reduce using rule 264 (identifier -> non_reserved .)
    DATETIME        reduce using rule 264 (identifier -> non_reserved .)
    VARCHAR         reduce using rule 264 (identifier -> non_reserved .)
    CHAR            reduce using rule 264 (identifier -> non_reserved .)
    TIMESTAMP       reduce using rule 264 (identifier -> non_reserved .)
    DEFAULT         reduce using rule 264 (identifier -> non_reserved .)
    NULL            reduce using rule 264 (identifier -> non_reserved .)
    UNSIGNED        reduce using rule 264 (identifier -> non_reserved .)
    COLLATE         reduce using rule 264 (identifier -> non_reserved .)
    COMPRESSION     reduce using rule 264 (identifier -> non_reserved .)


state 41

    (265) identifier -> DIGIT_IDENTIFIER .

    PERIOD          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    AS              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    IDENTIFIER      reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    ASTERISK        reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    NON_RESERVED    reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    CROSS           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    NATURAL         reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    INNER           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    LEFT            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    RIGHT           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    FULL            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    JOIN            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    INTERSECT       reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    UNION           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    EXCEPT          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    ORDER           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    LIMIT           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    FOR             reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    $end            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    RPAREN          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    SET             reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    COMMA           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    LPAREN          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    WHERE           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    SLASH           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    PERCENT         reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    CONCAT          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    PLUS            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    MINUS           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    FROM            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    REGEXP          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    IS              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    EQ              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    NE              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    LT              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    LE              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    GT              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    GE              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    NOT             reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    BETWEEN         reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    IN              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    LIKE            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    OR              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    AND             reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    GROUP           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    HAVING          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    THEN            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    VALUES          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    SELECT          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    ON              reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    USING           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    ASC             reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    DESC            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    NULLS           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    WHEN            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    END             reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    ELSE            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    INT             reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    FLOAT           reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    BIGINT          reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    TINYINT         reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    DATETIME        reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    VARCHAR         reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    CHAR            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    TIMESTAMP       reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    DEFAULT         reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    NULL            reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    UNSIGNED        reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    COLLATE         reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)
    COMPRESSION     reduce using rule 265 (identifier -> DIGIT_IDENTIFIER .)


state 42

    (266) identifier -> ASTERISK .

    PERIOD          reduce using rule 266 (identifier -> ASTERISK .)
    AS              reduce using rule 266 (identifier -> ASTERISK .)
    IDENTIFIER      reduce using rule 266 (identifier -> ASTERISK .)
    DIGIT_IDENTIFIER reduce using rule 266 (identifier -> ASTERISK .)
    ASTERISK        reduce using rule 266 (identifier -> ASTERISK .)
    BACKQUOTED_IDENTIFIER reduce using rule 266 (identifier -> ASTERISK .)
    NON_RESERVED    reduce using rule 266 (identifier -> ASTERISK .)
    CROSS           reduce using rule 266 (identifier -> ASTERISK .)
    NATURAL         reduce using rule 266 (identifier -> ASTERISK .)
    INNER           reduce using rule 266 (identifier -> ASTERISK .)
    LEFT            reduce using rule 266 (identifier -> ASTERISK .)
    RIGHT           reduce using rule 266 (identifier -> ASTERISK .)
    FULL            reduce using rule 266 (identifier -> ASTERISK .)
    JOIN            reduce using rule 266 (identifier -> ASTERISK .)
    INTERSECT       reduce using rule 266 (identifier -> ASTERISK .)
    UNION           reduce using rule 266 (identifier -> ASTERISK .)
    EXCEPT          reduce using rule 266 (identifier -> ASTERISK .)
    ORDER           reduce using rule 266 (identifier -> ASTERISK .)
    LIMIT           reduce using rule 266 (identifier -> ASTERISK .)
    FOR             reduce using rule 266 (identifier -> ASTERISK .)
    $end            reduce using rule 266 (identifier -> ASTERISK .)
    RPAREN          reduce using rule 266 (identifier -> ASTERISK .)
    SET             reduce using rule 266 (identifier -> ASTERISK .)
    COMMA           reduce using rule 266 (identifier -> ASTERISK .)
    LPAREN          reduce using rule 266 (identifier -> ASTERISK .)
    WHERE           reduce using rule 266 (identifier -> ASTERISK .)
    SLASH           reduce using rule 266 (identifier -> ASTERISK .)
    PERCENT         reduce using rule 266 (identifier -> ASTERISK .)
    CONCAT          reduce using rule 266 (identifier -> ASTERISK .)
    PLUS            reduce using rule 266 (identifier -> ASTERISK .)
    MINUS           reduce using rule 266 (identifier -> ASTERISK .)
    FROM            reduce using rule 266 (identifier -> ASTERISK .)
    REGEXP          reduce using rule 266 (identifier -> ASTERISK .)
    IS              reduce using rule 266 (identifier -> ASTERISK .)
    EQ              reduce using rule 266 (identifier -> ASTERISK .)
    NE              reduce using rule 266 (identifier -> ASTERISK .)
    LT              reduce using rule 266 (identifier -> ASTERISK .)
    LE              reduce using rule 266 (identifier -> ASTERISK .)
    GT              reduce using rule 266 (identifier -> ASTERISK .)
    GE              reduce using rule 266 (identifier -> ASTERISK .)
    NOT             reduce using rule 266 (identifier -> ASTERISK .)
    BETWEEN         reduce using rule 266 (identifier -> ASTERISK .)
    IN              reduce using rule 266 (identifier -> ASTERISK .)
    LIKE            reduce using rule 266 (identifier -> ASTERISK .)
    OR              reduce using rule 266 (identifier -> ASTERISK .)
    AND             reduce using rule 266 (identifier -> ASTERISK .)
    GROUP           reduce using rule 266 (identifier -> ASTERISK .)
    HAVING          reduce using rule 266 (identifier -> ASTERISK .)
    THEN            reduce using rule 266 (identifier -> ASTERISK .)
    VALUES          reduce using rule 266 (identifier -> ASTERISK .)
    SELECT          reduce using rule 266 (identifier -> ASTERISK .)
    ON              reduce using rule 266 (identifier -> ASTERISK .)
    USING           reduce using rule 266 (identifier -> ASTERISK .)
    ASC             reduce using rule 266 (identifier -> ASTERISK .)
    DESC            reduce using rule 266 (identifier -> ASTERISK .)
    NULLS           reduce using rule 266 (identifier -> ASTERISK .)
    WHEN            reduce using rule 266 (identifier -> ASTERISK .)
    END             reduce using rule 266 (identifier -> ASTERISK .)
    ELSE            reduce using rule 266 (identifier -> ASTERISK .)
    INT             reduce using rule 266 (identifier -> ASTERISK .)
    FLOAT           reduce using rule 266 (identifier -> ASTERISK .)
    BIGINT          reduce using rule 266 (identifier -> ASTERISK .)
    TINYINT         reduce using rule 266 (identifier -> ASTERISK .)
    DATETIME        reduce using rule 266 (identifier -> ASTERISK .)
    VARCHAR         reduce using rule 266 (identifier -> ASTERISK .)
    CHAR            reduce using rule 266 (identifier -> ASTERISK .)
    TIMESTAMP       reduce using rule 266 (identifier -> ASTERISK .)
    DEFAULT         reduce using rule 266 (identifier -> ASTERISK .)
    NULL            reduce using rule 266 (identifier -> ASTERISK .)
    UNSIGNED        reduce using rule 266 (identifier -> ASTERISK .)
    COLLATE         reduce using rule 266 (identifier -> ASTERISK .)
    COMPRESSION     reduce using rule 266 (identifier -> ASTERISK .)


state 43

    (268) quoted_identifier -> BACKQUOTED_IDENTIFIER .

    PERIOD          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    AS              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    IDENTIFIER      reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ASTERISK        reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NON_RESERVED    reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    CROSS           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NATURAL         reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    INNER           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LEFT            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    RIGHT           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FULL            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    JOIN            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    INTERSECT       reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    UNION           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    EXCEPT          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ORDER           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LIMIT           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FOR             reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    $end            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    RPAREN          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    SET             reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    COMMA           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LPAREN          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    WHERE           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    SLASH           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    PERCENT         reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    CONCAT          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    PLUS            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    MINUS           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FROM            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    REGEXP          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    IS              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    EQ              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NE              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LT              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LE              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    GT              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    GE              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NOT             reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    BETWEEN         reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    IN              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LIKE            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    OR              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    AND             reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    GROUP           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    HAVING          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    THEN            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    VALUES          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    SELECT          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ON              reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    USING           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ASC             reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DESC            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NULLS           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    WHEN            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    END             reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ELSE            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    INT             reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FLOAT           reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    BIGINT          reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    TINYINT         reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DATETIME        reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    VARCHAR         reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    CHAR            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    TIMESTAMP       reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DEFAULT         reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NULL            reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    UNSIGNED        reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    COLLATE         reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    COMPRESSION     reduce using rule 268 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)


state 44

    (267) non_reserved -> NON_RESERVED .

    PERIOD          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    AS              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    IDENTIFIER      reduce using rule 267 (non_reserved -> NON_RESERVED .)
    DIGIT_IDENTIFIER reduce using rule 267 (non_reserved -> NON_RESERVED .)
    ASTERISK        reduce using rule 267 (non_reserved -> NON_RESERVED .)
    BACKQUOTED_IDENTIFIER reduce using rule 267 (non_reserved -> NON_RESERVED .)
    NON_RESERVED    reduce using rule 267 (non_reserved -> NON_RESERVED .)
    CROSS           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    NATURAL         reduce using rule 267 (non_reserved -> NON_RESERVED .)
    INNER           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    LEFT            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    RIGHT           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    FULL            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    JOIN            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    INTERSECT       reduce using rule 267 (non_reserved -> NON_RESERVED .)
    UNION           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    EXCEPT          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    ORDER           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    LIMIT           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    FOR             reduce using rule 267 (non_reserved -> NON_RESERVED .)
    $end            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    RPAREN          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    SET             reduce using rule 267 (non_reserved -> NON_RESERVED .)
    COMMA           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    LPAREN          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    WHERE           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    SLASH           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    PERCENT         reduce using rule 267 (non_reserved -> NON_RESERVED .)
    CONCAT          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    PLUS            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    MINUS           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    FROM            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    REGEXP          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    IS              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    EQ              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    NE              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    LT              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    LE              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    GT              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    GE              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    NOT             reduce using rule 267 (non_reserved -> NON_RESERVED .)
    BETWEEN         reduce using rule 267 (non_reserved -> NON_RESERVED .)
    IN              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    LIKE            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    OR              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    AND             reduce using rule 267 (non_reserved -> NON_RESERVED .)
    GROUP           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    HAVING          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    THEN            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    VALUES          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    SELECT          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    ON              reduce using rule 267 (non_reserved -> NON_RESERVED .)
    USING           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    ASC             reduce using rule 267 (non_reserved -> NON_RESERVED .)
    DESC            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    NULLS           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    WHEN            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    END             reduce using rule 267 (non_reserved -> NON_RESERVED .)
    ELSE            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    INT             reduce using rule 267 (non_reserved -> NON_RESERVED .)
    FLOAT           reduce using rule 267 (non_reserved -> NON_RESERVED .)
    BIGINT          reduce using rule 267 (non_reserved -> NON_RESERVED .)
    TINYINT         reduce using rule 267 (non_reserved -> NON_RESERVED .)
    DATETIME        reduce using rule 267 (non_reserved -> NON_RESERVED .)
    VARCHAR         reduce using rule 267 (non_reserved -> NON_RESERVED .)
    CHAR            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    TIMESTAMP       reduce using rule 267 (non_reserved -> NON_RESERVED .)
    DEFAULT         reduce using rule 267 (non_reserved -> NON_RESERVED .)
    NULL            reduce using rule 267 (non_reserved -> NON_RESERVED .)
    UNSIGNED        reduce using rule 267 (non_reserved -> NON_RESERVED .)
    COLLATE         reduce using rule 267 (non_reserved -> NON_RESERVED .)
    COMPRESSION     reduce using rule 267 (non_reserved -> NON_RESERVED .)


state 45

    (5) create_table -> CREATE TABLE . identifier LPAREN column_list RPAREN create_table_end
    (6) create_table -> CREATE TABLE . identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 100
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 46

    (101) explicit_table -> TABLE qualified_name .
    (260) qualified_name -> qualified_name . PERIOD qualified_name

    INTERSECT       reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    UNION           reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    EXCEPT          reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    ORDER           reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    LIMIT           reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    FOR             reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    $end            reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    RPAREN          reduce using rule 101 (explicit_table -> TABLE qualified_name .)
    PERIOD          shift and go to state 94


state 47

    (97) nonjoin_query_primary -> LPAREN nonjoin_query_expression . RPAREN
    (92) nonjoin_query_expression -> nonjoin_query_expression . UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> nonjoin_query_expression . EXCEPT set_quantifier_opt nonjoin_query_term
    (71) query_expression_body -> nonjoin_query_expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 101
    UNION           shift and go to state 77
    EXCEPT          shift and go to state 78
    ORDER           reduce using rule 71 (query_expression_body -> nonjoin_query_expression .)
    LIMIT           reduce using rule 71 (query_expression_body -> nonjoin_query_expression .)

  ! RPAREN          [ reduce using rule 71 (query_expression_body -> nonjoin_query_expression .) ]


state 48

    (65) subquery -> LPAREN query_expression . order_by_opt limit_opt RPAREN
    (73) order_by_opt -> . ORDER BY sort_items
    (74) order_by_opt -> . empty
    (271) empty -> .

    ORDER           shift and go to state 50
    LIMIT           reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    order_by_opt                   shift and go to state 102
    empty                          shift and go to state 51

state 49

    (64) cursor_specification -> query_expression order_by_opt . limit_opt for_update_opt
    (84) limit_opt -> . LIMIT INTEGER
    (85) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (86) limit_opt -> . LIMIT QM
    (87) limit_opt -> . LIMIT QM COMMA QM
    (88) limit_opt -> . LIMIT ALL
    (89) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (90) limit_opt -> . empty
    (271) empty -> .

    LIMIT           shift and go to state 104
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)

    limit_opt                      shift and go to state 103
    empty                          shift and go to state 105

state 50

    (73) order_by_opt -> ORDER . BY sort_items

    BY              shift and go to state 106


state 51

    (74) order_by_opt -> empty .

    LIMIT           reduce using rule 74 (order_by_opt -> empty .)
    FOR             reduce using rule 74 (order_by_opt -> empty .)
    $end            reduce using rule 74 (order_by_opt -> empty .)
    RPAREN          reduce using rule 74 (order_by_opt -> empty .)


state 52

    (59) delete -> DELETE FROM . relations where_opt order_by_opt limit_opt
    (125) relations -> . relations COMMA table_reference
    (126) relations -> . table_reference
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    relations                      shift and go to state 107
    table_reference                shift and go to state 54
    table_primary                  shift and go to state 29
    joined_table                   shift and go to state 55
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 53

    (60) update -> UPDATE relations . SET update_set_list where_opt order_by_opt limit_opt
    (125) relations -> relations . COMMA table_reference

    SET             shift and go to state 108
    COMMA           shift and go to state 109


state 54

    (126) relations -> table_reference .
    (134) cross_join -> table_reference . CROSS JOIN table_primary
    (135) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (136) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (137) join_type -> . INNER
    (138) join_type -> . LEFT outer_opt
    (139) join_type -> . RIGHT outer_opt
    (140) join_type -> . FULL outer_opt
    (141) join_type -> . empty
    (271) empty -> .

    SET             reduce using rule 126 (relations -> table_reference .)
    COMMA           reduce using rule 126 (relations -> table_reference .)
    WHERE           reduce using rule 126 (relations -> table_reference .)
    ORDER           reduce using rule 126 (relations -> table_reference .)
    LIMIT           reduce using rule 126 (relations -> table_reference .)
    $end            reduce using rule 126 (relations -> table_reference .)
    GROUP           reduce using rule 126 (relations -> table_reference .)
    HAVING          reduce using rule 126 (relations -> table_reference .)
    FOR             reduce using rule 126 (relations -> table_reference .)
    INTERSECT       reduce using rule 126 (relations -> table_reference .)
    UNION           reduce using rule 126 (relations -> table_reference .)
    EXCEPT          reduce using rule 126 (relations -> table_reference .)
    RPAREN          reduce using rule 126 (relations -> table_reference .)
    CROSS           shift and go to state 60
    NATURAL         shift and go to state 62
    INNER           shift and go to state 63
    LEFT            shift and go to state 64
    RIGHT           shift and go to state 65
    FULL            shift and go to state 66
    JOIN            reduce using rule 271 (empty -> .)

    join_type                      shift and go to state 61
    empty                          shift and go to state 67

state 55

    (128) table_reference -> joined_table .

    CROSS           reduce using rule 128 (table_reference -> joined_table .)
    NATURAL         reduce using rule 128 (table_reference -> joined_table .)
    INNER           reduce using rule 128 (table_reference -> joined_table .)
    LEFT            reduce using rule 128 (table_reference -> joined_table .)
    RIGHT           reduce using rule 128 (table_reference -> joined_table .)
    FULL            reduce using rule 128 (table_reference -> joined_table .)
    JOIN            reduce using rule 128 (table_reference -> joined_table .)
    SET             reduce using rule 128 (table_reference -> joined_table .)
    COMMA           reduce using rule 128 (table_reference -> joined_table .)
    WHERE           reduce using rule 128 (table_reference -> joined_table .)
    ORDER           reduce using rule 128 (table_reference -> joined_table .)
    LIMIT           reduce using rule 128 (table_reference -> joined_table .)
    $end            reduce using rule 128 (table_reference -> joined_table .)
    GROUP           reduce using rule 128 (table_reference -> joined_table .)
    HAVING          reduce using rule 128 (table_reference -> joined_table .)
    FOR             reduce using rule 128 (table_reference -> joined_table .)
    INTERSECT       reduce using rule 128 (table_reference -> joined_table .)
    UNION           reduce using rule 128 (table_reference -> joined_table .)
    EXCEPT          reduce using rule 128 (table_reference -> joined_table .)
    RPAREN          reduce using rule 128 (table_reference -> joined_table .)
    VALUES          reduce using rule 128 (table_reference -> joined_table .)
    LPAREN          reduce using rule 128 (table_reference -> joined_table .)
    SELECT          reduce using rule 128 (table_reference -> joined_table .)
    ON              reduce using rule 128 (table_reference -> joined_table .)
    USING           reduce using rule 128 (table_reference -> joined_table .)


state 56

    (65) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (70) query_expression -> . query_expression_body
    (71) query_expression_body -> . nonjoin_query_expression
    (72) query_expression_body -> . joined_table
    (91) nonjoin_query_expression -> . nonjoin_query_term
    (92) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 9
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    query_expression               shift and go to state 48
    query_expression_body          shift and go to state 21
    nonjoin_query_expression       shift and go to state 22
    joined_table                   shift and go to state 23
    nonjoin_query_term             shift and go to state 24
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    nonjoin_query_primary          shift and go to state 28
    table_reference                shift and go to state 18
    table_primary                  shift and go to state 29
    simple_table                   shift and go to state 30
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 57

    (51) insert -> INSERT ignore . INTO table_reference VALUES LPAREN insert_value RPAREN
    (52) insert -> INSERT ignore . INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (53) insert -> INSERT ignore . INTO table_reference LPAREN index_column_list RPAREN query_spec
    (54) insert -> INSERT ignore . INTO table_reference query_spec

    INTO            shift and go to state 110


state 58

    (57) ignore -> IGNORE .

    INTO            reduce using rule 57 (ignore -> IGNORE .)


state 59

    (58) ignore -> empty .

    INTO            reduce using rule 58 (ignore -> empty .)


state 60

    (134) cross_join -> table_reference CROSS . JOIN table_primary

    JOIN            shift and go to state 111


state 61

    (135) qualified_join -> table_reference join_type . JOIN table_reference join_criteria

    JOIN            shift and go to state 112


state 62

    (136) natural_join -> table_reference NATURAL . join_type JOIN table_primary
    (137) join_type -> . INNER
    (138) join_type -> . LEFT outer_opt
    (139) join_type -> . RIGHT outer_opt
    (140) join_type -> . FULL outer_opt
    (141) join_type -> . empty
    (271) empty -> .

    INNER           shift and go to state 63
    LEFT            shift and go to state 64
    RIGHT           shift and go to state 65
    FULL            shift and go to state 66
    JOIN            reduce using rule 271 (empty -> .)

    join_type                      shift and go to state 113
    empty                          shift and go to state 67

state 63

    (137) join_type -> INNER .

    JOIN            reduce using rule 137 (join_type -> INNER .)


state 64

    (138) join_type -> LEFT . outer_opt
    (142) outer_opt -> . OUTER
    (143) outer_opt -> . empty
    (271) empty -> .

    OUTER           shift and go to state 115
    JOIN            reduce using rule 271 (empty -> .)

    outer_opt                      shift and go to state 114
    empty                          shift and go to state 116

state 65

    (139) join_type -> RIGHT . outer_opt
    (142) outer_opt -> . OUTER
    (143) outer_opt -> . empty
    (271) empty -> .

    OUTER           shift and go to state 115
    JOIN            reduce using rule 271 (empty -> .)

    outer_opt                      shift and go to state 117
    empty                          shift and go to state 116

state 66

    (140) join_type -> FULL . outer_opt
    (142) outer_opt -> . OUTER
    (143) outer_opt -> . empty
    (271) empty -> .

    OUTER           shift and go to state 115
    JOIN            reduce using rule 271 (empty -> .)

    outer_opt                      shift and go to state 118
    empty                          shift and go to state 116

state 67

    (141) join_type -> empty .

    JOIN            reduce using rule 141 (join_type -> empty .)


state 68

    (102) table_value_constructor -> VALUES values_list .
    (103) values_list -> values_list . COMMA expression

    INTERSECT       reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    UNION           reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    EXCEPT          reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    ORDER           reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    LIMIT           reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    FOR             reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    $end            reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    RPAREN          reduce using rule 102 (table_value_constructor -> VALUES values_list .)
    COMMA           shift and go to state 119


state 69

    (104) values_list -> expression .

    COMMA           reduce using rule 104 (values_list -> expression .)
    INTERSECT       reduce using rule 104 (values_list -> expression .)
    UNION           reduce using rule 104 (values_list -> expression .)
    EXCEPT          reduce using rule 104 (values_list -> expression .)
    ORDER           reduce using rule 104 (values_list -> expression .)
    LIMIT           reduce using rule 104 (values_list -> expression .)
    FOR             reduce using rule 104 (values_list -> expression .)
    $end            reduce using rule 104 (values_list -> expression .)
    RPAREN          reduce using rule 104 (values_list -> expression .)


state 70

    (154) expression -> search_condition .
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

    COMMA           reduce using rule 154 (expression -> search_condition .)
    INTERSECT       reduce using rule 154 (expression -> search_condition .)
    UNION           reduce using rule 154 (expression -> search_condition .)
    EXCEPT          reduce using rule 154 (expression -> search_condition .)
    ORDER           reduce using rule 154 (expression -> search_condition .)
    LIMIT           reduce using rule 154 (expression -> search_condition .)
    FOR             reduce using rule 154 (expression -> search_condition .)
    $end            reduce using rule 154 (expression -> search_condition .)
    RPAREN          reduce using rule 154 (expression -> search_condition .)
    OR              shift and go to state 120
    AND             shift and go to state 121


state 71

    (155) search_condition -> boolean_term .

    OR              reduce using rule 155 (search_condition -> boolean_term .)
    AND             reduce using rule 155 (search_condition -> boolean_term .)
    COMMA           reduce using rule 155 (search_condition -> boolean_term .)
    INTERSECT       reduce using rule 155 (search_condition -> boolean_term .)
    UNION           reduce using rule 155 (search_condition -> boolean_term .)
    EXCEPT          reduce using rule 155 (search_condition -> boolean_term .)
    ORDER           reduce using rule 155 (search_condition -> boolean_term .)
    LIMIT           reduce using rule 155 (search_condition -> boolean_term .)
    FOR             reduce using rule 155 (search_condition -> boolean_term .)
    $end            reduce using rule 155 (search_condition -> boolean_term .)
    RPAREN          reduce using rule 155 (search_condition -> boolean_term .)
    GROUP           reduce using rule 155 (search_condition -> boolean_term .)
    HAVING          reduce using rule 155 (search_condition -> boolean_term .)
    THEN            reduce using rule 155 (search_condition -> boolean_term .)
    CROSS           reduce using rule 155 (search_condition -> boolean_term .)
    NATURAL         reduce using rule 155 (search_condition -> boolean_term .)
    INNER           reduce using rule 155 (search_condition -> boolean_term .)
    LEFT            reduce using rule 155 (search_condition -> boolean_term .)
    RIGHT           reduce using rule 155 (search_condition -> boolean_term .)
    FULL            reduce using rule 155 (search_condition -> boolean_term .)
    JOIN            reduce using rule 155 (search_condition -> boolean_term .)
    SET             reduce using rule 155 (search_condition -> boolean_term .)
    WHERE           reduce using rule 155 (search_condition -> boolean_term .)
    VALUES          reduce using rule 155 (search_condition -> boolean_term .)
    LPAREN          reduce using rule 155 (search_condition -> boolean_term .)
    SELECT          reduce using rule 155 (search_condition -> boolean_term .)
    ON              reduce using rule 155 (search_condition -> boolean_term .)
    USING           reduce using rule 155 (search_condition -> boolean_term .)


state 72

    (156) search_condition -> LPAREN . search_condition RPAREN
    (160) boolean_term -> LPAREN . boolean_term RPAREN
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 122
    boolean_term                   shift and go to state 123
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 73

    (159) boolean_term -> boolean_factor .

    OR              reduce using rule 159 (boolean_term -> boolean_factor .)
    AND             reduce using rule 159 (boolean_term -> boolean_factor .)
    COMMA           reduce using rule 159 (boolean_term -> boolean_factor .)
    INTERSECT       reduce using rule 159 (boolean_term -> boolean_factor .)
    UNION           reduce using rule 159 (boolean_term -> boolean_factor .)
    EXCEPT          reduce using rule 159 (boolean_term -> boolean_factor .)
    ORDER           reduce using rule 159 (boolean_term -> boolean_factor .)
    LIMIT           reduce using rule 159 (boolean_term -> boolean_factor .)
    FOR             reduce using rule 159 (boolean_term -> boolean_factor .)
    $end            reduce using rule 159 (boolean_term -> boolean_factor .)
    RPAREN          reduce using rule 159 (boolean_term -> boolean_factor .)
    GROUP           reduce using rule 159 (boolean_term -> boolean_factor .)
    HAVING          reduce using rule 159 (boolean_term -> boolean_factor .)
    THEN            reduce using rule 159 (boolean_term -> boolean_factor .)
    CROSS           reduce using rule 159 (boolean_term -> boolean_factor .)
    NATURAL         reduce using rule 159 (boolean_term -> boolean_factor .)
    INNER           reduce using rule 159 (boolean_term -> boolean_factor .)
    LEFT            reduce using rule 159 (boolean_term -> boolean_factor .)
    RIGHT           reduce using rule 159 (boolean_term -> boolean_factor .)
    FULL            reduce using rule 159 (boolean_term -> boolean_factor .)
    JOIN            reduce using rule 159 (boolean_term -> boolean_factor .)
    SET             reduce using rule 159 (boolean_term -> boolean_factor .)
    WHERE           reduce using rule 159 (boolean_term -> boolean_factor .)
    VALUES          reduce using rule 159 (boolean_term -> boolean_factor .)
    LPAREN          reduce using rule 159 (boolean_term -> boolean_factor .)
    SELECT          reduce using rule 159 (boolean_term -> boolean_factor .)
    ON              reduce using rule 159 (boolean_term -> boolean_factor .)
    USING           reduce using rule 159 (boolean_term -> boolean_factor .)


state 74

    (161) boolean_factor -> not_opt . boolean_test
    (162) boolean_test -> . boolean_primary
    (163) boolean_primary -> . predicate
    (164) boolean_primary -> . value_expression
    (165) predicate -> . comparison_predicate
    (166) predicate -> . between_predicate
    (167) predicate -> . in_predicate
    (168) predicate -> . like_predicate
    (169) predicate -> . regexp_predicate
    (170) predicate -> . null_predicate
    (171) predicate -> . exists_predicate
    (183) value_expression -> . numeric_value_expression
    (172) comparison_predicate -> . value_expression comparison_operator value_expression
    (173) between_predicate -> . value_expression not_opt BETWEEN value_expression AND value_expression
    (174) in_predicate -> . value_expression not_opt IN in_value
    (179) like_predicate -> . value_expression not_opt LIKE value_expression
    (180) regexp_predicate -> . value_expression REGEXP value_expression
    (181) null_predicate -> . value_expression IS not_opt NULL
    (182) exists_predicate -> . EXISTS subquery
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    EXISTS          shift and go to state 135
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    boolean_test                   shift and go to state 124
    boolean_primary                shift and go to state 125
    predicate                      shift and go to state 126
    value_expression               shift and go to state 127
    comparison_predicate           shift and go to state 128
    between_predicate              shift and go to state 129
    in_predicate                   shift and go to state 130
    like_predicate                 shift and go to state 131
    regexp_predicate               shift and go to state 132
    null_predicate                 shift and go to state 133
    exists_predicate               shift and go to state 134
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 75

    (249) not_opt -> NOT .

    EXISTS          reduce using rule 249 (not_opt -> NOT .)
    PLUS            reduce using rule 249 (not_opt -> NOT .)
    MINUS           reduce using rule 249 (not_opt -> NOT .)
    LPAREN          reduce using rule 249 (not_opt -> NOT .)
    NULL            reduce using rule 249 (not_opt -> NOT .)
    SCONST          reduce using rule 249 (not_opt -> NOT .)
    QUOTED_IDENTIFIER reduce using rule 249 (not_opt -> NOT .)
    QM              reduce using rule 249 (not_opt -> NOT .)
    CURRENT_DATE    reduce using rule 249 (not_opt -> NOT .)
    CURRENT_TIME    reduce using rule 249 (not_opt -> NOT .)
    CURRENT_TIMESTAMP reduce using rule 249 (not_opt -> NOT .)
    LOCALTIME       reduce using rule 249 (not_opt -> NOT .)
    LOCALTIMESTAMP  reduce using rule 249 (not_opt -> NOT .)
    CAST            reduce using rule 249 (not_opt -> NOT .)
    DECIMAL         reduce using rule 249 (not_opt -> NOT .)
    INTEGER         reduce using rule 249 (not_opt -> NOT .)
    TRUE            reduce using rule 249 (not_opt -> NOT .)
    FALSE           reduce using rule 249 (not_opt -> NOT .)
    IDENTIFIER      reduce using rule 249 (not_opt -> NOT .)
    DIGIT_IDENTIFIER reduce using rule 249 (not_opt -> NOT .)
    ASTERISK        reduce using rule 249 (not_opt -> NOT .)
    CASE            reduce using rule 249 (not_opt -> NOT .)
    BACKQUOTED_IDENTIFIER reduce using rule 249 (not_opt -> NOT .)
    NON_RESERVED    reduce using rule 249 (not_opt -> NOT .)
    BETWEEN         reduce using rule 249 (not_opt -> NOT .)
    IN              reduce using rule 249 (not_opt -> NOT .)
    LIKE            reduce using rule 249 (not_opt -> NOT .)


state 76

    (250) not_opt -> empty .

    EXISTS          reduce using rule 250 (not_opt -> empty .)
    PLUS            reduce using rule 250 (not_opt -> empty .)
    MINUS           reduce using rule 250 (not_opt -> empty .)
    LPAREN          reduce using rule 250 (not_opt -> empty .)
    NULL            reduce using rule 250 (not_opt -> empty .)
    SCONST          reduce using rule 250 (not_opt -> empty .)
    QUOTED_IDENTIFIER reduce using rule 250 (not_opt -> empty .)
    QM              reduce using rule 250 (not_opt -> empty .)
    CURRENT_DATE    reduce using rule 250 (not_opt -> empty .)
    CURRENT_TIME    reduce using rule 250 (not_opt -> empty .)
    CURRENT_TIMESTAMP reduce using rule 250 (not_opt -> empty .)
    LOCALTIME       reduce using rule 250 (not_opt -> empty .)
    LOCALTIMESTAMP  reduce using rule 250 (not_opt -> empty .)
    CAST            reduce using rule 250 (not_opt -> empty .)
    DECIMAL         reduce using rule 250 (not_opt -> empty .)
    INTEGER         reduce using rule 250 (not_opt -> empty .)
    TRUE            reduce using rule 250 (not_opt -> empty .)
    FALSE           reduce using rule 250 (not_opt -> empty .)
    IDENTIFIER      reduce using rule 250 (not_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 250 (not_opt -> empty .)
    ASTERISK        reduce using rule 250 (not_opt -> empty .)
    CASE            reduce using rule 250 (not_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 250 (not_opt -> empty .)
    NON_RESERVED    reduce using rule 250 (not_opt -> empty .)
    BETWEEN         reduce using rule 250 (not_opt -> empty .)
    IN              reduce using rule 250 (not_opt -> empty .)
    LIKE            reduce using rule 250 (not_opt -> empty .)


state 77

    (92) nonjoin_query_expression -> nonjoin_query_expression UNION . set_quantifier_opt nonjoin_query_term
    (115) set_quantifier_opt -> . ALL
    (116) set_quantifier_opt -> . empty
    (271) empty -> .

    ALL             shift and go to state 137
    LPAREN          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    TABLE           reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)

    set_quantifier_opt             shift and go to state 136
    empty                          shift and go to state 138

state 78

    (93) nonjoin_query_expression -> nonjoin_query_expression EXCEPT . set_quantifier_opt nonjoin_query_term
    (115) set_quantifier_opt -> . ALL
    (116) set_quantifier_opt -> . empty
    (271) empty -> .

    ALL             shift and go to state 137
    LPAREN          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    TABLE           reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)

    set_quantifier_opt             shift and go to state 139
    empty                          shift and go to state 138

state 79

    (95) nonjoin_query_term -> nonjoin_query_term INTERSECT . set_quantifier_opt nonjoin_query_primary
    (115) set_quantifier_opt -> . ALL
    (116) set_quantifier_opt -> . empty
    (271) empty -> .

    ALL             shift and go to state 137
    LPAREN          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    TABLE           reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)

    set_quantifier_opt             shift and go to state 140
    empty                          shift and go to state 138

state 80

    (105) query_spec -> SELECT select_items . table_expression_opt
    (118) select_items -> select_items . COMMA select_item
    (123) table_expression_opt -> . FROM relations where_opt group_by_opt having_opt for_update_opt
    (124) table_expression_opt -> . empty
    (271) empty -> .

    COMMA           shift and go to state 142
    FROM            shift and go to state 143
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    table_expression_opt           shift and go to state 141
    empty                          shift and go to state 144

state 81

    (117) select_items -> select_item .

    COMMA           reduce using rule 117 (select_items -> select_item .)
    FROM            reduce using rule 117 (select_items -> select_item .)
    INTERSECT       reduce using rule 117 (select_items -> select_item .)
    UNION           reduce using rule 117 (select_items -> select_item .)
    EXCEPT          reduce using rule 117 (select_items -> select_item .)
    ORDER           reduce using rule 117 (select_items -> select_item .)
    LIMIT           reduce using rule 117 (select_items -> select_item .)
    FOR             reduce using rule 117 (select_items -> select_item .)
    $end            reduce using rule 117 (select_items -> select_item .)
    RPAREN          reduce using rule 117 (select_items -> select_item .)


state 82

    (119) select_item -> derived_column .

    COMMA           reduce using rule 119 (select_item -> derived_column .)
    FROM            reduce using rule 119 (select_item -> derived_column .)
    INTERSECT       reduce using rule 119 (select_item -> derived_column .)
    UNION           reduce using rule 119 (select_item -> derived_column .)
    EXCEPT          reduce using rule 119 (select_item -> derived_column .)
    ORDER           reduce using rule 119 (select_item -> derived_column .)
    LIMIT           reduce using rule 119 (select_item -> derived_column .)
    FOR             reduce using rule 119 (select_item -> derived_column .)
    $end            reduce using rule 119 (select_item -> derived_column .)
    RPAREN          reduce using rule 119 (select_item -> derived_column .)


state 83

    (120) select_item -> DISTINCT . LPAREN derived_column RPAREN
    (121) select_item -> DISTINCT . derived_column
    (122) derived_column -> . value_expression alias_opt
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 145
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    derived_column                 shift and go to state 146
    value_expression               shift and go to state 84
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 84

    (122) derived_column -> value_expression . alias_opt
    (151) alias_opt -> . alias
    (152) alias_opt -> . empty
    (153) alias -> . as_opt identifier
    (271) empty -> .
    (247) as_opt -> . AS
    (248) as_opt -> . empty

    COMMA           reduce using rule 271 (empty -> .)
    FROM            reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    AS              shift and go to state 98

    alias_opt                      shift and go to state 147
    alias                          shift and go to state 95
    empty                          shift and go to state 96
    as_opt                         shift and go to state 97

state 85

    (183) value_expression -> numeric_value_expression .
    (184) numeric_value_expression -> numeric_value_expression . PLUS term
    (185) numeric_value_expression -> numeric_value_expression . MINUS term

    AS              reduce using rule 183 (value_expression -> numeric_value_expression .)
    IDENTIFIER      reduce using rule 183 (value_expression -> numeric_value_expression .)
    DIGIT_IDENTIFIER reduce using rule 183 (value_expression -> numeric_value_expression .)
    ASTERISK        reduce using rule 183 (value_expression -> numeric_value_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 183 (value_expression -> numeric_value_expression .)
    NON_RESERVED    reduce using rule 183 (value_expression -> numeric_value_expression .)
    COMMA           reduce using rule 183 (value_expression -> numeric_value_expression .)
    FROM            reduce using rule 183 (value_expression -> numeric_value_expression .)
    INTERSECT       reduce using rule 183 (value_expression -> numeric_value_expression .)
    UNION           reduce using rule 183 (value_expression -> numeric_value_expression .)
    EXCEPT          reduce using rule 183 (value_expression -> numeric_value_expression .)
    ORDER           reduce using rule 183 (value_expression -> numeric_value_expression .)
    LIMIT           reduce using rule 183 (value_expression -> numeric_value_expression .)
    FOR             reduce using rule 183 (value_expression -> numeric_value_expression .)
    $end            reduce using rule 183 (value_expression -> numeric_value_expression .)
    RPAREN          reduce using rule 183 (value_expression -> numeric_value_expression .)
    REGEXP          reduce using rule 183 (value_expression -> numeric_value_expression .)
    IS              reduce using rule 183 (value_expression -> numeric_value_expression .)
    EQ              reduce using rule 183 (value_expression -> numeric_value_expression .)
    NE              reduce using rule 183 (value_expression -> numeric_value_expression .)
    LT              reduce using rule 183 (value_expression -> numeric_value_expression .)
    LE              reduce using rule 183 (value_expression -> numeric_value_expression .)
    GT              reduce using rule 183 (value_expression -> numeric_value_expression .)
    GE              reduce using rule 183 (value_expression -> numeric_value_expression .)
    NOT             reduce using rule 183 (value_expression -> numeric_value_expression .)
    BETWEEN         reduce using rule 183 (value_expression -> numeric_value_expression .)
    IN              reduce using rule 183 (value_expression -> numeric_value_expression .)
    LIKE            reduce using rule 183 (value_expression -> numeric_value_expression .)
    OR              reduce using rule 183 (value_expression -> numeric_value_expression .)
    AND             reduce using rule 183 (value_expression -> numeric_value_expression .)
    GROUP           reduce using rule 183 (value_expression -> numeric_value_expression .)
    HAVING          reduce using rule 183 (value_expression -> numeric_value_expression .)
    THEN            reduce using rule 183 (value_expression -> numeric_value_expression .)
    CROSS           reduce using rule 183 (value_expression -> numeric_value_expression .)
    NATURAL         reduce using rule 183 (value_expression -> numeric_value_expression .)
    INNER           reduce using rule 183 (value_expression -> numeric_value_expression .)
    LEFT            reduce using rule 183 (value_expression -> numeric_value_expression .)
    RIGHT           reduce using rule 183 (value_expression -> numeric_value_expression .)
    FULL            reduce using rule 183 (value_expression -> numeric_value_expression .)
    JOIN            reduce using rule 183 (value_expression -> numeric_value_expression .)
    SET             reduce using rule 183 (value_expression -> numeric_value_expression .)
    WHERE           reduce using rule 183 (value_expression -> numeric_value_expression .)
    VALUES          reduce using rule 183 (value_expression -> numeric_value_expression .)
    LPAREN          reduce using rule 183 (value_expression -> numeric_value_expression .)
    SELECT          reduce using rule 183 (value_expression -> numeric_value_expression .)
    ON              reduce using rule 183 (value_expression -> numeric_value_expression .)
    USING           reduce using rule 183 (value_expression -> numeric_value_expression .)
    ASC             reduce using rule 183 (value_expression -> numeric_value_expression .)
    DESC            reduce using rule 183 (value_expression -> numeric_value_expression .)
    NULLS           reduce using rule 183 (value_expression -> numeric_value_expression .)
    WHEN            reduce using rule 183 (value_expression -> numeric_value_expression .)
    END             reduce using rule 183 (value_expression -> numeric_value_expression .)
    ELSE            reduce using rule 183 (value_expression -> numeric_value_expression .)
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149


state 86

    (255) sign -> PLUS .

    LPAREN          reduce using rule 255 (sign -> PLUS .)
    NULL            reduce using rule 255 (sign -> PLUS .)
    SCONST          reduce using rule 255 (sign -> PLUS .)
    QUOTED_IDENTIFIER reduce using rule 255 (sign -> PLUS .)
    QM              reduce using rule 255 (sign -> PLUS .)
    CURRENT_DATE    reduce using rule 255 (sign -> PLUS .)
    CURRENT_TIME    reduce using rule 255 (sign -> PLUS .)
    CURRENT_TIMESTAMP reduce using rule 255 (sign -> PLUS .)
    LOCALTIME       reduce using rule 255 (sign -> PLUS .)
    LOCALTIMESTAMP  reduce using rule 255 (sign -> PLUS .)
    CAST            reduce using rule 255 (sign -> PLUS .)
    DECIMAL         reduce using rule 255 (sign -> PLUS .)
    INTEGER         reduce using rule 255 (sign -> PLUS .)
    TRUE            reduce using rule 255 (sign -> PLUS .)
    FALSE           reduce using rule 255 (sign -> PLUS .)
    IDENTIFIER      reduce using rule 255 (sign -> PLUS .)
    DIGIT_IDENTIFIER reduce using rule 255 (sign -> PLUS .)
    ASTERISK        reduce using rule 255 (sign -> PLUS .)
    CASE            reduce using rule 255 (sign -> PLUS .)
    BACKQUOTED_IDENTIFIER reduce using rule 255 (sign -> PLUS .)
    NON_RESERVED    reduce using rule 255 (sign -> PLUS .)


state 87

    (186) numeric_value_expression -> term .
    (187) term -> term . ASTERISK factor
    (188) term -> term . SLASH factor
    (189) term -> term . PERCENT factor
    (190) term -> term . CONCAT factor

  ! shift/reduce conflict for ASTERISK resolved as shift
    PLUS            reduce using rule 186 (numeric_value_expression -> term .)
    MINUS           reduce using rule 186 (numeric_value_expression -> term .)
    AS              reduce using rule 186 (numeric_value_expression -> term .)
    IDENTIFIER      reduce using rule 186 (numeric_value_expression -> term .)
    DIGIT_IDENTIFIER reduce using rule 186 (numeric_value_expression -> term .)
    BACKQUOTED_IDENTIFIER reduce using rule 186 (numeric_value_expression -> term .)
    NON_RESERVED    reduce using rule 186 (numeric_value_expression -> term .)
    COMMA           reduce using rule 186 (numeric_value_expression -> term .)
    FROM            reduce using rule 186 (numeric_value_expression -> term .)
    INTERSECT       reduce using rule 186 (numeric_value_expression -> term .)
    UNION           reduce using rule 186 (numeric_value_expression -> term .)
    EXCEPT          reduce using rule 186 (numeric_value_expression -> term .)
    ORDER           reduce using rule 186 (numeric_value_expression -> term .)
    LIMIT           reduce using rule 186 (numeric_value_expression -> term .)
    FOR             reduce using rule 186 (numeric_value_expression -> term .)
    $end            reduce using rule 186 (numeric_value_expression -> term .)
    RPAREN          reduce using rule 186 (numeric_value_expression -> term .)
    REGEXP          reduce using rule 186 (numeric_value_expression -> term .)
    IS              reduce using rule 186 (numeric_value_expression -> term .)
    EQ              reduce using rule 186 (numeric_value_expression -> term .)
    NE              reduce using rule 186 (numeric_value_expression -> term .)
    LT              reduce using rule 186 (numeric_value_expression -> term .)
    LE              reduce using rule 186 (numeric_value_expression -> term .)
    GT              reduce using rule 186 (numeric_value_expression -> term .)
    GE              reduce using rule 186 (numeric_value_expression -> term .)
    NOT             reduce using rule 186 (numeric_value_expression -> term .)
    BETWEEN         reduce using rule 186 (numeric_value_expression -> term .)
    IN              reduce using rule 186 (numeric_value_expression -> term .)
    LIKE            reduce using rule 186 (numeric_value_expression -> term .)
    OR              reduce using rule 186 (numeric_value_expression -> term .)
    AND             reduce using rule 186 (numeric_value_expression -> term .)
    GROUP           reduce using rule 186 (numeric_value_expression -> term .)
    HAVING          reduce using rule 186 (numeric_value_expression -> term .)
    THEN            reduce using rule 186 (numeric_value_expression -> term .)
    CROSS           reduce using rule 186 (numeric_value_expression -> term .)
    NATURAL         reduce using rule 186 (numeric_value_expression -> term .)
    INNER           reduce using rule 186 (numeric_value_expression -> term .)
    LEFT            reduce using rule 186 (numeric_value_expression -> term .)
    RIGHT           reduce using rule 186 (numeric_value_expression -> term .)
    FULL            reduce using rule 186 (numeric_value_expression -> term .)
    JOIN            reduce using rule 186 (numeric_value_expression -> term .)
    SET             reduce using rule 186 (numeric_value_expression -> term .)
    WHERE           reduce using rule 186 (numeric_value_expression -> term .)
    VALUES          reduce using rule 186 (numeric_value_expression -> term .)
    LPAREN          reduce using rule 186 (numeric_value_expression -> term .)
    SELECT          reduce using rule 186 (numeric_value_expression -> term .)
    ON              reduce using rule 186 (numeric_value_expression -> term .)
    USING           reduce using rule 186 (numeric_value_expression -> term .)
    ASC             reduce using rule 186 (numeric_value_expression -> term .)
    DESC            reduce using rule 186 (numeric_value_expression -> term .)
    NULLS           reduce using rule 186 (numeric_value_expression -> term .)
    WHEN            reduce using rule 186 (numeric_value_expression -> term .)
    END             reduce using rule 186 (numeric_value_expression -> term .)
    ELSE            reduce using rule 186 (numeric_value_expression -> term .)
    ASTERISK        shift and go to state 150
    SLASH           shift and go to state 151
    PERCENT         shift and go to state 152
    CONCAT          shift and go to state 153

  ! ASTERISK        [ reduce using rule 186 (numeric_value_expression -> term .) ]


state 88

    (256) sign -> MINUS .

    LPAREN          reduce using rule 256 (sign -> MINUS .)
    NULL            reduce using rule 256 (sign -> MINUS .)
    SCONST          reduce using rule 256 (sign -> MINUS .)
    QUOTED_IDENTIFIER reduce using rule 256 (sign -> MINUS .)
    QM              reduce using rule 256 (sign -> MINUS .)
    CURRENT_DATE    reduce using rule 256 (sign -> MINUS .)
    CURRENT_TIME    reduce using rule 256 (sign -> MINUS .)
    CURRENT_TIMESTAMP reduce using rule 256 (sign -> MINUS .)
    LOCALTIME       reduce using rule 256 (sign -> MINUS .)
    LOCALTIMESTAMP  reduce using rule 256 (sign -> MINUS .)
    CAST            reduce using rule 256 (sign -> MINUS .)
    DECIMAL         reduce using rule 256 (sign -> MINUS .)
    INTEGER         reduce using rule 256 (sign -> MINUS .)
    TRUE            reduce using rule 256 (sign -> MINUS .)
    FALSE           reduce using rule 256 (sign -> MINUS .)
    IDENTIFIER      reduce using rule 256 (sign -> MINUS .)
    DIGIT_IDENTIFIER reduce using rule 256 (sign -> MINUS .)
    ASTERISK        reduce using rule 256 (sign -> MINUS .)
    CASE            reduce using rule 256 (sign -> MINUS .)
    BACKQUOTED_IDENTIFIER reduce using rule 256 (sign -> MINUS .)
    NON_RESERVED    reduce using rule 256 (sign -> MINUS .)


state 89

    (191) term -> factor .

    ASTERISK        reduce using rule 191 (term -> factor .)
    SLASH           reduce using rule 191 (term -> factor .)
    PERCENT         reduce using rule 191 (term -> factor .)
    CONCAT          reduce using rule 191 (term -> factor .)
    PLUS            reduce using rule 191 (term -> factor .)
    MINUS           reduce using rule 191 (term -> factor .)
    AS              reduce using rule 191 (term -> factor .)
    IDENTIFIER      reduce using rule 191 (term -> factor .)
    DIGIT_IDENTIFIER reduce using rule 191 (term -> factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 191 (term -> factor .)
    NON_RESERVED    reduce using rule 191 (term -> factor .)
    COMMA           reduce using rule 191 (term -> factor .)
    FROM            reduce using rule 191 (term -> factor .)
    INTERSECT       reduce using rule 191 (term -> factor .)
    UNION           reduce using rule 191 (term -> factor .)
    EXCEPT          reduce using rule 191 (term -> factor .)
    ORDER           reduce using rule 191 (term -> factor .)
    LIMIT           reduce using rule 191 (term -> factor .)
    FOR             reduce using rule 191 (term -> factor .)
    $end            reduce using rule 191 (term -> factor .)
    RPAREN          reduce using rule 191 (term -> factor .)
    REGEXP          reduce using rule 191 (term -> factor .)
    IS              reduce using rule 191 (term -> factor .)
    EQ              reduce using rule 191 (term -> factor .)
    NE              reduce using rule 191 (term -> factor .)
    LT              reduce using rule 191 (term -> factor .)
    LE              reduce using rule 191 (term -> factor .)
    GT              reduce using rule 191 (term -> factor .)
    GE              reduce using rule 191 (term -> factor .)
    NOT             reduce using rule 191 (term -> factor .)
    BETWEEN         reduce using rule 191 (term -> factor .)
    IN              reduce using rule 191 (term -> factor .)
    LIKE            reduce using rule 191 (term -> factor .)
    OR              reduce using rule 191 (term -> factor .)
    AND             reduce using rule 191 (term -> factor .)
    GROUP           reduce using rule 191 (term -> factor .)
    HAVING          reduce using rule 191 (term -> factor .)
    THEN            reduce using rule 191 (term -> factor .)
    CROSS           reduce using rule 191 (term -> factor .)
    NATURAL         reduce using rule 191 (term -> factor .)
    INNER           reduce using rule 191 (term -> factor .)
    LEFT            reduce using rule 191 (term -> factor .)
    RIGHT           reduce using rule 191 (term -> factor .)
    FULL            reduce using rule 191 (term -> factor .)
    JOIN            reduce using rule 191 (term -> factor .)
    SET             reduce using rule 191 (term -> factor .)
    WHERE           reduce using rule 191 (term -> factor .)
    VALUES          reduce using rule 191 (term -> factor .)
    LPAREN          reduce using rule 191 (term -> factor .)
    SELECT          reduce using rule 191 (term -> factor .)
    ON              reduce using rule 191 (term -> factor .)
    USING           reduce using rule 191 (term -> factor .)
    ASC             reduce using rule 191 (term -> factor .)
    DESC            reduce using rule 191 (term -> factor .)
    NULLS           reduce using rule 191 (term -> factor .)
    WHEN            reduce using rule 191 (term -> factor .)
    END             reduce using rule 191 (term -> factor .)
    ELSE            reduce using rule 191 (term -> factor .)


state 90

    (192) factor -> sign_opt . primary_expression
    (193) primary_expression -> . parenthetic_primary_expression
    (194) primary_expression -> . base_primary_expression
    (195) parenthetic_primary_expression -> . LPAREN value_expression RPAREN
    (196) parenthetic_primary_expression -> . LPAREN parenthetic_primary_expression RPAREN
    (197) base_primary_expression -> . value
    (198) base_primary_expression -> . qualified_name
    (199) base_primary_expression -> . subquery
    (200) base_primary_expression -> . function_call
    (201) base_primary_expression -> . date_time
    (202) base_primary_expression -> . case_specification
    (203) base_primary_expression -> . cast_specification
    (204) value -> . NULL
    (205) value -> . SCONST
    (206) value -> . number
    (207) value -> . boolean_value
    (208) value -> . QUOTED_IDENTIFIER
    (209) value -> . QM
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (210) function_call -> . qualified_name LPAREN call_args RPAREN
    (211) function_call -> . qualified_name LPAREN DISTINCT call_args RPAREN
    (236) date_time -> . CURRENT_DATE
    (237) date_time -> . CURRENT_TIME integer_param_opt
    (238) date_time -> . CURRENT_TIMESTAMP integer_param_opt
    (239) date_time -> . LOCALTIME integer_param_opt
    (240) date_time -> . LOCALTIMESTAMP integer_param_opt
    (216) case_specification -> . simple_case
    (217) case_specification -> . searched_case
    (220) cast_specification -> . CAST LPAREN value_expression AS data_type RPAREN
    (269) number -> . DECIMAL
    (270) number -> . INTEGER
    (251) boolean_value -> . TRUE
    (252) boolean_value -> . FALSE
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (218) simple_case -> . CASE value_expression when_clauses else_opt END
    (219) searched_case -> . CASE when_clauses else_opt END
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 157
    NULL            shift and go to state 165
    SCONST          shift and go to state 166
    QUOTED_IDENTIFIER shift and go to state 169
    QM              shift and go to state 170
    CURRENT_DATE    shift and go to state 171
    CURRENT_TIME    shift and go to state 172
    CURRENT_TIMESTAMP shift and go to state 173
    LOCALTIME       shift and go to state 174
    LOCALTIMESTAMP  shift and go to state 175
    CAST            shift and go to state 178
    DECIMAL         shift and go to state 179
    INTEGER         shift and go to state 180
    TRUE            shift and go to state 181
    FALSE           shift and go to state 182
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    CASE            shift and go to state 183
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    primary_expression             shift and go to state 154
    parenthetic_primary_expression shift and go to state 155
    base_primary_expression        shift and go to state 156
    value                          shift and go to state 158
    qualified_name                 shift and go to state 159
    subquery                       shift and go to state 160
    function_call                  shift and go to state 161
    date_time                      shift and go to state 162
    case_specification             shift and go to state 163
    cast_specification             shift and go to state 164
    number                         shift and go to state 167
    boolean_value                  shift and go to state 168
    identifier                     shift and go to state 8
    simple_case                    shift and go to state 176
    searched_case                  shift and go to state 177
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 91

    (253) sign_opt -> sign .

    LPAREN          reduce using rule 253 (sign_opt -> sign .)
    NULL            reduce using rule 253 (sign_opt -> sign .)
    SCONST          reduce using rule 253 (sign_opt -> sign .)
    QUOTED_IDENTIFIER reduce using rule 253 (sign_opt -> sign .)
    QM              reduce using rule 253 (sign_opt -> sign .)
    CURRENT_DATE    reduce using rule 253 (sign_opt -> sign .)
    CURRENT_TIME    reduce using rule 253 (sign_opt -> sign .)
    CURRENT_TIMESTAMP reduce using rule 253 (sign_opt -> sign .)
    LOCALTIME       reduce using rule 253 (sign_opt -> sign .)
    LOCALTIMESTAMP  reduce using rule 253 (sign_opt -> sign .)
    CAST            reduce using rule 253 (sign_opt -> sign .)
    DECIMAL         reduce using rule 253 (sign_opt -> sign .)
    INTEGER         reduce using rule 253 (sign_opt -> sign .)
    TRUE            reduce using rule 253 (sign_opt -> sign .)
    FALSE           reduce using rule 253 (sign_opt -> sign .)
    IDENTIFIER      reduce using rule 253 (sign_opt -> sign .)
    DIGIT_IDENTIFIER reduce using rule 253 (sign_opt -> sign .)
    ASTERISK        reduce using rule 253 (sign_opt -> sign .)
    CASE            reduce using rule 253 (sign_opt -> sign .)
    BACKQUOTED_IDENTIFIER reduce using rule 253 (sign_opt -> sign .)
    NON_RESERVED    reduce using rule 253 (sign_opt -> sign .)


state 92

    (254) sign_opt -> empty .

    LPAREN          reduce using rule 254 (sign_opt -> empty .)
    NULL            reduce using rule 254 (sign_opt -> empty .)
    SCONST          reduce using rule 254 (sign_opt -> empty .)
    QUOTED_IDENTIFIER reduce using rule 254 (sign_opt -> empty .)
    QM              reduce using rule 254 (sign_opt -> empty .)
    CURRENT_DATE    reduce using rule 254 (sign_opt -> empty .)
    CURRENT_TIME    reduce using rule 254 (sign_opt -> empty .)
    CURRENT_TIMESTAMP reduce using rule 254 (sign_opt -> empty .)
    LOCALTIME       reduce using rule 254 (sign_opt -> empty .)
    LOCALTIMESTAMP  reduce using rule 254 (sign_opt -> empty .)
    CAST            reduce using rule 254 (sign_opt -> empty .)
    DECIMAL         reduce using rule 254 (sign_opt -> empty .)
    INTEGER         reduce using rule 254 (sign_opt -> empty .)
    TRUE            reduce using rule 254 (sign_opt -> empty .)
    FALSE           reduce using rule 254 (sign_opt -> empty .)
    IDENTIFIER      reduce using rule 254 (sign_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 254 (sign_opt -> empty .)
    ASTERISK        reduce using rule 254 (sign_opt -> empty .)
    CASE            reduce using rule 254 (sign_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 254 (sign_opt -> empty .)
    NON_RESERVED    reduce using rule 254 (sign_opt -> empty .)


state 93

    (149) aliased_relation -> qualified_name alias_opt .

    CROSS           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    NATURAL         reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    INNER           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    LEFT            reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    RIGHT           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    FULL            reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    JOIN            reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    SET             reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    COMMA           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    WHERE           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    ORDER           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    LIMIT           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    $end            reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    GROUP           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    HAVING          reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    FOR             reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    INTERSECT       reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    UNION           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    EXCEPT          reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    RPAREN          reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    VALUES          reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    LPAREN          reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    SELECT          reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    ON              reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)
    USING           reduce using rule 149 (aliased_relation -> qualified_name alias_opt .)


state 94

    (260) qualified_name -> qualified_name PERIOD . qualified_name
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    qualified_name                 shift and go to state 184
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 95

    (151) alias_opt -> alias .

    CROSS           reduce using rule 151 (alias_opt -> alias .)
    NATURAL         reduce using rule 151 (alias_opt -> alias .)
    INNER           reduce using rule 151 (alias_opt -> alias .)
    LEFT            reduce using rule 151 (alias_opt -> alias .)
    RIGHT           reduce using rule 151 (alias_opt -> alias .)
    FULL            reduce using rule 151 (alias_opt -> alias .)
    JOIN            reduce using rule 151 (alias_opt -> alias .)
    SET             reduce using rule 151 (alias_opt -> alias .)
    COMMA           reduce using rule 151 (alias_opt -> alias .)
    WHERE           reduce using rule 151 (alias_opt -> alias .)
    ORDER           reduce using rule 151 (alias_opt -> alias .)
    LIMIT           reduce using rule 151 (alias_opt -> alias .)
    $end            reduce using rule 151 (alias_opt -> alias .)
    GROUP           reduce using rule 151 (alias_opt -> alias .)
    HAVING          reduce using rule 151 (alias_opt -> alias .)
    FOR             reduce using rule 151 (alias_opt -> alias .)
    INTERSECT       reduce using rule 151 (alias_opt -> alias .)
    UNION           reduce using rule 151 (alias_opt -> alias .)
    EXCEPT          reduce using rule 151 (alias_opt -> alias .)
    RPAREN          reduce using rule 151 (alias_opt -> alias .)
    VALUES          reduce using rule 151 (alias_opt -> alias .)
    LPAREN          reduce using rule 151 (alias_opt -> alias .)
    SELECT          reduce using rule 151 (alias_opt -> alias .)
    ON              reduce using rule 151 (alias_opt -> alias .)
    USING           reduce using rule 151 (alias_opt -> alias .)
    FROM            reduce using rule 151 (alias_opt -> alias .)


state 96

    (152) alias_opt -> empty .
    (248) as_opt -> empty .

    CROSS           reduce using rule 152 (alias_opt -> empty .)
    NATURAL         reduce using rule 152 (alias_opt -> empty .)
    INNER           reduce using rule 152 (alias_opt -> empty .)
    LEFT            reduce using rule 152 (alias_opt -> empty .)
    RIGHT           reduce using rule 152 (alias_opt -> empty .)
    FULL            reduce using rule 152 (alias_opt -> empty .)
    JOIN            reduce using rule 152 (alias_opt -> empty .)
    SET             reduce using rule 152 (alias_opt -> empty .)
    COMMA           reduce using rule 152 (alias_opt -> empty .)
    WHERE           reduce using rule 152 (alias_opt -> empty .)
    ORDER           reduce using rule 152 (alias_opt -> empty .)
    LIMIT           reduce using rule 152 (alias_opt -> empty .)
    $end            reduce using rule 152 (alias_opt -> empty .)
    GROUP           reduce using rule 152 (alias_opt -> empty .)
    HAVING          reduce using rule 152 (alias_opt -> empty .)
    FOR             reduce using rule 152 (alias_opt -> empty .)
    INTERSECT       reduce using rule 152 (alias_opt -> empty .)
    UNION           reduce using rule 152 (alias_opt -> empty .)
    EXCEPT          reduce using rule 152 (alias_opt -> empty .)
    RPAREN          reduce using rule 152 (alias_opt -> empty .)
    VALUES          reduce using rule 152 (alias_opt -> empty .)
    LPAREN          reduce using rule 152 (alias_opt -> empty .)
    SELECT          reduce using rule 152 (alias_opt -> empty .)
    ON              reduce using rule 152 (alias_opt -> empty .)
    USING           reduce using rule 152 (alias_opt -> empty .)
    FROM            reduce using rule 152 (alias_opt -> empty .)
    IDENTIFIER      reduce using rule 248 (as_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 248 (as_opt -> empty .)
    ASTERISK        reduce using rule 248 (as_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 248 (as_opt -> empty .)
    NON_RESERVED    reduce using rule 248 (as_opt -> empty .)


state 97

    (153) alias -> as_opt . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 185
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 98

    (247) as_opt -> AS .

    IDENTIFIER      reduce using rule 247 (as_opt -> AS .)
    DIGIT_IDENTIFIER reduce using rule 247 (as_opt -> AS .)
    ASTERISK        reduce using rule 247 (as_opt -> AS .)
    BACKQUOTED_IDENTIFIER reduce using rule 247 (as_opt -> AS .)
    NON_RESERVED    reduce using rule 247 (as_opt -> AS .)


state 99

    (150) derived_table -> subquery alias_opt .

    CROSS           reduce using rule 150 (derived_table -> subquery alias_opt .)
    NATURAL         reduce using rule 150 (derived_table -> subquery alias_opt .)
    INNER           reduce using rule 150 (derived_table -> subquery alias_opt .)
    LEFT            reduce using rule 150 (derived_table -> subquery alias_opt .)
    RIGHT           reduce using rule 150 (derived_table -> subquery alias_opt .)
    FULL            reduce using rule 150 (derived_table -> subquery alias_opt .)
    JOIN            reduce using rule 150 (derived_table -> subquery alias_opt .)
    SET             reduce using rule 150 (derived_table -> subquery alias_opt .)
    COMMA           reduce using rule 150 (derived_table -> subquery alias_opt .)
    WHERE           reduce using rule 150 (derived_table -> subquery alias_opt .)
    ORDER           reduce using rule 150 (derived_table -> subquery alias_opt .)
    LIMIT           reduce using rule 150 (derived_table -> subquery alias_opt .)
    $end            reduce using rule 150 (derived_table -> subquery alias_opt .)
    GROUP           reduce using rule 150 (derived_table -> subquery alias_opt .)
    HAVING          reduce using rule 150 (derived_table -> subquery alias_opt .)
    FOR             reduce using rule 150 (derived_table -> subquery alias_opt .)
    INTERSECT       reduce using rule 150 (derived_table -> subquery alias_opt .)
    UNION           reduce using rule 150 (derived_table -> subquery alias_opt .)
    EXCEPT          reduce using rule 150 (derived_table -> subquery alias_opt .)
    RPAREN          reduce using rule 150 (derived_table -> subquery alias_opt .)
    VALUES          reduce using rule 150 (derived_table -> subquery alias_opt .)
    LPAREN          reduce using rule 150 (derived_table -> subquery alias_opt .)
    SELECT          reduce using rule 150 (derived_table -> subquery alias_opt .)
    ON              reduce using rule 150 (derived_table -> subquery alias_opt .)
    USING           reduce using rule 150 (derived_table -> subquery alias_opt .)


state 100

    (5) create_table -> CREATE TABLE identifier . LPAREN column_list RPAREN create_table_end
    (6) create_table -> CREATE TABLE identifier . LPAREN column_list COMMA primary_clause RPAREN create_table_end

    LPAREN          shift and go to state 186


state 101

    (97) nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .

    INTERSECT       reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    UNION           reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    EXCEPT          reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    ORDER           reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    LIMIT           reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    FOR             reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    $end            reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    RPAREN          reduce using rule 97 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)


state 102

    (65) subquery -> LPAREN query_expression order_by_opt . limit_opt RPAREN
    (84) limit_opt -> . LIMIT INTEGER
    (85) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (86) limit_opt -> . LIMIT QM
    (87) limit_opt -> . LIMIT QM COMMA QM
    (88) limit_opt -> . LIMIT ALL
    (89) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (90) limit_opt -> . empty
    (271) empty -> .

    LIMIT           shift and go to state 104
    RPAREN          reduce using rule 271 (empty -> .)

    limit_opt                      shift and go to state 187
    empty                          shift and go to state 105

state 103

    (64) cursor_specification -> query_expression order_by_opt limit_opt . for_update_opt
    (66) for_update_opt -> . FOR UPDATE
    (67) for_update_opt -> . FOR UPDATE NOWAIT
    (68) for_update_opt -> . FOR UPDATE WAIT INTEGER
    (69) for_update_opt -> . empty
    (271) empty -> .

    FOR             shift and go to state 189
    $end            reduce using rule 271 (empty -> .)

    for_update_opt                 shift and go to state 188
    empty                          shift and go to state 190

state 104

    (84) limit_opt -> LIMIT . INTEGER
    (85) limit_opt -> LIMIT . INTEGER COMMA INTEGER
    (86) limit_opt -> LIMIT . QM
    (87) limit_opt -> LIMIT . QM COMMA QM
    (88) limit_opt -> LIMIT . ALL
    (89) limit_opt -> LIMIT . INTEGER OFFSET INTEGER

    INTEGER         shift and go to state 191
    QM              shift and go to state 192
    ALL             shift and go to state 193


state 105

    (90) limit_opt -> empty .

    FOR             reduce using rule 90 (limit_opt -> empty .)
    $end            reduce using rule 90 (limit_opt -> empty .)
    RPAREN          reduce using rule 90 (limit_opt -> empty .)


state 106

    (73) order_by_opt -> ORDER BY . sort_items
    (75) sort_items -> . sort_item
    (76) sort_items -> . sort_items COMMA sort_item
    (77) sort_item -> . value_expression order_opt null_ordering_opt
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    sort_items                     shift and go to state 194
    sort_item                      shift and go to state 195
    value_expression               shift and go to state 196
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 107

    (59) delete -> DELETE FROM relations . where_opt order_by_opt limit_opt
    (125) relations -> relations . COMMA table_reference
    (106) where_opt -> . WHERE search_condition
    (107) where_opt -> . WHERE LPAREN search_condition RPAREN
    (108) where_opt -> . empty
    (271) empty -> .

    COMMA           shift and go to state 109
    WHERE           shift and go to state 198
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)

    where_opt                      shift and go to state 197
    empty                          shift and go to state 199

state 108

    (60) update -> UPDATE relations SET . update_set_list where_opt order_by_opt limit_opt
    (61) update_set_list -> . update_set
    (62) update_set_list -> . update_set_list COMMA update_set
    (63) update_set -> . comparison_predicate
    (172) comparison_predicate -> . value_expression comparison_operator value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    update_set_list                shift and go to state 200
    update_set                     shift and go to state 201
    comparison_predicate           shift and go to state 202
    value_expression               shift and go to state 203
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 109

    (125) relations -> relations COMMA . table_reference
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    table_reference                shift and go to state 204
    table_primary                  shift and go to state 29
    joined_table                   shift and go to state 55
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 110

    (51) insert -> INSERT ignore INTO . table_reference VALUES LPAREN insert_value RPAREN
    (52) insert -> INSERT ignore INTO . table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (53) insert -> INSERT ignore INTO . table_reference LPAREN index_column_list RPAREN query_spec
    (54) insert -> INSERT ignore INTO . table_reference query_spec
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    table_reference                shift and go to state 205
    table_primary                  shift and go to state 29
    joined_table                   shift and go to state 55
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 111

    (134) cross_join -> table_reference CROSS JOIN . table_primary
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    table_primary                  shift and go to state 206
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 112

    (135) qualified_join -> table_reference join_type JOIN . table_reference join_criteria
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    table_reference                shift and go to state 207
    table_primary                  shift and go to state 29
    joined_table                   shift and go to state 55
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 113

    (136) natural_join -> table_reference NATURAL join_type . JOIN table_primary

    JOIN            shift and go to state 208


state 114

    (138) join_type -> LEFT outer_opt .

    JOIN            reduce using rule 138 (join_type -> LEFT outer_opt .)


state 115

    (142) outer_opt -> OUTER .

    JOIN            reduce using rule 142 (outer_opt -> OUTER .)


state 116

    (143) outer_opt -> empty .

    JOIN            reduce using rule 143 (outer_opt -> empty .)


state 117

    (139) join_type -> RIGHT outer_opt .

    JOIN            reduce using rule 139 (join_type -> RIGHT outer_opt .)


state 118

    (140) join_type -> FULL outer_opt .

    JOIN            reduce using rule 140 (join_type -> FULL outer_opt .)


state 119

    (103) values_list -> values_list COMMA . expression
    (154) expression -> . search_condition
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    expression                     shift and go to state 209
    search_condition               shift and go to state 70
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 120

    (157) search_condition -> search_condition OR . search_condition
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 210
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 121

    (158) search_condition -> search_condition AND . search_condition
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 211
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 122

    (156) search_condition -> LPAREN search_condition . RPAREN
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

    RPAREN          shift and go to state 212
    OR              shift and go to state 120
    AND             shift and go to state 121


state 123

    (160) boolean_term -> LPAREN boolean_term . RPAREN
    (155) search_condition -> boolean_term .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 213
    OR              reduce using rule 155 (search_condition -> boolean_term .)
    AND             reduce using rule 155 (search_condition -> boolean_term .)

  ! RPAREN          [ reduce using rule 155 (search_condition -> boolean_term .) ]


state 124

    (161) boolean_factor -> not_opt boolean_test .

    OR              reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    AND             reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    COMMA           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    INTERSECT       reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    UNION           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    EXCEPT          reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    ORDER           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    LIMIT           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    FOR             reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    $end            reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    RPAREN          reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    GROUP           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    HAVING          reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    THEN            reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    CROSS           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    NATURAL         reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    INNER           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    LEFT            reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    RIGHT           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    FULL            reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    JOIN            reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    SET             reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    WHERE           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    VALUES          reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    LPAREN          reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    SELECT          reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    ON              reduce using rule 161 (boolean_factor -> not_opt boolean_test .)
    USING           reduce using rule 161 (boolean_factor -> not_opt boolean_test .)


state 125

    (162) boolean_test -> boolean_primary .

    OR              reduce using rule 162 (boolean_test -> boolean_primary .)
    AND             reduce using rule 162 (boolean_test -> boolean_primary .)
    COMMA           reduce using rule 162 (boolean_test -> boolean_primary .)
    INTERSECT       reduce using rule 162 (boolean_test -> boolean_primary .)
    UNION           reduce using rule 162 (boolean_test -> boolean_primary .)
    EXCEPT          reduce using rule 162 (boolean_test -> boolean_primary .)
    ORDER           reduce using rule 162 (boolean_test -> boolean_primary .)
    LIMIT           reduce using rule 162 (boolean_test -> boolean_primary .)
    FOR             reduce using rule 162 (boolean_test -> boolean_primary .)
    $end            reduce using rule 162 (boolean_test -> boolean_primary .)
    RPAREN          reduce using rule 162 (boolean_test -> boolean_primary .)
    GROUP           reduce using rule 162 (boolean_test -> boolean_primary .)
    HAVING          reduce using rule 162 (boolean_test -> boolean_primary .)
    THEN            reduce using rule 162 (boolean_test -> boolean_primary .)
    CROSS           reduce using rule 162 (boolean_test -> boolean_primary .)
    NATURAL         reduce using rule 162 (boolean_test -> boolean_primary .)
    INNER           reduce using rule 162 (boolean_test -> boolean_primary .)
    LEFT            reduce using rule 162 (boolean_test -> boolean_primary .)
    RIGHT           reduce using rule 162 (boolean_test -> boolean_primary .)
    FULL            reduce using rule 162 (boolean_test -> boolean_primary .)
    JOIN            reduce using rule 162 (boolean_test -> boolean_primary .)
    SET             reduce using rule 162 (boolean_test -> boolean_primary .)
    WHERE           reduce using rule 162 (boolean_test -> boolean_primary .)
    VALUES          reduce using rule 162 (boolean_test -> boolean_primary .)
    LPAREN          reduce using rule 162 (boolean_test -> boolean_primary .)
    SELECT          reduce using rule 162 (boolean_test -> boolean_primary .)
    ON              reduce using rule 162 (boolean_test -> boolean_primary .)
    USING           reduce using rule 162 (boolean_test -> boolean_primary .)


state 126

    (163) boolean_primary -> predicate .

    OR              reduce using rule 163 (boolean_primary -> predicate .)
    AND             reduce using rule 163 (boolean_primary -> predicate .)
    COMMA           reduce using rule 163 (boolean_primary -> predicate .)
    INTERSECT       reduce using rule 163 (boolean_primary -> predicate .)
    UNION           reduce using rule 163 (boolean_primary -> predicate .)
    EXCEPT          reduce using rule 163 (boolean_primary -> predicate .)
    ORDER           reduce using rule 163 (boolean_primary -> predicate .)
    LIMIT           reduce using rule 163 (boolean_primary -> predicate .)
    FOR             reduce using rule 163 (boolean_primary -> predicate .)
    $end            reduce using rule 163 (boolean_primary -> predicate .)
    RPAREN          reduce using rule 163 (boolean_primary -> predicate .)
    GROUP           reduce using rule 163 (boolean_primary -> predicate .)
    HAVING          reduce using rule 163 (boolean_primary -> predicate .)
    THEN            reduce using rule 163 (boolean_primary -> predicate .)
    CROSS           reduce using rule 163 (boolean_primary -> predicate .)
    NATURAL         reduce using rule 163 (boolean_primary -> predicate .)
    INNER           reduce using rule 163 (boolean_primary -> predicate .)
    LEFT            reduce using rule 163 (boolean_primary -> predicate .)
    RIGHT           reduce using rule 163 (boolean_primary -> predicate .)
    FULL            reduce using rule 163 (boolean_primary -> predicate .)
    JOIN            reduce using rule 163 (boolean_primary -> predicate .)
    SET             reduce using rule 163 (boolean_primary -> predicate .)
    WHERE           reduce using rule 163 (boolean_primary -> predicate .)
    VALUES          reduce using rule 163 (boolean_primary -> predicate .)
    LPAREN          reduce using rule 163 (boolean_primary -> predicate .)
    SELECT          reduce using rule 163 (boolean_primary -> predicate .)
    ON              reduce using rule 163 (boolean_primary -> predicate .)
    USING           reduce using rule 163 (boolean_primary -> predicate .)


state 127

    (164) boolean_primary -> value_expression .
    (172) comparison_predicate -> value_expression . comparison_operator value_expression
    (173) between_predicate -> value_expression . not_opt BETWEEN value_expression AND value_expression
    (174) in_predicate -> value_expression . not_opt IN in_value
    (179) like_predicate -> value_expression . not_opt LIKE value_expression
    (180) regexp_predicate -> value_expression . REGEXP value_expression
    (181) null_predicate -> value_expression . IS not_opt NULL
    (241) comparison_operator -> . EQ
    (242) comparison_operator -> . NE
    (243) comparison_operator -> . LT
    (244) comparison_operator -> . LE
    (245) comparison_operator -> . GT
    (246) comparison_operator -> . GE
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

    OR              reduce using rule 164 (boolean_primary -> value_expression .)
    AND             reduce using rule 164 (boolean_primary -> value_expression .)
    COMMA           reduce using rule 164 (boolean_primary -> value_expression .)
    INTERSECT       reduce using rule 164 (boolean_primary -> value_expression .)
    UNION           reduce using rule 164 (boolean_primary -> value_expression .)
    EXCEPT          reduce using rule 164 (boolean_primary -> value_expression .)
    ORDER           reduce using rule 164 (boolean_primary -> value_expression .)
    LIMIT           reduce using rule 164 (boolean_primary -> value_expression .)
    FOR             reduce using rule 164 (boolean_primary -> value_expression .)
    $end            reduce using rule 164 (boolean_primary -> value_expression .)
    RPAREN          reduce using rule 164 (boolean_primary -> value_expression .)
    GROUP           reduce using rule 164 (boolean_primary -> value_expression .)
    HAVING          reduce using rule 164 (boolean_primary -> value_expression .)
    THEN            reduce using rule 164 (boolean_primary -> value_expression .)
    CROSS           reduce using rule 164 (boolean_primary -> value_expression .)
    NATURAL         reduce using rule 164 (boolean_primary -> value_expression .)
    INNER           reduce using rule 164 (boolean_primary -> value_expression .)
    LEFT            reduce using rule 164 (boolean_primary -> value_expression .)
    RIGHT           reduce using rule 164 (boolean_primary -> value_expression .)
    FULL            reduce using rule 164 (boolean_primary -> value_expression .)
    JOIN            reduce using rule 164 (boolean_primary -> value_expression .)
    SET             reduce using rule 164 (boolean_primary -> value_expression .)
    WHERE           reduce using rule 164 (boolean_primary -> value_expression .)
    VALUES          reduce using rule 164 (boolean_primary -> value_expression .)
    LPAREN          reduce using rule 164 (boolean_primary -> value_expression .)
    SELECT          reduce using rule 164 (boolean_primary -> value_expression .)
    ON              reduce using rule 164 (boolean_primary -> value_expression .)
    USING           reduce using rule 164 (boolean_primary -> value_expression .)
    REGEXP          shift and go to state 216
    IS              shift and go to state 217
    EQ              shift and go to state 218
    NE              shift and go to state 219
    LT              shift and go to state 220
    LE              shift and go to state 221
    GT              shift and go to state 222
    GE              shift and go to state 223
    NOT             shift and go to state 75
    BETWEEN         reduce using rule 271 (empty -> .)
    IN              reduce using rule 271 (empty -> .)
    LIKE            reduce using rule 271 (empty -> .)

    comparison_operator            shift and go to state 214
    not_opt                        shift and go to state 215
    empty                          shift and go to state 76

state 128

    (165) predicate -> comparison_predicate .

    OR              reduce using rule 165 (predicate -> comparison_predicate .)
    AND             reduce using rule 165 (predicate -> comparison_predicate .)
    COMMA           reduce using rule 165 (predicate -> comparison_predicate .)
    INTERSECT       reduce using rule 165 (predicate -> comparison_predicate .)
    UNION           reduce using rule 165 (predicate -> comparison_predicate .)
    EXCEPT          reduce using rule 165 (predicate -> comparison_predicate .)
    ORDER           reduce using rule 165 (predicate -> comparison_predicate .)
    LIMIT           reduce using rule 165 (predicate -> comparison_predicate .)
    FOR             reduce using rule 165 (predicate -> comparison_predicate .)
    $end            reduce using rule 165 (predicate -> comparison_predicate .)
    RPAREN          reduce using rule 165 (predicate -> comparison_predicate .)
    GROUP           reduce using rule 165 (predicate -> comparison_predicate .)
    HAVING          reduce using rule 165 (predicate -> comparison_predicate .)
    THEN            reduce using rule 165 (predicate -> comparison_predicate .)
    CROSS           reduce using rule 165 (predicate -> comparison_predicate .)
    NATURAL         reduce using rule 165 (predicate -> comparison_predicate .)
    INNER           reduce using rule 165 (predicate -> comparison_predicate .)
    LEFT            reduce using rule 165 (predicate -> comparison_predicate .)
    RIGHT           reduce using rule 165 (predicate -> comparison_predicate .)
    FULL            reduce using rule 165 (predicate -> comparison_predicate .)
    JOIN            reduce using rule 165 (predicate -> comparison_predicate .)
    SET             reduce using rule 165 (predicate -> comparison_predicate .)
    WHERE           reduce using rule 165 (predicate -> comparison_predicate .)
    VALUES          reduce using rule 165 (predicate -> comparison_predicate .)
    LPAREN          reduce using rule 165 (predicate -> comparison_predicate .)
    SELECT          reduce using rule 165 (predicate -> comparison_predicate .)
    ON              reduce using rule 165 (predicate -> comparison_predicate .)
    USING           reduce using rule 165 (predicate -> comparison_predicate .)


state 129

    (166) predicate -> between_predicate .

    OR              reduce using rule 166 (predicate -> between_predicate .)
    AND             reduce using rule 166 (predicate -> between_predicate .)
    COMMA           reduce using rule 166 (predicate -> between_predicate .)
    INTERSECT       reduce using rule 166 (predicate -> between_predicate .)
    UNION           reduce using rule 166 (predicate -> between_predicate .)
    EXCEPT          reduce using rule 166 (predicate -> between_predicate .)
    ORDER           reduce using rule 166 (predicate -> between_predicate .)
    LIMIT           reduce using rule 166 (predicate -> between_predicate .)
    FOR             reduce using rule 166 (predicate -> between_predicate .)
    $end            reduce using rule 166 (predicate -> between_predicate .)
    RPAREN          reduce using rule 166 (predicate -> between_predicate .)
    GROUP           reduce using rule 166 (predicate -> between_predicate .)
    HAVING          reduce using rule 166 (predicate -> between_predicate .)
    THEN            reduce using rule 166 (predicate -> between_predicate .)
    CROSS           reduce using rule 166 (predicate -> between_predicate .)
    NATURAL         reduce using rule 166 (predicate -> between_predicate .)
    INNER           reduce using rule 166 (predicate -> between_predicate .)
    LEFT            reduce using rule 166 (predicate -> between_predicate .)
    RIGHT           reduce using rule 166 (predicate -> between_predicate .)
    FULL            reduce using rule 166 (predicate -> between_predicate .)
    JOIN            reduce using rule 166 (predicate -> between_predicate .)
    SET             reduce using rule 166 (predicate -> between_predicate .)
    WHERE           reduce using rule 166 (predicate -> between_predicate .)
    VALUES          reduce using rule 166 (predicate -> between_predicate .)
    LPAREN          reduce using rule 166 (predicate -> between_predicate .)
    SELECT          reduce using rule 166 (predicate -> between_predicate .)
    ON              reduce using rule 166 (predicate -> between_predicate .)
    USING           reduce using rule 166 (predicate -> between_predicate .)


state 130

    (167) predicate -> in_predicate .

    OR              reduce using rule 167 (predicate -> in_predicate .)
    AND             reduce using rule 167 (predicate -> in_predicate .)
    COMMA           reduce using rule 167 (predicate -> in_predicate .)
    INTERSECT       reduce using rule 167 (predicate -> in_predicate .)
    UNION           reduce using rule 167 (predicate -> in_predicate .)
    EXCEPT          reduce using rule 167 (predicate -> in_predicate .)
    ORDER           reduce using rule 167 (predicate -> in_predicate .)
    LIMIT           reduce using rule 167 (predicate -> in_predicate .)
    FOR             reduce using rule 167 (predicate -> in_predicate .)
    $end            reduce using rule 167 (predicate -> in_predicate .)
    RPAREN          reduce using rule 167 (predicate -> in_predicate .)
    GROUP           reduce using rule 167 (predicate -> in_predicate .)
    HAVING          reduce using rule 167 (predicate -> in_predicate .)
    THEN            reduce using rule 167 (predicate -> in_predicate .)
    CROSS           reduce using rule 167 (predicate -> in_predicate .)
    NATURAL         reduce using rule 167 (predicate -> in_predicate .)
    INNER           reduce using rule 167 (predicate -> in_predicate .)
    LEFT            reduce using rule 167 (predicate -> in_predicate .)
    RIGHT           reduce using rule 167 (predicate -> in_predicate .)
    FULL            reduce using rule 167 (predicate -> in_predicate .)
    JOIN            reduce using rule 167 (predicate -> in_predicate .)
    SET             reduce using rule 167 (predicate -> in_predicate .)
    WHERE           reduce using rule 167 (predicate -> in_predicate .)
    VALUES          reduce using rule 167 (predicate -> in_predicate .)
    LPAREN          reduce using rule 167 (predicate -> in_predicate .)
    SELECT          reduce using rule 167 (predicate -> in_predicate .)
    ON              reduce using rule 167 (predicate -> in_predicate .)
    USING           reduce using rule 167 (predicate -> in_predicate .)


state 131

    (168) predicate -> like_predicate .

    OR              reduce using rule 168 (predicate -> like_predicate .)
    AND             reduce using rule 168 (predicate -> like_predicate .)
    COMMA           reduce using rule 168 (predicate -> like_predicate .)
    INTERSECT       reduce using rule 168 (predicate -> like_predicate .)
    UNION           reduce using rule 168 (predicate -> like_predicate .)
    EXCEPT          reduce using rule 168 (predicate -> like_predicate .)
    ORDER           reduce using rule 168 (predicate -> like_predicate .)
    LIMIT           reduce using rule 168 (predicate -> like_predicate .)
    FOR             reduce using rule 168 (predicate -> like_predicate .)
    $end            reduce using rule 168 (predicate -> like_predicate .)
    RPAREN          reduce using rule 168 (predicate -> like_predicate .)
    GROUP           reduce using rule 168 (predicate -> like_predicate .)
    HAVING          reduce using rule 168 (predicate -> like_predicate .)
    THEN            reduce using rule 168 (predicate -> like_predicate .)
    CROSS           reduce using rule 168 (predicate -> like_predicate .)
    NATURAL         reduce using rule 168 (predicate -> like_predicate .)
    INNER           reduce using rule 168 (predicate -> like_predicate .)
    LEFT            reduce using rule 168 (predicate -> like_predicate .)
    RIGHT           reduce using rule 168 (predicate -> like_predicate .)
    FULL            reduce using rule 168 (predicate -> like_predicate .)
    JOIN            reduce using rule 168 (predicate -> like_predicate .)
    SET             reduce using rule 168 (predicate -> like_predicate .)
    WHERE           reduce using rule 168 (predicate -> like_predicate .)
    VALUES          reduce using rule 168 (predicate -> like_predicate .)
    LPAREN          reduce using rule 168 (predicate -> like_predicate .)
    SELECT          reduce using rule 168 (predicate -> like_predicate .)
    ON              reduce using rule 168 (predicate -> like_predicate .)
    USING           reduce using rule 168 (predicate -> like_predicate .)


state 132

    (169) predicate -> regexp_predicate .

    OR              reduce using rule 169 (predicate -> regexp_predicate .)
    AND             reduce using rule 169 (predicate -> regexp_predicate .)
    COMMA           reduce using rule 169 (predicate -> regexp_predicate .)
    INTERSECT       reduce using rule 169 (predicate -> regexp_predicate .)
    UNION           reduce using rule 169 (predicate -> regexp_predicate .)
    EXCEPT          reduce using rule 169 (predicate -> regexp_predicate .)
    ORDER           reduce using rule 169 (predicate -> regexp_predicate .)
    LIMIT           reduce using rule 169 (predicate -> regexp_predicate .)
    FOR             reduce using rule 169 (predicate -> regexp_predicate .)
    $end            reduce using rule 169 (predicate -> regexp_predicate .)
    RPAREN          reduce using rule 169 (predicate -> regexp_predicate .)
    GROUP           reduce using rule 169 (predicate -> regexp_predicate .)
    HAVING          reduce using rule 169 (predicate -> regexp_predicate .)
    THEN            reduce using rule 169 (predicate -> regexp_predicate .)
    CROSS           reduce using rule 169 (predicate -> regexp_predicate .)
    NATURAL         reduce using rule 169 (predicate -> regexp_predicate .)
    INNER           reduce using rule 169 (predicate -> regexp_predicate .)
    LEFT            reduce using rule 169 (predicate -> regexp_predicate .)
    RIGHT           reduce using rule 169 (predicate -> regexp_predicate .)
    FULL            reduce using rule 169 (predicate -> regexp_predicate .)
    JOIN            reduce using rule 169 (predicate -> regexp_predicate .)
    SET             reduce using rule 169 (predicate -> regexp_predicate .)
    WHERE           reduce using rule 169 (predicate -> regexp_predicate .)
    VALUES          reduce using rule 169 (predicate -> regexp_predicate .)
    LPAREN          reduce using rule 169 (predicate -> regexp_predicate .)
    SELECT          reduce using rule 169 (predicate -> regexp_predicate .)
    ON              reduce using rule 169 (predicate -> regexp_predicate .)
    USING           reduce using rule 169 (predicate -> regexp_predicate .)


state 133

    (170) predicate -> null_predicate .

    OR              reduce using rule 170 (predicate -> null_predicate .)
    AND             reduce using rule 170 (predicate -> null_predicate .)
    COMMA           reduce using rule 170 (predicate -> null_predicate .)
    INTERSECT       reduce using rule 170 (predicate -> null_predicate .)
    UNION           reduce using rule 170 (predicate -> null_predicate .)
    EXCEPT          reduce using rule 170 (predicate -> null_predicate .)
    ORDER           reduce using rule 170 (predicate -> null_predicate .)
    LIMIT           reduce using rule 170 (predicate -> null_predicate .)
    FOR             reduce using rule 170 (predicate -> null_predicate .)
    $end            reduce using rule 170 (predicate -> null_predicate .)
    RPAREN          reduce using rule 170 (predicate -> null_predicate .)
    GROUP           reduce using rule 170 (predicate -> null_predicate .)
    HAVING          reduce using rule 170 (predicate -> null_predicate .)
    THEN            reduce using rule 170 (predicate -> null_predicate .)
    CROSS           reduce using rule 170 (predicate -> null_predicate .)
    NATURAL         reduce using rule 170 (predicate -> null_predicate .)
    INNER           reduce using rule 170 (predicate -> null_predicate .)
    LEFT            reduce using rule 170 (predicate -> null_predicate .)
    RIGHT           reduce using rule 170 (predicate -> null_predicate .)
    FULL            reduce using rule 170 (predicate -> null_predicate .)
    JOIN            reduce using rule 170 (predicate -> null_predicate .)
    SET             reduce using rule 170 (predicate -> null_predicate .)
    WHERE           reduce using rule 170 (predicate -> null_predicate .)
    VALUES          reduce using rule 170 (predicate -> null_predicate .)
    LPAREN          reduce using rule 170 (predicate -> null_predicate .)
    SELECT          reduce using rule 170 (predicate -> null_predicate .)
    ON              reduce using rule 170 (predicate -> null_predicate .)
    USING           reduce using rule 170 (predicate -> null_predicate .)


state 134

    (171) predicate -> exists_predicate .

    OR              reduce using rule 171 (predicate -> exists_predicate .)
    AND             reduce using rule 171 (predicate -> exists_predicate .)
    COMMA           reduce using rule 171 (predicate -> exists_predicate .)
    INTERSECT       reduce using rule 171 (predicate -> exists_predicate .)
    UNION           reduce using rule 171 (predicate -> exists_predicate .)
    EXCEPT          reduce using rule 171 (predicate -> exists_predicate .)
    ORDER           reduce using rule 171 (predicate -> exists_predicate .)
    LIMIT           reduce using rule 171 (predicate -> exists_predicate .)
    FOR             reduce using rule 171 (predicate -> exists_predicate .)
    $end            reduce using rule 171 (predicate -> exists_predicate .)
    RPAREN          reduce using rule 171 (predicate -> exists_predicate .)
    GROUP           reduce using rule 171 (predicate -> exists_predicate .)
    HAVING          reduce using rule 171 (predicate -> exists_predicate .)
    THEN            reduce using rule 171 (predicate -> exists_predicate .)
    CROSS           reduce using rule 171 (predicate -> exists_predicate .)
    NATURAL         reduce using rule 171 (predicate -> exists_predicate .)
    INNER           reduce using rule 171 (predicate -> exists_predicate .)
    LEFT            reduce using rule 171 (predicate -> exists_predicate .)
    RIGHT           reduce using rule 171 (predicate -> exists_predicate .)
    FULL            reduce using rule 171 (predicate -> exists_predicate .)
    JOIN            reduce using rule 171 (predicate -> exists_predicate .)
    SET             reduce using rule 171 (predicate -> exists_predicate .)
    WHERE           reduce using rule 171 (predicate -> exists_predicate .)
    VALUES          reduce using rule 171 (predicate -> exists_predicate .)
    LPAREN          reduce using rule 171 (predicate -> exists_predicate .)
    SELECT          reduce using rule 171 (predicate -> exists_predicate .)
    ON              reduce using rule 171 (predicate -> exists_predicate .)
    USING           reduce using rule 171 (predicate -> exists_predicate .)


state 135

    (182) exists_predicate -> EXISTS . subquery
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN

    LPAREN          shift and go to state 56

    subquery                       shift and go to state 224

state 136

    (92) nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt . nonjoin_query_term
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 226
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19

    nonjoin_query_term             shift and go to state 225
    nonjoin_query_primary          shift and go to state 28
    simple_table                   shift and go to state 30
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32

state 137

    (115) set_quantifier_opt -> ALL .

    LPAREN          reduce using rule 115 (set_quantifier_opt -> ALL .)
    SELECT          reduce using rule 115 (set_quantifier_opt -> ALL .)
    TABLE           reduce using rule 115 (set_quantifier_opt -> ALL .)
    VALUES          reduce using rule 115 (set_quantifier_opt -> ALL .)


state 138

    (116) set_quantifier_opt -> empty .

    LPAREN          reduce using rule 116 (set_quantifier_opt -> empty .)
    SELECT          reduce using rule 116 (set_quantifier_opt -> empty .)
    TABLE           reduce using rule 116 (set_quantifier_opt -> empty .)
    VALUES          reduce using rule 116 (set_quantifier_opt -> empty .)


state 139

    (93) nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt . nonjoin_query_term
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 226
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19

    nonjoin_query_term             shift and go to state 227
    nonjoin_query_primary          shift and go to state 28
    simple_table                   shift and go to state 30
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32

state 140

    (95) nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt . nonjoin_query_primary
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 226
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19

    nonjoin_query_primary          shift and go to state 228
    simple_table                   shift and go to state 30
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32

state 141

    (105) query_spec -> SELECT select_items table_expression_opt .

    INTERSECT       reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)
    UNION           reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)
    EXCEPT          reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)
    ORDER           reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)
    LIMIT           reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)
    FOR             reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)
    $end            reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)
    RPAREN          reduce using rule 105 (query_spec -> SELECT select_items table_expression_opt .)


state 142

    (118) select_items -> select_items COMMA . select_item
    (119) select_item -> . derived_column
    (120) select_item -> . DISTINCT LPAREN derived_column RPAREN
    (121) select_item -> . DISTINCT derived_column
    (122) derived_column -> . value_expression alias_opt
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    DISTINCT        shift and go to state 83
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    select_item                    shift and go to state 229
    derived_column                 shift and go to state 82
    value_expression               shift and go to state 84
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 143

    (123) table_expression_opt -> FROM . relations where_opt group_by_opt having_opt for_update_opt
    (125) relations -> . relations COMMA table_reference
    (126) relations -> . table_reference
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    relations                      shift and go to state 230
    table_reference                shift and go to state 54
    table_primary                  shift and go to state 29
    joined_table                   shift and go to state 55
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 144

    (124) table_expression_opt -> empty .

    INTERSECT       reduce using rule 124 (table_expression_opt -> empty .)
    UNION           reduce using rule 124 (table_expression_opt -> empty .)
    EXCEPT          reduce using rule 124 (table_expression_opt -> empty .)
    ORDER           reduce using rule 124 (table_expression_opt -> empty .)
    LIMIT           reduce using rule 124 (table_expression_opt -> empty .)
    FOR             reduce using rule 124 (table_expression_opt -> empty .)
    $end            reduce using rule 124 (table_expression_opt -> empty .)
    RPAREN          reduce using rule 124 (table_expression_opt -> empty .)


state 145

    (120) select_item -> DISTINCT LPAREN . derived_column RPAREN
    (122) derived_column -> . value_expression alias_opt
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    derived_column                 shift and go to state 231
    value_expression               shift and go to state 84
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 146

    (121) select_item -> DISTINCT derived_column .

    COMMA           reduce using rule 121 (select_item -> DISTINCT derived_column .)
    FROM            reduce using rule 121 (select_item -> DISTINCT derived_column .)
    INTERSECT       reduce using rule 121 (select_item -> DISTINCT derived_column .)
    UNION           reduce using rule 121 (select_item -> DISTINCT derived_column .)
    EXCEPT          reduce using rule 121 (select_item -> DISTINCT derived_column .)
    ORDER           reduce using rule 121 (select_item -> DISTINCT derived_column .)
    LIMIT           reduce using rule 121 (select_item -> DISTINCT derived_column .)
    FOR             reduce using rule 121 (select_item -> DISTINCT derived_column .)
    $end            reduce using rule 121 (select_item -> DISTINCT derived_column .)
    RPAREN          reduce using rule 121 (select_item -> DISTINCT derived_column .)


state 147

    (122) derived_column -> value_expression alias_opt .

    COMMA           reduce using rule 122 (derived_column -> value_expression alias_opt .)
    FROM            reduce using rule 122 (derived_column -> value_expression alias_opt .)
    INTERSECT       reduce using rule 122 (derived_column -> value_expression alias_opt .)
    UNION           reduce using rule 122 (derived_column -> value_expression alias_opt .)
    EXCEPT          reduce using rule 122 (derived_column -> value_expression alias_opt .)
    ORDER           reduce using rule 122 (derived_column -> value_expression alias_opt .)
    LIMIT           reduce using rule 122 (derived_column -> value_expression alias_opt .)
    FOR             reduce using rule 122 (derived_column -> value_expression alias_opt .)
    $end            reduce using rule 122 (derived_column -> value_expression alias_opt .)
    RPAREN          reduce using rule 122 (derived_column -> value_expression alias_opt .)


state 148

    (184) numeric_value_expression -> numeric_value_expression PLUS . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    term                           shift and go to state 232
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 149

    (185) numeric_value_expression -> numeric_value_expression MINUS . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    term                           shift and go to state 233
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 150

    (187) term -> term ASTERISK . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    factor                         shift and go to state 234
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 151

    (188) term -> term SLASH . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    factor                         shift and go to state 235
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 152

    (189) term -> term PERCENT . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    factor                         shift and go to state 236
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 153

    (190) term -> term CONCAT . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    factor                         shift and go to state 237
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 154

    (192) factor -> sign_opt primary_expression .

    ASTERISK        reduce using rule 192 (factor -> sign_opt primary_expression .)
    SLASH           reduce using rule 192 (factor -> sign_opt primary_expression .)
    PERCENT         reduce using rule 192 (factor -> sign_opt primary_expression .)
    CONCAT          reduce using rule 192 (factor -> sign_opt primary_expression .)
    PLUS            reduce using rule 192 (factor -> sign_opt primary_expression .)
    MINUS           reduce using rule 192 (factor -> sign_opt primary_expression .)
    AS              reduce using rule 192 (factor -> sign_opt primary_expression .)
    IDENTIFIER      reduce using rule 192 (factor -> sign_opt primary_expression .)
    DIGIT_IDENTIFIER reduce using rule 192 (factor -> sign_opt primary_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 192 (factor -> sign_opt primary_expression .)
    NON_RESERVED    reduce using rule 192 (factor -> sign_opt primary_expression .)
    COMMA           reduce using rule 192 (factor -> sign_opt primary_expression .)
    FROM            reduce using rule 192 (factor -> sign_opt primary_expression .)
    INTERSECT       reduce using rule 192 (factor -> sign_opt primary_expression .)
    UNION           reduce using rule 192 (factor -> sign_opt primary_expression .)
    EXCEPT          reduce using rule 192 (factor -> sign_opt primary_expression .)
    ORDER           reduce using rule 192 (factor -> sign_opt primary_expression .)
    LIMIT           reduce using rule 192 (factor -> sign_opt primary_expression .)
    FOR             reduce using rule 192 (factor -> sign_opt primary_expression .)
    $end            reduce using rule 192 (factor -> sign_opt primary_expression .)
    RPAREN          reduce using rule 192 (factor -> sign_opt primary_expression .)
    REGEXP          reduce using rule 192 (factor -> sign_opt primary_expression .)
    IS              reduce using rule 192 (factor -> sign_opt primary_expression .)
    EQ              reduce using rule 192 (factor -> sign_opt primary_expression .)
    NE              reduce using rule 192 (factor -> sign_opt primary_expression .)
    LT              reduce using rule 192 (factor -> sign_opt primary_expression .)
    LE              reduce using rule 192 (factor -> sign_opt primary_expression .)
    GT              reduce using rule 192 (factor -> sign_opt primary_expression .)
    GE              reduce using rule 192 (factor -> sign_opt primary_expression .)
    NOT             reduce using rule 192 (factor -> sign_opt primary_expression .)
    BETWEEN         reduce using rule 192 (factor -> sign_opt primary_expression .)
    IN              reduce using rule 192 (factor -> sign_opt primary_expression .)
    LIKE            reduce using rule 192 (factor -> sign_opt primary_expression .)
    OR              reduce using rule 192 (factor -> sign_opt primary_expression .)
    AND             reduce using rule 192 (factor -> sign_opt primary_expression .)
    GROUP           reduce using rule 192 (factor -> sign_opt primary_expression .)
    HAVING          reduce using rule 192 (factor -> sign_opt primary_expression .)
    THEN            reduce using rule 192 (factor -> sign_opt primary_expression .)
    CROSS           reduce using rule 192 (factor -> sign_opt primary_expression .)
    NATURAL         reduce using rule 192 (factor -> sign_opt primary_expression .)
    INNER           reduce using rule 192 (factor -> sign_opt primary_expression .)
    LEFT            reduce using rule 192 (factor -> sign_opt primary_expression .)
    RIGHT           reduce using rule 192 (factor -> sign_opt primary_expression .)
    FULL            reduce using rule 192 (factor -> sign_opt primary_expression .)
    JOIN            reduce using rule 192 (factor -> sign_opt primary_expression .)
    SET             reduce using rule 192 (factor -> sign_opt primary_expression .)
    WHERE           reduce using rule 192 (factor -> sign_opt primary_expression .)
    VALUES          reduce using rule 192 (factor -> sign_opt primary_expression .)
    LPAREN          reduce using rule 192 (factor -> sign_opt primary_expression .)
    SELECT          reduce using rule 192 (factor -> sign_opt primary_expression .)
    ON              reduce using rule 192 (factor -> sign_opt primary_expression .)
    USING           reduce using rule 192 (factor -> sign_opt primary_expression .)
    ASC             reduce using rule 192 (factor -> sign_opt primary_expression .)
    DESC            reduce using rule 192 (factor -> sign_opt primary_expression .)
    NULLS           reduce using rule 192 (factor -> sign_opt primary_expression .)
    WHEN            reduce using rule 192 (factor -> sign_opt primary_expression .)
    END             reduce using rule 192 (factor -> sign_opt primary_expression .)
    ELSE            reduce using rule 192 (factor -> sign_opt primary_expression .)


state 155

    (193) primary_expression -> parenthetic_primary_expression .

    ASTERISK        reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    SLASH           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    PERCENT         reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    CONCAT          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    PLUS            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    MINUS           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    AS              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    IDENTIFIER      reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    DIGIT_IDENTIFIER reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    NON_RESERVED    reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    COMMA           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    FROM            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    INTERSECT       reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    UNION           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    EXCEPT          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    ORDER           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    LIMIT           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    FOR             reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    $end            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    RPAREN          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    REGEXP          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    IS              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    EQ              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    NE              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    LT              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    LE              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    GT              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    GE              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    NOT             reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    BETWEEN         reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    IN              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    LIKE            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    OR              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    AND             reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    GROUP           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    HAVING          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    THEN            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    CROSS           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    NATURAL         reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    INNER           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    LEFT            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    RIGHT           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    FULL            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    JOIN            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    SET             reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    WHERE           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    VALUES          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    LPAREN          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    SELECT          reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    ON              reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    USING           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    ASC             reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    DESC            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    NULLS           reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    WHEN            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    END             reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)
    ELSE            reduce using rule 193 (primary_expression -> parenthetic_primary_expression .)


state 156

    (194) primary_expression -> base_primary_expression .

    ASTERISK        reduce using rule 194 (primary_expression -> base_primary_expression .)
    SLASH           reduce using rule 194 (primary_expression -> base_primary_expression .)
    PERCENT         reduce using rule 194 (primary_expression -> base_primary_expression .)
    CONCAT          reduce using rule 194 (primary_expression -> base_primary_expression .)
    PLUS            reduce using rule 194 (primary_expression -> base_primary_expression .)
    MINUS           reduce using rule 194 (primary_expression -> base_primary_expression .)
    AS              reduce using rule 194 (primary_expression -> base_primary_expression .)
    IDENTIFIER      reduce using rule 194 (primary_expression -> base_primary_expression .)
    DIGIT_IDENTIFIER reduce using rule 194 (primary_expression -> base_primary_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 194 (primary_expression -> base_primary_expression .)
    NON_RESERVED    reduce using rule 194 (primary_expression -> base_primary_expression .)
    COMMA           reduce using rule 194 (primary_expression -> base_primary_expression .)
    FROM            reduce using rule 194 (primary_expression -> base_primary_expression .)
    INTERSECT       reduce using rule 194 (primary_expression -> base_primary_expression .)
    UNION           reduce using rule 194 (primary_expression -> base_primary_expression .)
    EXCEPT          reduce using rule 194 (primary_expression -> base_primary_expression .)
    ORDER           reduce using rule 194 (primary_expression -> base_primary_expression .)
    LIMIT           reduce using rule 194 (primary_expression -> base_primary_expression .)
    FOR             reduce using rule 194 (primary_expression -> base_primary_expression .)
    $end            reduce using rule 194 (primary_expression -> base_primary_expression .)
    RPAREN          reduce using rule 194 (primary_expression -> base_primary_expression .)
    REGEXP          reduce using rule 194 (primary_expression -> base_primary_expression .)
    IS              reduce using rule 194 (primary_expression -> base_primary_expression .)
    EQ              reduce using rule 194 (primary_expression -> base_primary_expression .)
    NE              reduce using rule 194 (primary_expression -> base_primary_expression .)
    LT              reduce using rule 194 (primary_expression -> base_primary_expression .)
    LE              reduce using rule 194 (primary_expression -> base_primary_expression .)
    GT              reduce using rule 194 (primary_expression -> base_primary_expression .)
    GE              reduce using rule 194 (primary_expression -> base_primary_expression .)
    NOT             reduce using rule 194 (primary_expression -> base_primary_expression .)
    BETWEEN         reduce using rule 194 (primary_expression -> base_primary_expression .)
    IN              reduce using rule 194 (primary_expression -> base_primary_expression .)
    LIKE            reduce using rule 194 (primary_expression -> base_primary_expression .)
    OR              reduce using rule 194 (primary_expression -> base_primary_expression .)
    AND             reduce using rule 194 (primary_expression -> base_primary_expression .)
    GROUP           reduce using rule 194 (primary_expression -> base_primary_expression .)
    HAVING          reduce using rule 194 (primary_expression -> base_primary_expression .)
    THEN            reduce using rule 194 (primary_expression -> base_primary_expression .)
    CROSS           reduce using rule 194 (primary_expression -> base_primary_expression .)
    NATURAL         reduce using rule 194 (primary_expression -> base_primary_expression .)
    INNER           reduce using rule 194 (primary_expression -> base_primary_expression .)
    LEFT            reduce using rule 194 (primary_expression -> base_primary_expression .)
    RIGHT           reduce using rule 194 (primary_expression -> base_primary_expression .)
    FULL            reduce using rule 194 (primary_expression -> base_primary_expression .)
    JOIN            reduce using rule 194 (primary_expression -> base_primary_expression .)
    SET             reduce using rule 194 (primary_expression -> base_primary_expression .)
    WHERE           reduce using rule 194 (primary_expression -> base_primary_expression .)
    VALUES          reduce using rule 194 (primary_expression -> base_primary_expression .)
    LPAREN          reduce using rule 194 (primary_expression -> base_primary_expression .)
    SELECT          reduce using rule 194 (primary_expression -> base_primary_expression .)
    ON              reduce using rule 194 (primary_expression -> base_primary_expression .)
    USING           reduce using rule 194 (primary_expression -> base_primary_expression .)
    ASC             reduce using rule 194 (primary_expression -> base_primary_expression .)
    DESC            reduce using rule 194 (primary_expression -> base_primary_expression .)
    NULLS           reduce using rule 194 (primary_expression -> base_primary_expression .)
    WHEN            reduce using rule 194 (primary_expression -> base_primary_expression .)
    END             reduce using rule 194 (primary_expression -> base_primary_expression .)
    ELSE            reduce using rule 194 (primary_expression -> base_primary_expression .)


state 157

    (195) parenthetic_primary_expression -> LPAREN . value_expression RPAREN
    (196) parenthetic_primary_expression -> LPAREN . parenthetic_primary_expression RPAREN
    (65) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (183) value_expression -> . numeric_value_expression
    (195) parenthetic_primary_expression -> . LPAREN value_expression RPAREN
    (196) parenthetic_primary_expression -> . LPAREN parenthetic_primary_expression RPAREN
    (70) query_expression -> . query_expression_body
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (71) query_expression_body -> . nonjoin_query_expression
    (72) query_expression_body -> . joined_table
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (91) nonjoin_query_expression -> . nonjoin_query_term
    (92) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (192) factor -> . sign_opt primary_expression
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DIGIT_IDENTIFIER resolved as shift
  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for BACKQUOTED_IDENTIFIER resolved as shift
  ! shift/reduce conflict for NON_RESERVED resolved as shift
    LPAREN          shift and go to state 238
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 271 (empty -> .) ]
  ! DIGIT_IDENTIFIER [ reduce using rule 271 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 271 (empty -> .) ]
  ! BACKQUOTED_IDENTIFIER [ reduce using rule 271 (empty -> .) ]
  ! NON_RESERVED    [ reduce using rule 271 (empty -> .) ]

    value_expression               shift and go to state 239
    parenthetic_primary_expression shift and go to state 240
    query_expression               shift and go to state 48
    numeric_value_expression       shift and go to state 85
    query_expression_body          shift and go to state 21
    term                           shift and go to state 87
    nonjoin_query_expression       shift and go to state 22
    joined_table                   shift and go to state 23
    factor                         shift and go to state 89
    nonjoin_query_term             shift and go to state 24
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    sign_opt                       shift and go to state 90
    nonjoin_query_primary          shift and go to state 28
    table_reference                shift and go to state 18
    table_primary                  shift and go to state 29
    sign                           shift and go to state 91
    empty                          shift and go to state 92
    simple_table                   shift and go to state 30
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 158

    (197) base_primary_expression -> value .

    ASTERISK        reduce using rule 197 (base_primary_expression -> value .)
    SLASH           reduce using rule 197 (base_primary_expression -> value .)
    PERCENT         reduce using rule 197 (base_primary_expression -> value .)
    CONCAT          reduce using rule 197 (base_primary_expression -> value .)
    PLUS            reduce using rule 197 (base_primary_expression -> value .)
    MINUS           reduce using rule 197 (base_primary_expression -> value .)
    AS              reduce using rule 197 (base_primary_expression -> value .)
    IDENTIFIER      reduce using rule 197 (base_primary_expression -> value .)
    DIGIT_IDENTIFIER reduce using rule 197 (base_primary_expression -> value .)
    BACKQUOTED_IDENTIFIER reduce using rule 197 (base_primary_expression -> value .)
    NON_RESERVED    reduce using rule 197 (base_primary_expression -> value .)
    COMMA           reduce using rule 197 (base_primary_expression -> value .)
    FROM            reduce using rule 197 (base_primary_expression -> value .)
    INTERSECT       reduce using rule 197 (base_primary_expression -> value .)
    UNION           reduce using rule 197 (base_primary_expression -> value .)
    EXCEPT          reduce using rule 197 (base_primary_expression -> value .)
    ORDER           reduce using rule 197 (base_primary_expression -> value .)
    LIMIT           reduce using rule 197 (base_primary_expression -> value .)
    FOR             reduce using rule 197 (base_primary_expression -> value .)
    $end            reduce using rule 197 (base_primary_expression -> value .)
    RPAREN          reduce using rule 197 (base_primary_expression -> value .)
    REGEXP          reduce using rule 197 (base_primary_expression -> value .)
    IS              reduce using rule 197 (base_primary_expression -> value .)
    EQ              reduce using rule 197 (base_primary_expression -> value .)
    NE              reduce using rule 197 (base_primary_expression -> value .)
    LT              reduce using rule 197 (base_primary_expression -> value .)
    LE              reduce using rule 197 (base_primary_expression -> value .)
    GT              reduce using rule 197 (base_primary_expression -> value .)
    GE              reduce using rule 197 (base_primary_expression -> value .)
    NOT             reduce using rule 197 (base_primary_expression -> value .)
    BETWEEN         reduce using rule 197 (base_primary_expression -> value .)
    IN              reduce using rule 197 (base_primary_expression -> value .)
    LIKE            reduce using rule 197 (base_primary_expression -> value .)
    OR              reduce using rule 197 (base_primary_expression -> value .)
    AND             reduce using rule 197 (base_primary_expression -> value .)
    GROUP           reduce using rule 197 (base_primary_expression -> value .)
    HAVING          reduce using rule 197 (base_primary_expression -> value .)
    THEN            reduce using rule 197 (base_primary_expression -> value .)
    CROSS           reduce using rule 197 (base_primary_expression -> value .)
    NATURAL         reduce using rule 197 (base_primary_expression -> value .)
    INNER           reduce using rule 197 (base_primary_expression -> value .)
    LEFT            reduce using rule 197 (base_primary_expression -> value .)
    RIGHT           reduce using rule 197 (base_primary_expression -> value .)
    FULL            reduce using rule 197 (base_primary_expression -> value .)
    JOIN            reduce using rule 197 (base_primary_expression -> value .)
    SET             reduce using rule 197 (base_primary_expression -> value .)
    WHERE           reduce using rule 197 (base_primary_expression -> value .)
    VALUES          reduce using rule 197 (base_primary_expression -> value .)
    LPAREN          reduce using rule 197 (base_primary_expression -> value .)
    SELECT          reduce using rule 197 (base_primary_expression -> value .)
    ON              reduce using rule 197 (base_primary_expression -> value .)
    USING           reduce using rule 197 (base_primary_expression -> value .)
    ASC             reduce using rule 197 (base_primary_expression -> value .)
    DESC            reduce using rule 197 (base_primary_expression -> value .)
    NULLS           reduce using rule 197 (base_primary_expression -> value .)
    WHEN            reduce using rule 197 (base_primary_expression -> value .)
    END             reduce using rule 197 (base_primary_expression -> value .)
    ELSE            reduce using rule 197 (base_primary_expression -> value .)


state 159

    (198) base_primary_expression -> qualified_name .
    (260) qualified_name -> qualified_name . PERIOD qualified_name
    (210) function_call -> qualified_name . LPAREN call_args RPAREN
    (211) function_call -> qualified_name . LPAREN DISTINCT call_args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    ASTERISK        reduce using rule 198 (base_primary_expression -> qualified_name .)
    SLASH           reduce using rule 198 (base_primary_expression -> qualified_name .)
    PERCENT         reduce using rule 198 (base_primary_expression -> qualified_name .)
    CONCAT          reduce using rule 198 (base_primary_expression -> qualified_name .)
    PLUS            reduce using rule 198 (base_primary_expression -> qualified_name .)
    MINUS           reduce using rule 198 (base_primary_expression -> qualified_name .)
    AS              reduce using rule 198 (base_primary_expression -> qualified_name .)
    IDENTIFIER      reduce using rule 198 (base_primary_expression -> qualified_name .)
    DIGIT_IDENTIFIER reduce using rule 198 (base_primary_expression -> qualified_name .)
    BACKQUOTED_IDENTIFIER reduce using rule 198 (base_primary_expression -> qualified_name .)
    NON_RESERVED    reduce using rule 198 (base_primary_expression -> qualified_name .)
    COMMA           reduce using rule 198 (base_primary_expression -> qualified_name .)
    FROM            reduce using rule 198 (base_primary_expression -> qualified_name .)
    INTERSECT       reduce using rule 198 (base_primary_expression -> qualified_name .)
    UNION           reduce using rule 198 (base_primary_expression -> qualified_name .)
    EXCEPT          reduce using rule 198 (base_primary_expression -> qualified_name .)
    ORDER           reduce using rule 198 (base_primary_expression -> qualified_name .)
    LIMIT           reduce using rule 198 (base_primary_expression -> qualified_name .)
    FOR             reduce using rule 198 (base_primary_expression -> qualified_name .)
    $end            reduce using rule 198 (base_primary_expression -> qualified_name .)
    RPAREN          reduce using rule 198 (base_primary_expression -> qualified_name .)
    REGEXP          reduce using rule 198 (base_primary_expression -> qualified_name .)
    IS              reduce using rule 198 (base_primary_expression -> qualified_name .)
    EQ              reduce using rule 198 (base_primary_expression -> qualified_name .)
    NE              reduce using rule 198 (base_primary_expression -> qualified_name .)
    LT              reduce using rule 198 (base_primary_expression -> qualified_name .)
    LE              reduce using rule 198 (base_primary_expression -> qualified_name .)
    GT              reduce using rule 198 (base_primary_expression -> qualified_name .)
    GE              reduce using rule 198 (base_primary_expression -> qualified_name .)
    NOT             reduce using rule 198 (base_primary_expression -> qualified_name .)
    BETWEEN         reduce using rule 198 (base_primary_expression -> qualified_name .)
    IN              reduce using rule 198 (base_primary_expression -> qualified_name .)
    LIKE            reduce using rule 198 (base_primary_expression -> qualified_name .)
    OR              reduce using rule 198 (base_primary_expression -> qualified_name .)
    AND             reduce using rule 198 (base_primary_expression -> qualified_name .)
    GROUP           reduce using rule 198 (base_primary_expression -> qualified_name .)
    HAVING          reduce using rule 198 (base_primary_expression -> qualified_name .)
    THEN            reduce using rule 198 (base_primary_expression -> qualified_name .)
    CROSS           reduce using rule 198 (base_primary_expression -> qualified_name .)
    NATURAL         reduce using rule 198 (base_primary_expression -> qualified_name .)
    INNER           reduce using rule 198 (base_primary_expression -> qualified_name .)
    LEFT            reduce using rule 198 (base_primary_expression -> qualified_name .)
    RIGHT           reduce using rule 198 (base_primary_expression -> qualified_name .)
    FULL            reduce using rule 198 (base_primary_expression -> qualified_name .)
    JOIN            reduce using rule 198 (base_primary_expression -> qualified_name .)
    SET             reduce using rule 198 (base_primary_expression -> qualified_name .)
    WHERE           reduce using rule 198 (base_primary_expression -> qualified_name .)
    VALUES          reduce using rule 198 (base_primary_expression -> qualified_name .)
    SELECT          reduce using rule 198 (base_primary_expression -> qualified_name .)
    ON              reduce using rule 198 (base_primary_expression -> qualified_name .)
    USING           reduce using rule 198 (base_primary_expression -> qualified_name .)
    ASC             reduce using rule 198 (base_primary_expression -> qualified_name .)
    DESC            reduce using rule 198 (base_primary_expression -> qualified_name .)
    NULLS           reduce using rule 198 (base_primary_expression -> qualified_name .)
    WHEN            reduce using rule 198 (base_primary_expression -> qualified_name .)
    END             reduce using rule 198 (base_primary_expression -> qualified_name .)
    ELSE            reduce using rule 198 (base_primary_expression -> qualified_name .)
    PERIOD          shift and go to state 94
    LPAREN          shift and go to state 241

  ! LPAREN          [ reduce using rule 198 (base_primary_expression -> qualified_name .) ]


state 160

    (199) base_primary_expression -> subquery .

    ASTERISK        reduce using rule 199 (base_primary_expression -> subquery .)
    SLASH           reduce using rule 199 (base_primary_expression -> subquery .)
    PERCENT         reduce using rule 199 (base_primary_expression -> subquery .)
    CONCAT          reduce using rule 199 (base_primary_expression -> subquery .)
    PLUS            reduce using rule 199 (base_primary_expression -> subquery .)
    MINUS           reduce using rule 199 (base_primary_expression -> subquery .)
    AS              reduce using rule 199 (base_primary_expression -> subquery .)
    IDENTIFIER      reduce using rule 199 (base_primary_expression -> subquery .)
    DIGIT_IDENTIFIER reduce using rule 199 (base_primary_expression -> subquery .)
    BACKQUOTED_IDENTIFIER reduce using rule 199 (base_primary_expression -> subquery .)
    NON_RESERVED    reduce using rule 199 (base_primary_expression -> subquery .)
    COMMA           reduce using rule 199 (base_primary_expression -> subquery .)
    FROM            reduce using rule 199 (base_primary_expression -> subquery .)
    INTERSECT       reduce using rule 199 (base_primary_expression -> subquery .)
    UNION           reduce using rule 199 (base_primary_expression -> subquery .)
    EXCEPT          reduce using rule 199 (base_primary_expression -> subquery .)
    ORDER           reduce using rule 199 (base_primary_expression -> subquery .)
    LIMIT           reduce using rule 199 (base_primary_expression -> subquery .)
    FOR             reduce using rule 199 (base_primary_expression -> subquery .)
    $end            reduce using rule 199 (base_primary_expression -> subquery .)
    RPAREN          reduce using rule 199 (base_primary_expression -> subquery .)
    REGEXP          reduce using rule 199 (base_primary_expression -> subquery .)
    IS              reduce using rule 199 (base_primary_expression -> subquery .)
    EQ              reduce using rule 199 (base_primary_expression -> subquery .)
    NE              reduce using rule 199 (base_primary_expression -> subquery .)
    LT              reduce using rule 199 (base_primary_expression -> subquery .)
    LE              reduce using rule 199 (base_primary_expression -> subquery .)
    GT              reduce using rule 199 (base_primary_expression -> subquery .)
    GE              reduce using rule 199 (base_primary_expression -> subquery .)
    NOT             reduce using rule 199 (base_primary_expression -> subquery .)
    BETWEEN         reduce using rule 199 (base_primary_expression -> subquery .)
    IN              reduce using rule 199 (base_primary_expression -> subquery .)
    LIKE            reduce using rule 199 (base_primary_expression -> subquery .)
    OR              reduce using rule 199 (base_primary_expression -> subquery .)
    AND             reduce using rule 199 (base_primary_expression -> subquery .)
    GROUP           reduce using rule 199 (base_primary_expression -> subquery .)
    HAVING          reduce using rule 199 (base_primary_expression -> subquery .)
    THEN            reduce using rule 199 (base_primary_expression -> subquery .)
    CROSS           reduce using rule 199 (base_primary_expression -> subquery .)
    NATURAL         reduce using rule 199 (base_primary_expression -> subquery .)
    INNER           reduce using rule 199 (base_primary_expression -> subquery .)
    LEFT            reduce using rule 199 (base_primary_expression -> subquery .)
    RIGHT           reduce using rule 199 (base_primary_expression -> subquery .)
    FULL            reduce using rule 199 (base_primary_expression -> subquery .)
    JOIN            reduce using rule 199 (base_primary_expression -> subquery .)
    SET             reduce using rule 199 (base_primary_expression -> subquery .)
    WHERE           reduce using rule 199 (base_primary_expression -> subquery .)
    VALUES          reduce using rule 199 (base_primary_expression -> subquery .)
    LPAREN          reduce using rule 199 (base_primary_expression -> subquery .)
    SELECT          reduce using rule 199 (base_primary_expression -> subquery .)
    ON              reduce using rule 199 (base_primary_expression -> subquery .)
    USING           reduce using rule 199 (base_primary_expression -> subquery .)
    ASC             reduce using rule 199 (base_primary_expression -> subquery .)
    DESC            reduce using rule 199 (base_primary_expression -> subquery .)
    NULLS           reduce using rule 199 (base_primary_expression -> subquery .)
    WHEN            reduce using rule 199 (base_primary_expression -> subquery .)
    END             reduce using rule 199 (base_primary_expression -> subquery .)
    ELSE            reduce using rule 199 (base_primary_expression -> subquery .)


state 161

    (200) base_primary_expression -> function_call .

    ASTERISK        reduce using rule 200 (base_primary_expression -> function_call .)
    SLASH           reduce using rule 200 (base_primary_expression -> function_call .)
    PERCENT         reduce using rule 200 (base_primary_expression -> function_call .)
    CONCAT          reduce using rule 200 (base_primary_expression -> function_call .)
    PLUS            reduce using rule 200 (base_primary_expression -> function_call .)
    MINUS           reduce using rule 200 (base_primary_expression -> function_call .)
    AS              reduce using rule 200 (base_primary_expression -> function_call .)
    IDENTIFIER      reduce using rule 200 (base_primary_expression -> function_call .)
    DIGIT_IDENTIFIER reduce using rule 200 (base_primary_expression -> function_call .)
    BACKQUOTED_IDENTIFIER reduce using rule 200 (base_primary_expression -> function_call .)
    NON_RESERVED    reduce using rule 200 (base_primary_expression -> function_call .)
    COMMA           reduce using rule 200 (base_primary_expression -> function_call .)
    FROM            reduce using rule 200 (base_primary_expression -> function_call .)
    INTERSECT       reduce using rule 200 (base_primary_expression -> function_call .)
    UNION           reduce using rule 200 (base_primary_expression -> function_call .)
    EXCEPT          reduce using rule 200 (base_primary_expression -> function_call .)
    ORDER           reduce using rule 200 (base_primary_expression -> function_call .)
    LIMIT           reduce using rule 200 (base_primary_expression -> function_call .)
    FOR             reduce using rule 200 (base_primary_expression -> function_call .)
    $end            reduce using rule 200 (base_primary_expression -> function_call .)
    RPAREN          reduce using rule 200 (base_primary_expression -> function_call .)
    REGEXP          reduce using rule 200 (base_primary_expression -> function_call .)
    IS              reduce using rule 200 (base_primary_expression -> function_call .)
    EQ              reduce using rule 200 (base_primary_expression -> function_call .)
    NE              reduce using rule 200 (base_primary_expression -> function_call .)
    LT              reduce using rule 200 (base_primary_expression -> function_call .)
    LE              reduce using rule 200 (base_primary_expression -> function_call .)
    GT              reduce using rule 200 (base_primary_expression -> function_call .)
    GE              reduce using rule 200 (base_primary_expression -> function_call .)
    NOT             reduce using rule 200 (base_primary_expression -> function_call .)
    BETWEEN         reduce using rule 200 (base_primary_expression -> function_call .)
    IN              reduce using rule 200 (base_primary_expression -> function_call .)
    LIKE            reduce using rule 200 (base_primary_expression -> function_call .)
    OR              reduce using rule 200 (base_primary_expression -> function_call .)
    AND             reduce using rule 200 (base_primary_expression -> function_call .)
    GROUP           reduce using rule 200 (base_primary_expression -> function_call .)
    HAVING          reduce using rule 200 (base_primary_expression -> function_call .)
    THEN            reduce using rule 200 (base_primary_expression -> function_call .)
    CROSS           reduce using rule 200 (base_primary_expression -> function_call .)
    NATURAL         reduce using rule 200 (base_primary_expression -> function_call .)
    INNER           reduce using rule 200 (base_primary_expression -> function_call .)
    LEFT            reduce using rule 200 (base_primary_expression -> function_call .)
    RIGHT           reduce using rule 200 (base_primary_expression -> function_call .)
    FULL            reduce using rule 200 (base_primary_expression -> function_call .)
    JOIN            reduce using rule 200 (base_primary_expression -> function_call .)
    SET             reduce using rule 200 (base_primary_expression -> function_call .)
    WHERE           reduce using rule 200 (base_primary_expression -> function_call .)
    VALUES          reduce using rule 200 (base_primary_expression -> function_call .)
    LPAREN          reduce using rule 200 (base_primary_expression -> function_call .)
    SELECT          reduce using rule 200 (base_primary_expression -> function_call .)
    ON              reduce using rule 200 (base_primary_expression -> function_call .)
    USING           reduce using rule 200 (base_primary_expression -> function_call .)
    ASC             reduce using rule 200 (base_primary_expression -> function_call .)
    DESC            reduce using rule 200 (base_primary_expression -> function_call .)
    NULLS           reduce using rule 200 (base_primary_expression -> function_call .)
    WHEN            reduce using rule 200 (base_primary_expression -> function_call .)
    END             reduce using rule 200 (base_primary_expression -> function_call .)
    ELSE            reduce using rule 200 (base_primary_expression -> function_call .)


state 162

    (201) base_primary_expression -> date_time .

    ASTERISK        reduce using rule 201 (base_primary_expression -> date_time .)
    SLASH           reduce using rule 201 (base_primary_expression -> date_time .)
    PERCENT         reduce using rule 201 (base_primary_expression -> date_time .)
    CONCAT          reduce using rule 201 (base_primary_expression -> date_time .)
    PLUS            reduce using rule 201 (base_primary_expression -> date_time .)
    MINUS           reduce using rule 201 (base_primary_expression -> date_time .)
    AS              reduce using rule 201 (base_primary_expression -> date_time .)
    IDENTIFIER      reduce using rule 201 (base_primary_expression -> date_time .)
    DIGIT_IDENTIFIER reduce using rule 201 (base_primary_expression -> date_time .)
    BACKQUOTED_IDENTIFIER reduce using rule 201 (base_primary_expression -> date_time .)
    NON_RESERVED    reduce using rule 201 (base_primary_expression -> date_time .)
    COMMA           reduce using rule 201 (base_primary_expression -> date_time .)
    FROM            reduce using rule 201 (base_primary_expression -> date_time .)
    INTERSECT       reduce using rule 201 (base_primary_expression -> date_time .)
    UNION           reduce using rule 201 (base_primary_expression -> date_time .)
    EXCEPT          reduce using rule 201 (base_primary_expression -> date_time .)
    ORDER           reduce using rule 201 (base_primary_expression -> date_time .)
    LIMIT           reduce using rule 201 (base_primary_expression -> date_time .)
    FOR             reduce using rule 201 (base_primary_expression -> date_time .)
    $end            reduce using rule 201 (base_primary_expression -> date_time .)
    RPAREN          reduce using rule 201 (base_primary_expression -> date_time .)
    REGEXP          reduce using rule 201 (base_primary_expression -> date_time .)
    IS              reduce using rule 201 (base_primary_expression -> date_time .)
    EQ              reduce using rule 201 (base_primary_expression -> date_time .)
    NE              reduce using rule 201 (base_primary_expression -> date_time .)
    LT              reduce using rule 201 (base_primary_expression -> date_time .)
    LE              reduce using rule 201 (base_primary_expression -> date_time .)
    GT              reduce using rule 201 (base_primary_expression -> date_time .)
    GE              reduce using rule 201 (base_primary_expression -> date_time .)
    NOT             reduce using rule 201 (base_primary_expression -> date_time .)
    BETWEEN         reduce using rule 201 (base_primary_expression -> date_time .)
    IN              reduce using rule 201 (base_primary_expression -> date_time .)
    LIKE            reduce using rule 201 (base_primary_expression -> date_time .)
    OR              reduce using rule 201 (base_primary_expression -> date_time .)
    AND             reduce using rule 201 (base_primary_expression -> date_time .)
    GROUP           reduce using rule 201 (base_primary_expression -> date_time .)
    HAVING          reduce using rule 201 (base_primary_expression -> date_time .)
    THEN            reduce using rule 201 (base_primary_expression -> date_time .)
    CROSS           reduce using rule 201 (base_primary_expression -> date_time .)
    NATURAL         reduce using rule 201 (base_primary_expression -> date_time .)
    INNER           reduce using rule 201 (base_primary_expression -> date_time .)
    LEFT            reduce using rule 201 (base_primary_expression -> date_time .)
    RIGHT           reduce using rule 201 (base_primary_expression -> date_time .)
    FULL            reduce using rule 201 (base_primary_expression -> date_time .)
    JOIN            reduce using rule 201 (base_primary_expression -> date_time .)
    SET             reduce using rule 201 (base_primary_expression -> date_time .)
    WHERE           reduce using rule 201 (base_primary_expression -> date_time .)
    VALUES          reduce using rule 201 (base_primary_expression -> date_time .)
    LPAREN          reduce using rule 201 (base_primary_expression -> date_time .)
    SELECT          reduce using rule 201 (base_primary_expression -> date_time .)
    ON              reduce using rule 201 (base_primary_expression -> date_time .)
    USING           reduce using rule 201 (base_primary_expression -> date_time .)
    ASC             reduce using rule 201 (base_primary_expression -> date_time .)
    DESC            reduce using rule 201 (base_primary_expression -> date_time .)
    NULLS           reduce using rule 201 (base_primary_expression -> date_time .)
    WHEN            reduce using rule 201 (base_primary_expression -> date_time .)
    END             reduce using rule 201 (base_primary_expression -> date_time .)
    ELSE            reduce using rule 201 (base_primary_expression -> date_time .)


state 163

    (202) base_primary_expression -> case_specification .

    ASTERISK        reduce using rule 202 (base_primary_expression -> case_specification .)
    SLASH           reduce using rule 202 (base_primary_expression -> case_specification .)
    PERCENT         reduce using rule 202 (base_primary_expression -> case_specification .)
    CONCAT          reduce using rule 202 (base_primary_expression -> case_specification .)
    PLUS            reduce using rule 202 (base_primary_expression -> case_specification .)
    MINUS           reduce using rule 202 (base_primary_expression -> case_specification .)
    AS              reduce using rule 202 (base_primary_expression -> case_specification .)
    IDENTIFIER      reduce using rule 202 (base_primary_expression -> case_specification .)
    DIGIT_IDENTIFIER reduce using rule 202 (base_primary_expression -> case_specification .)
    BACKQUOTED_IDENTIFIER reduce using rule 202 (base_primary_expression -> case_specification .)
    NON_RESERVED    reduce using rule 202 (base_primary_expression -> case_specification .)
    COMMA           reduce using rule 202 (base_primary_expression -> case_specification .)
    FROM            reduce using rule 202 (base_primary_expression -> case_specification .)
    INTERSECT       reduce using rule 202 (base_primary_expression -> case_specification .)
    UNION           reduce using rule 202 (base_primary_expression -> case_specification .)
    EXCEPT          reduce using rule 202 (base_primary_expression -> case_specification .)
    ORDER           reduce using rule 202 (base_primary_expression -> case_specification .)
    LIMIT           reduce using rule 202 (base_primary_expression -> case_specification .)
    FOR             reduce using rule 202 (base_primary_expression -> case_specification .)
    $end            reduce using rule 202 (base_primary_expression -> case_specification .)
    RPAREN          reduce using rule 202 (base_primary_expression -> case_specification .)
    REGEXP          reduce using rule 202 (base_primary_expression -> case_specification .)
    IS              reduce using rule 202 (base_primary_expression -> case_specification .)
    EQ              reduce using rule 202 (base_primary_expression -> case_specification .)
    NE              reduce using rule 202 (base_primary_expression -> case_specification .)
    LT              reduce using rule 202 (base_primary_expression -> case_specification .)
    LE              reduce using rule 202 (base_primary_expression -> case_specification .)
    GT              reduce using rule 202 (base_primary_expression -> case_specification .)
    GE              reduce using rule 202 (base_primary_expression -> case_specification .)
    NOT             reduce using rule 202 (base_primary_expression -> case_specification .)
    BETWEEN         reduce using rule 202 (base_primary_expression -> case_specification .)
    IN              reduce using rule 202 (base_primary_expression -> case_specification .)
    LIKE            reduce using rule 202 (base_primary_expression -> case_specification .)
    OR              reduce using rule 202 (base_primary_expression -> case_specification .)
    AND             reduce using rule 202 (base_primary_expression -> case_specification .)
    GROUP           reduce using rule 202 (base_primary_expression -> case_specification .)
    HAVING          reduce using rule 202 (base_primary_expression -> case_specification .)
    THEN            reduce using rule 202 (base_primary_expression -> case_specification .)
    CROSS           reduce using rule 202 (base_primary_expression -> case_specification .)
    NATURAL         reduce using rule 202 (base_primary_expression -> case_specification .)
    INNER           reduce using rule 202 (base_primary_expression -> case_specification .)
    LEFT            reduce using rule 202 (base_primary_expression -> case_specification .)
    RIGHT           reduce using rule 202 (base_primary_expression -> case_specification .)
    FULL            reduce using rule 202 (base_primary_expression -> case_specification .)
    JOIN            reduce using rule 202 (base_primary_expression -> case_specification .)
    SET             reduce using rule 202 (base_primary_expression -> case_specification .)
    WHERE           reduce using rule 202 (base_primary_expression -> case_specification .)
    VALUES          reduce using rule 202 (base_primary_expression -> case_specification .)
    LPAREN          reduce using rule 202 (base_primary_expression -> case_specification .)
    SELECT          reduce using rule 202 (base_primary_expression -> case_specification .)
    ON              reduce using rule 202 (base_primary_expression -> case_specification .)
    USING           reduce using rule 202 (base_primary_expression -> case_specification .)
    ASC             reduce using rule 202 (base_primary_expression -> case_specification .)
    DESC            reduce using rule 202 (base_primary_expression -> case_specification .)
    NULLS           reduce using rule 202 (base_primary_expression -> case_specification .)
    WHEN            reduce using rule 202 (base_primary_expression -> case_specification .)
    END             reduce using rule 202 (base_primary_expression -> case_specification .)
    ELSE            reduce using rule 202 (base_primary_expression -> case_specification .)


state 164

    (203) base_primary_expression -> cast_specification .

    ASTERISK        reduce using rule 203 (base_primary_expression -> cast_specification .)
    SLASH           reduce using rule 203 (base_primary_expression -> cast_specification .)
    PERCENT         reduce using rule 203 (base_primary_expression -> cast_specification .)
    CONCAT          reduce using rule 203 (base_primary_expression -> cast_specification .)
    PLUS            reduce using rule 203 (base_primary_expression -> cast_specification .)
    MINUS           reduce using rule 203 (base_primary_expression -> cast_specification .)
    AS              reduce using rule 203 (base_primary_expression -> cast_specification .)
    IDENTIFIER      reduce using rule 203 (base_primary_expression -> cast_specification .)
    DIGIT_IDENTIFIER reduce using rule 203 (base_primary_expression -> cast_specification .)
    BACKQUOTED_IDENTIFIER reduce using rule 203 (base_primary_expression -> cast_specification .)
    NON_RESERVED    reduce using rule 203 (base_primary_expression -> cast_specification .)
    COMMA           reduce using rule 203 (base_primary_expression -> cast_specification .)
    FROM            reduce using rule 203 (base_primary_expression -> cast_specification .)
    INTERSECT       reduce using rule 203 (base_primary_expression -> cast_specification .)
    UNION           reduce using rule 203 (base_primary_expression -> cast_specification .)
    EXCEPT          reduce using rule 203 (base_primary_expression -> cast_specification .)
    ORDER           reduce using rule 203 (base_primary_expression -> cast_specification .)
    LIMIT           reduce using rule 203 (base_primary_expression -> cast_specification .)
    FOR             reduce using rule 203 (base_primary_expression -> cast_specification .)
    $end            reduce using rule 203 (base_primary_expression -> cast_specification .)
    RPAREN          reduce using rule 203 (base_primary_expression -> cast_specification .)
    REGEXP          reduce using rule 203 (base_primary_expression -> cast_specification .)
    IS              reduce using rule 203 (base_primary_expression -> cast_specification .)
    EQ              reduce using rule 203 (base_primary_expression -> cast_specification .)
    NE              reduce using rule 203 (base_primary_expression -> cast_specification .)
    LT              reduce using rule 203 (base_primary_expression -> cast_specification .)
    LE              reduce using rule 203 (base_primary_expression -> cast_specification .)
    GT              reduce using rule 203 (base_primary_expression -> cast_specification .)
    GE              reduce using rule 203 (base_primary_expression -> cast_specification .)
    NOT             reduce using rule 203 (base_primary_expression -> cast_specification .)
    BETWEEN         reduce using rule 203 (base_primary_expression -> cast_specification .)
    IN              reduce using rule 203 (base_primary_expression -> cast_specification .)
    LIKE            reduce using rule 203 (base_primary_expression -> cast_specification .)
    OR              reduce using rule 203 (base_primary_expression -> cast_specification .)
    AND             reduce using rule 203 (base_primary_expression -> cast_specification .)
    GROUP           reduce using rule 203 (base_primary_expression -> cast_specification .)
    HAVING          reduce using rule 203 (base_primary_expression -> cast_specification .)
    THEN            reduce using rule 203 (base_primary_expression -> cast_specification .)
    CROSS           reduce using rule 203 (base_primary_expression -> cast_specification .)
    NATURAL         reduce using rule 203 (base_primary_expression -> cast_specification .)
    INNER           reduce using rule 203 (base_primary_expression -> cast_specification .)
    LEFT            reduce using rule 203 (base_primary_expression -> cast_specification .)
    RIGHT           reduce using rule 203 (base_primary_expression -> cast_specification .)
    FULL            reduce using rule 203 (base_primary_expression -> cast_specification .)
    JOIN            reduce using rule 203 (base_primary_expression -> cast_specification .)
    SET             reduce using rule 203 (base_primary_expression -> cast_specification .)
    WHERE           reduce using rule 203 (base_primary_expression -> cast_specification .)
    VALUES          reduce using rule 203 (base_primary_expression -> cast_specification .)
    LPAREN          reduce using rule 203 (base_primary_expression -> cast_specification .)
    SELECT          reduce using rule 203 (base_primary_expression -> cast_specification .)
    ON              reduce using rule 203 (base_primary_expression -> cast_specification .)
    USING           reduce using rule 203 (base_primary_expression -> cast_specification .)
    ASC             reduce using rule 203 (base_primary_expression -> cast_specification .)
    DESC            reduce using rule 203 (base_primary_expression -> cast_specification .)
    NULLS           reduce using rule 203 (base_primary_expression -> cast_specification .)
    WHEN            reduce using rule 203 (base_primary_expression -> cast_specification .)
    END             reduce using rule 203 (base_primary_expression -> cast_specification .)
    ELSE            reduce using rule 203 (base_primary_expression -> cast_specification .)


state 165

    (204) value -> NULL .

    ASTERISK        reduce using rule 204 (value -> NULL .)
    SLASH           reduce using rule 204 (value -> NULL .)
    PERCENT         reduce using rule 204 (value -> NULL .)
    CONCAT          reduce using rule 204 (value -> NULL .)
    PLUS            reduce using rule 204 (value -> NULL .)
    MINUS           reduce using rule 204 (value -> NULL .)
    AS              reduce using rule 204 (value -> NULL .)
    IDENTIFIER      reduce using rule 204 (value -> NULL .)
    DIGIT_IDENTIFIER reduce using rule 204 (value -> NULL .)
    BACKQUOTED_IDENTIFIER reduce using rule 204 (value -> NULL .)
    NON_RESERVED    reduce using rule 204 (value -> NULL .)
    COMMA           reduce using rule 204 (value -> NULL .)
    FROM            reduce using rule 204 (value -> NULL .)
    INTERSECT       reduce using rule 204 (value -> NULL .)
    UNION           reduce using rule 204 (value -> NULL .)
    EXCEPT          reduce using rule 204 (value -> NULL .)
    ORDER           reduce using rule 204 (value -> NULL .)
    LIMIT           reduce using rule 204 (value -> NULL .)
    FOR             reduce using rule 204 (value -> NULL .)
    $end            reduce using rule 204 (value -> NULL .)
    RPAREN          reduce using rule 204 (value -> NULL .)
    REGEXP          reduce using rule 204 (value -> NULL .)
    IS              reduce using rule 204 (value -> NULL .)
    EQ              reduce using rule 204 (value -> NULL .)
    NE              reduce using rule 204 (value -> NULL .)
    LT              reduce using rule 204 (value -> NULL .)
    LE              reduce using rule 204 (value -> NULL .)
    GT              reduce using rule 204 (value -> NULL .)
    GE              reduce using rule 204 (value -> NULL .)
    NOT             reduce using rule 204 (value -> NULL .)
    BETWEEN         reduce using rule 204 (value -> NULL .)
    IN              reduce using rule 204 (value -> NULL .)
    LIKE            reduce using rule 204 (value -> NULL .)
    OR              reduce using rule 204 (value -> NULL .)
    AND             reduce using rule 204 (value -> NULL .)
    GROUP           reduce using rule 204 (value -> NULL .)
    HAVING          reduce using rule 204 (value -> NULL .)
    THEN            reduce using rule 204 (value -> NULL .)
    CROSS           reduce using rule 204 (value -> NULL .)
    NATURAL         reduce using rule 204 (value -> NULL .)
    INNER           reduce using rule 204 (value -> NULL .)
    LEFT            reduce using rule 204 (value -> NULL .)
    RIGHT           reduce using rule 204 (value -> NULL .)
    FULL            reduce using rule 204 (value -> NULL .)
    JOIN            reduce using rule 204 (value -> NULL .)
    SET             reduce using rule 204 (value -> NULL .)
    WHERE           reduce using rule 204 (value -> NULL .)
    VALUES          reduce using rule 204 (value -> NULL .)
    LPAREN          reduce using rule 204 (value -> NULL .)
    SELECT          reduce using rule 204 (value -> NULL .)
    ON              reduce using rule 204 (value -> NULL .)
    USING           reduce using rule 204 (value -> NULL .)
    ASC             reduce using rule 204 (value -> NULL .)
    DESC            reduce using rule 204 (value -> NULL .)
    NULLS           reduce using rule 204 (value -> NULL .)
    WHEN            reduce using rule 204 (value -> NULL .)
    END             reduce using rule 204 (value -> NULL .)
    ELSE            reduce using rule 204 (value -> NULL .)


state 166

    (205) value -> SCONST .

    ASTERISK        reduce using rule 205 (value -> SCONST .)
    SLASH           reduce using rule 205 (value -> SCONST .)
    PERCENT         reduce using rule 205 (value -> SCONST .)
    CONCAT          reduce using rule 205 (value -> SCONST .)
    PLUS            reduce using rule 205 (value -> SCONST .)
    MINUS           reduce using rule 205 (value -> SCONST .)
    AS              reduce using rule 205 (value -> SCONST .)
    IDENTIFIER      reduce using rule 205 (value -> SCONST .)
    DIGIT_IDENTIFIER reduce using rule 205 (value -> SCONST .)
    BACKQUOTED_IDENTIFIER reduce using rule 205 (value -> SCONST .)
    NON_RESERVED    reduce using rule 205 (value -> SCONST .)
    COMMA           reduce using rule 205 (value -> SCONST .)
    FROM            reduce using rule 205 (value -> SCONST .)
    INTERSECT       reduce using rule 205 (value -> SCONST .)
    UNION           reduce using rule 205 (value -> SCONST .)
    EXCEPT          reduce using rule 205 (value -> SCONST .)
    ORDER           reduce using rule 205 (value -> SCONST .)
    LIMIT           reduce using rule 205 (value -> SCONST .)
    FOR             reduce using rule 205 (value -> SCONST .)
    $end            reduce using rule 205 (value -> SCONST .)
    RPAREN          reduce using rule 205 (value -> SCONST .)
    REGEXP          reduce using rule 205 (value -> SCONST .)
    IS              reduce using rule 205 (value -> SCONST .)
    EQ              reduce using rule 205 (value -> SCONST .)
    NE              reduce using rule 205 (value -> SCONST .)
    LT              reduce using rule 205 (value -> SCONST .)
    LE              reduce using rule 205 (value -> SCONST .)
    GT              reduce using rule 205 (value -> SCONST .)
    GE              reduce using rule 205 (value -> SCONST .)
    NOT             reduce using rule 205 (value -> SCONST .)
    BETWEEN         reduce using rule 205 (value -> SCONST .)
    IN              reduce using rule 205 (value -> SCONST .)
    LIKE            reduce using rule 205 (value -> SCONST .)
    OR              reduce using rule 205 (value -> SCONST .)
    AND             reduce using rule 205 (value -> SCONST .)
    GROUP           reduce using rule 205 (value -> SCONST .)
    HAVING          reduce using rule 205 (value -> SCONST .)
    THEN            reduce using rule 205 (value -> SCONST .)
    CROSS           reduce using rule 205 (value -> SCONST .)
    NATURAL         reduce using rule 205 (value -> SCONST .)
    INNER           reduce using rule 205 (value -> SCONST .)
    LEFT            reduce using rule 205 (value -> SCONST .)
    RIGHT           reduce using rule 205 (value -> SCONST .)
    FULL            reduce using rule 205 (value -> SCONST .)
    JOIN            reduce using rule 205 (value -> SCONST .)
    SET             reduce using rule 205 (value -> SCONST .)
    WHERE           reduce using rule 205 (value -> SCONST .)
    VALUES          reduce using rule 205 (value -> SCONST .)
    LPAREN          reduce using rule 205 (value -> SCONST .)
    SELECT          reduce using rule 205 (value -> SCONST .)
    ON              reduce using rule 205 (value -> SCONST .)
    USING           reduce using rule 205 (value -> SCONST .)
    ASC             reduce using rule 205 (value -> SCONST .)
    DESC            reduce using rule 205 (value -> SCONST .)
    NULLS           reduce using rule 205 (value -> SCONST .)
    WHEN            reduce using rule 205 (value -> SCONST .)
    END             reduce using rule 205 (value -> SCONST .)
    ELSE            reduce using rule 205 (value -> SCONST .)


state 167

    (206) value -> number .

    ASTERISK        reduce using rule 206 (value -> number .)
    SLASH           reduce using rule 206 (value -> number .)
    PERCENT         reduce using rule 206 (value -> number .)
    CONCAT          reduce using rule 206 (value -> number .)
    PLUS            reduce using rule 206 (value -> number .)
    MINUS           reduce using rule 206 (value -> number .)
    AS              reduce using rule 206 (value -> number .)
    IDENTIFIER      reduce using rule 206 (value -> number .)
    DIGIT_IDENTIFIER reduce using rule 206 (value -> number .)
    BACKQUOTED_IDENTIFIER reduce using rule 206 (value -> number .)
    NON_RESERVED    reduce using rule 206 (value -> number .)
    COMMA           reduce using rule 206 (value -> number .)
    FROM            reduce using rule 206 (value -> number .)
    INTERSECT       reduce using rule 206 (value -> number .)
    UNION           reduce using rule 206 (value -> number .)
    EXCEPT          reduce using rule 206 (value -> number .)
    ORDER           reduce using rule 206 (value -> number .)
    LIMIT           reduce using rule 206 (value -> number .)
    FOR             reduce using rule 206 (value -> number .)
    $end            reduce using rule 206 (value -> number .)
    RPAREN          reduce using rule 206 (value -> number .)
    REGEXP          reduce using rule 206 (value -> number .)
    IS              reduce using rule 206 (value -> number .)
    EQ              reduce using rule 206 (value -> number .)
    NE              reduce using rule 206 (value -> number .)
    LT              reduce using rule 206 (value -> number .)
    LE              reduce using rule 206 (value -> number .)
    GT              reduce using rule 206 (value -> number .)
    GE              reduce using rule 206 (value -> number .)
    NOT             reduce using rule 206 (value -> number .)
    BETWEEN         reduce using rule 206 (value -> number .)
    IN              reduce using rule 206 (value -> number .)
    LIKE            reduce using rule 206 (value -> number .)
    OR              reduce using rule 206 (value -> number .)
    AND             reduce using rule 206 (value -> number .)
    GROUP           reduce using rule 206 (value -> number .)
    HAVING          reduce using rule 206 (value -> number .)
    THEN            reduce using rule 206 (value -> number .)
    CROSS           reduce using rule 206 (value -> number .)
    NATURAL         reduce using rule 206 (value -> number .)
    INNER           reduce using rule 206 (value -> number .)
    LEFT            reduce using rule 206 (value -> number .)
    RIGHT           reduce using rule 206 (value -> number .)
    FULL            reduce using rule 206 (value -> number .)
    JOIN            reduce using rule 206 (value -> number .)
    SET             reduce using rule 206 (value -> number .)
    WHERE           reduce using rule 206 (value -> number .)
    VALUES          reduce using rule 206 (value -> number .)
    LPAREN          reduce using rule 206 (value -> number .)
    SELECT          reduce using rule 206 (value -> number .)
    ON              reduce using rule 206 (value -> number .)
    USING           reduce using rule 206 (value -> number .)
    ASC             reduce using rule 206 (value -> number .)
    DESC            reduce using rule 206 (value -> number .)
    NULLS           reduce using rule 206 (value -> number .)
    WHEN            reduce using rule 206 (value -> number .)
    END             reduce using rule 206 (value -> number .)
    ELSE            reduce using rule 206 (value -> number .)


state 168

    (207) value -> boolean_value .

    ASTERISK        reduce using rule 207 (value -> boolean_value .)
    SLASH           reduce using rule 207 (value -> boolean_value .)
    PERCENT         reduce using rule 207 (value -> boolean_value .)
    CONCAT          reduce using rule 207 (value -> boolean_value .)
    PLUS            reduce using rule 207 (value -> boolean_value .)
    MINUS           reduce using rule 207 (value -> boolean_value .)
    AS              reduce using rule 207 (value -> boolean_value .)
    IDENTIFIER      reduce using rule 207 (value -> boolean_value .)
    DIGIT_IDENTIFIER reduce using rule 207 (value -> boolean_value .)
    BACKQUOTED_IDENTIFIER reduce using rule 207 (value -> boolean_value .)
    NON_RESERVED    reduce using rule 207 (value -> boolean_value .)
    COMMA           reduce using rule 207 (value -> boolean_value .)
    FROM            reduce using rule 207 (value -> boolean_value .)
    INTERSECT       reduce using rule 207 (value -> boolean_value .)
    UNION           reduce using rule 207 (value -> boolean_value .)
    EXCEPT          reduce using rule 207 (value -> boolean_value .)
    ORDER           reduce using rule 207 (value -> boolean_value .)
    LIMIT           reduce using rule 207 (value -> boolean_value .)
    FOR             reduce using rule 207 (value -> boolean_value .)
    $end            reduce using rule 207 (value -> boolean_value .)
    RPAREN          reduce using rule 207 (value -> boolean_value .)
    REGEXP          reduce using rule 207 (value -> boolean_value .)
    IS              reduce using rule 207 (value -> boolean_value .)
    EQ              reduce using rule 207 (value -> boolean_value .)
    NE              reduce using rule 207 (value -> boolean_value .)
    LT              reduce using rule 207 (value -> boolean_value .)
    LE              reduce using rule 207 (value -> boolean_value .)
    GT              reduce using rule 207 (value -> boolean_value .)
    GE              reduce using rule 207 (value -> boolean_value .)
    NOT             reduce using rule 207 (value -> boolean_value .)
    BETWEEN         reduce using rule 207 (value -> boolean_value .)
    IN              reduce using rule 207 (value -> boolean_value .)
    LIKE            reduce using rule 207 (value -> boolean_value .)
    OR              reduce using rule 207 (value -> boolean_value .)
    AND             reduce using rule 207 (value -> boolean_value .)
    GROUP           reduce using rule 207 (value -> boolean_value .)
    HAVING          reduce using rule 207 (value -> boolean_value .)
    THEN            reduce using rule 207 (value -> boolean_value .)
    CROSS           reduce using rule 207 (value -> boolean_value .)
    NATURAL         reduce using rule 207 (value -> boolean_value .)
    INNER           reduce using rule 207 (value -> boolean_value .)
    LEFT            reduce using rule 207 (value -> boolean_value .)
    RIGHT           reduce using rule 207 (value -> boolean_value .)
    FULL            reduce using rule 207 (value -> boolean_value .)
    JOIN            reduce using rule 207 (value -> boolean_value .)
    SET             reduce using rule 207 (value -> boolean_value .)
    WHERE           reduce using rule 207 (value -> boolean_value .)
    VALUES          reduce using rule 207 (value -> boolean_value .)
    LPAREN          reduce using rule 207 (value -> boolean_value .)
    SELECT          reduce using rule 207 (value -> boolean_value .)
    ON              reduce using rule 207 (value -> boolean_value .)
    USING           reduce using rule 207 (value -> boolean_value .)
    ASC             reduce using rule 207 (value -> boolean_value .)
    DESC            reduce using rule 207 (value -> boolean_value .)
    NULLS           reduce using rule 207 (value -> boolean_value .)
    WHEN            reduce using rule 207 (value -> boolean_value .)
    END             reduce using rule 207 (value -> boolean_value .)
    ELSE            reduce using rule 207 (value -> boolean_value .)


state 169

    (208) value -> QUOTED_IDENTIFIER .

    ASTERISK        reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    SLASH           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    PERCENT         reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    CONCAT          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    PLUS            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    MINUS           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    AS              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    IDENTIFIER      reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    NON_RESERVED    reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    COMMA           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    FROM            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    INTERSECT       reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    UNION           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    EXCEPT          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    ORDER           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    LIMIT           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    FOR             reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    $end            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    RPAREN          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    REGEXP          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    IS              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    EQ              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    NE              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    LT              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    LE              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    GT              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    GE              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    NOT             reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    BETWEEN         reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    IN              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    LIKE            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    OR              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    AND             reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    GROUP           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    HAVING          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    THEN            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    CROSS           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    NATURAL         reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    INNER           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    LEFT            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    RIGHT           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    FULL            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    JOIN            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    SET             reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    WHERE           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    VALUES          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    LPAREN          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    SELECT          reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    ON              reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    USING           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    ASC             reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    DESC            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    NULLS           reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    WHEN            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    END             reduce using rule 208 (value -> QUOTED_IDENTIFIER .)
    ELSE            reduce using rule 208 (value -> QUOTED_IDENTIFIER .)


state 170

    (209) value -> QM .

    ASTERISK        reduce using rule 209 (value -> QM .)
    SLASH           reduce using rule 209 (value -> QM .)
    PERCENT         reduce using rule 209 (value -> QM .)
    CONCAT          reduce using rule 209 (value -> QM .)
    PLUS            reduce using rule 209 (value -> QM .)
    MINUS           reduce using rule 209 (value -> QM .)
    AS              reduce using rule 209 (value -> QM .)
    IDENTIFIER      reduce using rule 209 (value -> QM .)
    DIGIT_IDENTIFIER reduce using rule 209 (value -> QM .)
    BACKQUOTED_IDENTIFIER reduce using rule 209 (value -> QM .)
    NON_RESERVED    reduce using rule 209 (value -> QM .)
    COMMA           reduce using rule 209 (value -> QM .)
    FROM            reduce using rule 209 (value -> QM .)
    INTERSECT       reduce using rule 209 (value -> QM .)
    UNION           reduce using rule 209 (value -> QM .)
    EXCEPT          reduce using rule 209 (value -> QM .)
    ORDER           reduce using rule 209 (value -> QM .)
    LIMIT           reduce using rule 209 (value -> QM .)
    FOR             reduce using rule 209 (value -> QM .)
    $end            reduce using rule 209 (value -> QM .)
    RPAREN          reduce using rule 209 (value -> QM .)
    REGEXP          reduce using rule 209 (value -> QM .)
    IS              reduce using rule 209 (value -> QM .)
    EQ              reduce using rule 209 (value -> QM .)
    NE              reduce using rule 209 (value -> QM .)
    LT              reduce using rule 209 (value -> QM .)
    LE              reduce using rule 209 (value -> QM .)
    GT              reduce using rule 209 (value -> QM .)
    GE              reduce using rule 209 (value -> QM .)
    NOT             reduce using rule 209 (value -> QM .)
    BETWEEN         reduce using rule 209 (value -> QM .)
    IN              reduce using rule 209 (value -> QM .)
    LIKE            reduce using rule 209 (value -> QM .)
    OR              reduce using rule 209 (value -> QM .)
    AND             reduce using rule 209 (value -> QM .)
    GROUP           reduce using rule 209 (value -> QM .)
    HAVING          reduce using rule 209 (value -> QM .)
    THEN            reduce using rule 209 (value -> QM .)
    CROSS           reduce using rule 209 (value -> QM .)
    NATURAL         reduce using rule 209 (value -> QM .)
    INNER           reduce using rule 209 (value -> QM .)
    LEFT            reduce using rule 209 (value -> QM .)
    RIGHT           reduce using rule 209 (value -> QM .)
    FULL            reduce using rule 209 (value -> QM .)
    JOIN            reduce using rule 209 (value -> QM .)
    SET             reduce using rule 209 (value -> QM .)
    WHERE           reduce using rule 209 (value -> QM .)
    VALUES          reduce using rule 209 (value -> QM .)
    LPAREN          reduce using rule 209 (value -> QM .)
    SELECT          reduce using rule 209 (value -> QM .)
    ON              reduce using rule 209 (value -> QM .)
    USING           reduce using rule 209 (value -> QM .)
    ASC             reduce using rule 209 (value -> QM .)
    DESC            reduce using rule 209 (value -> QM .)
    NULLS           reduce using rule 209 (value -> QM .)
    WHEN            reduce using rule 209 (value -> QM .)
    END             reduce using rule 209 (value -> QM .)
    ELSE            reduce using rule 209 (value -> QM .)


state 171

    (236) date_time -> CURRENT_DATE .

    ASTERISK        reduce using rule 236 (date_time -> CURRENT_DATE .)
    SLASH           reduce using rule 236 (date_time -> CURRENT_DATE .)
    PERCENT         reduce using rule 236 (date_time -> CURRENT_DATE .)
    CONCAT          reduce using rule 236 (date_time -> CURRENT_DATE .)
    PLUS            reduce using rule 236 (date_time -> CURRENT_DATE .)
    MINUS           reduce using rule 236 (date_time -> CURRENT_DATE .)
    AS              reduce using rule 236 (date_time -> CURRENT_DATE .)
    IDENTIFIER      reduce using rule 236 (date_time -> CURRENT_DATE .)
    DIGIT_IDENTIFIER reduce using rule 236 (date_time -> CURRENT_DATE .)
    BACKQUOTED_IDENTIFIER reduce using rule 236 (date_time -> CURRENT_DATE .)
    NON_RESERVED    reduce using rule 236 (date_time -> CURRENT_DATE .)
    COMMA           reduce using rule 236 (date_time -> CURRENT_DATE .)
    FROM            reduce using rule 236 (date_time -> CURRENT_DATE .)
    INTERSECT       reduce using rule 236 (date_time -> CURRENT_DATE .)
    UNION           reduce using rule 236 (date_time -> CURRENT_DATE .)
    EXCEPT          reduce using rule 236 (date_time -> CURRENT_DATE .)
    ORDER           reduce using rule 236 (date_time -> CURRENT_DATE .)
    LIMIT           reduce using rule 236 (date_time -> CURRENT_DATE .)
    FOR             reduce using rule 236 (date_time -> CURRENT_DATE .)
    $end            reduce using rule 236 (date_time -> CURRENT_DATE .)
    RPAREN          reduce using rule 236 (date_time -> CURRENT_DATE .)
    REGEXP          reduce using rule 236 (date_time -> CURRENT_DATE .)
    IS              reduce using rule 236 (date_time -> CURRENT_DATE .)
    EQ              reduce using rule 236 (date_time -> CURRENT_DATE .)
    NE              reduce using rule 236 (date_time -> CURRENT_DATE .)
    LT              reduce using rule 236 (date_time -> CURRENT_DATE .)
    LE              reduce using rule 236 (date_time -> CURRENT_DATE .)
    GT              reduce using rule 236 (date_time -> CURRENT_DATE .)
    GE              reduce using rule 236 (date_time -> CURRENT_DATE .)
    NOT             reduce using rule 236 (date_time -> CURRENT_DATE .)
    BETWEEN         reduce using rule 236 (date_time -> CURRENT_DATE .)
    IN              reduce using rule 236 (date_time -> CURRENT_DATE .)
    LIKE            reduce using rule 236 (date_time -> CURRENT_DATE .)
    OR              reduce using rule 236 (date_time -> CURRENT_DATE .)
    AND             reduce using rule 236 (date_time -> CURRENT_DATE .)
    GROUP           reduce using rule 236 (date_time -> CURRENT_DATE .)
    HAVING          reduce using rule 236 (date_time -> CURRENT_DATE .)
    THEN            reduce using rule 236 (date_time -> CURRENT_DATE .)
    CROSS           reduce using rule 236 (date_time -> CURRENT_DATE .)
    NATURAL         reduce using rule 236 (date_time -> CURRENT_DATE .)
    INNER           reduce using rule 236 (date_time -> CURRENT_DATE .)
    LEFT            reduce using rule 236 (date_time -> CURRENT_DATE .)
    RIGHT           reduce using rule 236 (date_time -> CURRENT_DATE .)
    FULL            reduce using rule 236 (date_time -> CURRENT_DATE .)
    JOIN            reduce using rule 236 (date_time -> CURRENT_DATE .)
    SET             reduce using rule 236 (date_time -> CURRENT_DATE .)
    WHERE           reduce using rule 236 (date_time -> CURRENT_DATE .)
    VALUES          reduce using rule 236 (date_time -> CURRENT_DATE .)
    LPAREN          reduce using rule 236 (date_time -> CURRENT_DATE .)
    SELECT          reduce using rule 236 (date_time -> CURRENT_DATE .)
    ON              reduce using rule 236 (date_time -> CURRENT_DATE .)
    USING           reduce using rule 236 (date_time -> CURRENT_DATE .)
    ASC             reduce using rule 236 (date_time -> CURRENT_DATE .)
    DESC            reduce using rule 236 (date_time -> CURRENT_DATE .)
    NULLS           reduce using rule 236 (date_time -> CURRENT_DATE .)
    WHEN            reduce using rule 236 (date_time -> CURRENT_DATE .)
    END             reduce using rule 236 (date_time -> CURRENT_DATE .)
    ELSE            reduce using rule 236 (date_time -> CURRENT_DATE .)


state 172

    (237) date_time -> CURRENT_TIME . integer_param_opt
    (257) integer_param_opt -> . LPAREN INTEGER RPAREN
    (258) integer_param_opt -> . LPAREN RPAREN
    (259) integer_param_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 243
    ASTERISK        reduce using rule 271 (empty -> .)
    SLASH           reduce using rule 271 (empty -> .)
    PERCENT         reduce using rule 271 (empty -> .)
    CONCAT          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    AS              reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    FROM            reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    REGEXP          reduce using rule 271 (empty -> .)
    IS              reduce using rule 271 (empty -> .)
    EQ              reduce using rule 271 (empty -> .)
    NE              reduce using rule 271 (empty -> .)
    LT              reduce using rule 271 (empty -> .)
    LE              reduce using rule 271 (empty -> .)
    GT              reduce using rule 271 (empty -> .)
    GE              reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    BETWEEN         reduce using rule 271 (empty -> .)
    IN              reduce using rule 271 (empty -> .)
    LIKE            reduce using rule 271 (empty -> .)
    OR              reduce using rule 271 (empty -> .)
    AND             reduce using rule 271 (empty -> .)
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    THEN            reduce using rule 271 (empty -> .)
    CROSS           reduce using rule 271 (empty -> .)
    NATURAL         reduce using rule 271 (empty -> .)
    INNER           reduce using rule 271 (empty -> .)
    LEFT            reduce using rule 271 (empty -> .)
    RIGHT           reduce using rule 271 (empty -> .)
    FULL            reduce using rule 271 (empty -> .)
    JOIN            reduce using rule 271 (empty -> .)
    SET             reduce using rule 271 (empty -> .)
    WHERE           reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    ON              reduce using rule 271 (empty -> .)
    USING           reduce using rule 271 (empty -> .)
    ASC             reduce using rule 271 (empty -> .)
    DESC            reduce using rule 271 (empty -> .)
    NULLS           reduce using rule 271 (empty -> .)
    WHEN            reduce using rule 271 (empty -> .)
    END             reduce using rule 271 (empty -> .)
    ELSE            reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    integer_param_opt              shift and go to state 242
    empty                          shift and go to state 244

state 173

    (238) date_time -> CURRENT_TIMESTAMP . integer_param_opt
    (257) integer_param_opt -> . LPAREN INTEGER RPAREN
    (258) integer_param_opt -> . LPAREN RPAREN
    (259) integer_param_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 243
    ASTERISK        reduce using rule 271 (empty -> .)
    SLASH           reduce using rule 271 (empty -> .)
    PERCENT         reduce using rule 271 (empty -> .)
    CONCAT          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    AS              reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    FROM            reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    REGEXP          reduce using rule 271 (empty -> .)
    IS              reduce using rule 271 (empty -> .)
    EQ              reduce using rule 271 (empty -> .)
    NE              reduce using rule 271 (empty -> .)
    LT              reduce using rule 271 (empty -> .)
    LE              reduce using rule 271 (empty -> .)
    GT              reduce using rule 271 (empty -> .)
    GE              reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    BETWEEN         reduce using rule 271 (empty -> .)
    IN              reduce using rule 271 (empty -> .)
    LIKE            reduce using rule 271 (empty -> .)
    OR              reduce using rule 271 (empty -> .)
    AND             reduce using rule 271 (empty -> .)
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    THEN            reduce using rule 271 (empty -> .)
    CROSS           reduce using rule 271 (empty -> .)
    NATURAL         reduce using rule 271 (empty -> .)
    INNER           reduce using rule 271 (empty -> .)
    LEFT            reduce using rule 271 (empty -> .)
    RIGHT           reduce using rule 271 (empty -> .)
    FULL            reduce using rule 271 (empty -> .)
    JOIN            reduce using rule 271 (empty -> .)
    SET             reduce using rule 271 (empty -> .)
    WHERE           reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    ON              reduce using rule 271 (empty -> .)
    USING           reduce using rule 271 (empty -> .)
    ASC             reduce using rule 271 (empty -> .)
    DESC            reduce using rule 271 (empty -> .)
    NULLS           reduce using rule 271 (empty -> .)
    WHEN            reduce using rule 271 (empty -> .)
    END             reduce using rule 271 (empty -> .)
    ELSE            reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    integer_param_opt              shift and go to state 245
    empty                          shift and go to state 244

state 174

    (239) date_time -> LOCALTIME . integer_param_opt
    (257) integer_param_opt -> . LPAREN INTEGER RPAREN
    (258) integer_param_opt -> . LPAREN RPAREN
    (259) integer_param_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 243
    ASTERISK        reduce using rule 271 (empty -> .)
    SLASH           reduce using rule 271 (empty -> .)
    PERCENT         reduce using rule 271 (empty -> .)
    CONCAT          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    AS              reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    FROM            reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    REGEXP          reduce using rule 271 (empty -> .)
    IS              reduce using rule 271 (empty -> .)
    EQ              reduce using rule 271 (empty -> .)
    NE              reduce using rule 271 (empty -> .)
    LT              reduce using rule 271 (empty -> .)
    LE              reduce using rule 271 (empty -> .)
    GT              reduce using rule 271 (empty -> .)
    GE              reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    BETWEEN         reduce using rule 271 (empty -> .)
    IN              reduce using rule 271 (empty -> .)
    LIKE            reduce using rule 271 (empty -> .)
    OR              reduce using rule 271 (empty -> .)
    AND             reduce using rule 271 (empty -> .)
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    THEN            reduce using rule 271 (empty -> .)
    CROSS           reduce using rule 271 (empty -> .)
    NATURAL         reduce using rule 271 (empty -> .)
    INNER           reduce using rule 271 (empty -> .)
    LEFT            reduce using rule 271 (empty -> .)
    RIGHT           reduce using rule 271 (empty -> .)
    FULL            reduce using rule 271 (empty -> .)
    JOIN            reduce using rule 271 (empty -> .)
    SET             reduce using rule 271 (empty -> .)
    WHERE           reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    ON              reduce using rule 271 (empty -> .)
    USING           reduce using rule 271 (empty -> .)
    ASC             reduce using rule 271 (empty -> .)
    DESC            reduce using rule 271 (empty -> .)
    NULLS           reduce using rule 271 (empty -> .)
    WHEN            reduce using rule 271 (empty -> .)
    END             reduce using rule 271 (empty -> .)
    ELSE            reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    integer_param_opt              shift and go to state 246
    empty                          shift and go to state 244

state 175

    (240) date_time -> LOCALTIMESTAMP . integer_param_opt
    (257) integer_param_opt -> . LPAREN INTEGER RPAREN
    (258) integer_param_opt -> . LPAREN RPAREN
    (259) integer_param_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 243
    ASTERISK        reduce using rule 271 (empty -> .)
    SLASH           reduce using rule 271 (empty -> .)
    PERCENT         reduce using rule 271 (empty -> .)
    CONCAT          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    AS              reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    FROM            reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    REGEXP          reduce using rule 271 (empty -> .)
    IS              reduce using rule 271 (empty -> .)
    EQ              reduce using rule 271 (empty -> .)
    NE              reduce using rule 271 (empty -> .)
    LT              reduce using rule 271 (empty -> .)
    LE              reduce using rule 271 (empty -> .)
    GT              reduce using rule 271 (empty -> .)
    GE              reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    BETWEEN         reduce using rule 271 (empty -> .)
    IN              reduce using rule 271 (empty -> .)
    LIKE            reduce using rule 271 (empty -> .)
    OR              reduce using rule 271 (empty -> .)
    AND             reduce using rule 271 (empty -> .)
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    THEN            reduce using rule 271 (empty -> .)
    CROSS           reduce using rule 271 (empty -> .)
    NATURAL         reduce using rule 271 (empty -> .)
    INNER           reduce using rule 271 (empty -> .)
    LEFT            reduce using rule 271 (empty -> .)
    RIGHT           reduce using rule 271 (empty -> .)
    FULL            reduce using rule 271 (empty -> .)
    JOIN            reduce using rule 271 (empty -> .)
    SET             reduce using rule 271 (empty -> .)
    WHERE           reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)
    ON              reduce using rule 271 (empty -> .)
    USING           reduce using rule 271 (empty -> .)
    ASC             reduce using rule 271 (empty -> .)
    DESC            reduce using rule 271 (empty -> .)
    NULLS           reduce using rule 271 (empty -> .)
    WHEN            reduce using rule 271 (empty -> .)
    END             reduce using rule 271 (empty -> .)
    ELSE            reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    integer_param_opt              shift and go to state 247
    empty                          shift and go to state 244

state 176

    (216) case_specification -> simple_case .

    ASTERISK        reduce using rule 216 (case_specification -> simple_case .)
    SLASH           reduce using rule 216 (case_specification -> simple_case .)
    PERCENT         reduce using rule 216 (case_specification -> simple_case .)
    CONCAT          reduce using rule 216 (case_specification -> simple_case .)
    PLUS            reduce using rule 216 (case_specification -> simple_case .)
    MINUS           reduce using rule 216 (case_specification -> simple_case .)
    AS              reduce using rule 216 (case_specification -> simple_case .)
    IDENTIFIER      reduce using rule 216 (case_specification -> simple_case .)
    DIGIT_IDENTIFIER reduce using rule 216 (case_specification -> simple_case .)
    BACKQUOTED_IDENTIFIER reduce using rule 216 (case_specification -> simple_case .)
    NON_RESERVED    reduce using rule 216 (case_specification -> simple_case .)
    COMMA           reduce using rule 216 (case_specification -> simple_case .)
    FROM            reduce using rule 216 (case_specification -> simple_case .)
    INTERSECT       reduce using rule 216 (case_specification -> simple_case .)
    UNION           reduce using rule 216 (case_specification -> simple_case .)
    EXCEPT          reduce using rule 216 (case_specification -> simple_case .)
    ORDER           reduce using rule 216 (case_specification -> simple_case .)
    LIMIT           reduce using rule 216 (case_specification -> simple_case .)
    FOR             reduce using rule 216 (case_specification -> simple_case .)
    $end            reduce using rule 216 (case_specification -> simple_case .)
    RPAREN          reduce using rule 216 (case_specification -> simple_case .)
    REGEXP          reduce using rule 216 (case_specification -> simple_case .)
    IS              reduce using rule 216 (case_specification -> simple_case .)
    EQ              reduce using rule 216 (case_specification -> simple_case .)
    NE              reduce using rule 216 (case_specification -> simple_case .)
    LT              reduce using rule 216 (case_specification -> simple_case .)
    LE              reduce using rule 216 (case_specification -> simple_case .)
    GT              reduce using rule 216 (case_specification -> simple_case .)
    GE              reduce using rule 216 (case_specification -> simple_case .)
    NOT             reduce using rule 216 (case_specification -> simple_case .)
    BETWEEN         reduce using rule 216 (case_specification -> simple_case .)
    IN              reduce using rule 216 (case_specification -> simple_case .)
    LIKE            reduce using rule 216 (case_specification -> simple_case .)
    OR              reduce using rule 216 (case_specification -> simple_case .)
    AND             reduce using rule 216 (case_specification -> simple_case .)
    GROUP           reduce using rule 216 (case_specification -> simple_case .)
    HAVING          reduce using rule 216 (case_specification -> simple_case .)
    THEN            reduce using rule 216 (case_specification -> simple_case .)
    CROSS           reduce using rule 216 (case_specification -> simple_case .)
    NATURAL         reduce using rule 216 (case_specification -> simple_case .)
    INNER           reduce using rule 216 (case_specification -> simple_case .)
    LEFT            reduce using rule 216 (case_specification -> simple_case .)
    RIGHT           reduce using rule 216 (case_specification -> simple_case .)
    FULL            reduce using rule 216 (case_specification -> simple_case .)
    JOIN            reduce using rule 216 (case_specification -> simple_case .)
    SET             reduce using rule 216 (case_specification -> simple_case .)
    WHERE           reduce using rule 216 (case_specification -> simple_case .)
    VALUES          reduce using rule 216 (case_specification -> simple_case .)
    LPAREN          reduce using rule 216 (case_specification -> simple_case .)
    SELECT          reduce using rule 216 (case_specification -> simple_case .)
    ON              reduce using rule 216 (case_specification -> simple_case .)
    USING           reduce using rule 216 (case_specification -> simple_case .)
    ASC             reduce using rule 216 (case_specification -> simple_case .)
    DESC            reduce using rule 216 (case_specification -> simple_case .)
    NULLS           reduce using rule 216 (case_specification -> simple_case .)
    WHEN            reduce using rule 216 (case_specification -> simple_case .)
    END             reduce using rule 216 (case_specification -> simple_case .)
    ELSE            reduce using rule 216 (case_specification -> simple_case .)


state 177

    (217) case_specification -> searched_case .

    ASTERISK        reduce using rule 217 (case_specification -> searched_case .)
    SLASH           reduce using rule 217 (case_specification -> searched_case .)
    PERCENT         reduce using rule 217 (case_specification -> searched_case .)
    CONCAT          reduce using rule 217 (case_specification -> searched_case .)
    PLUS            reduce using rule 217 (case_specification -> searched_case .)
    MINUS           reduce using rule 217 (case_specification -> searched_case .)
    AS              reduce using rule 217 (case_specification -> searched_case .)
    IDENTIFIER      reduce using rule 217 (case_specification -> searched_case .)
    DIGIT_IDENTIFIER reduce using rule 217 (case_specification -> searched_case .)
    BACKQUOTED_IDENTIFIER reduce using rule 217 (case_specification -> searched_case .)
    NON_RESERVED    reduce using rule 217 (case_specification -> searched_case .)
    COMMA           reduce using rule 217 (case_specification -> searched_case .)
    FROM            reduce using rule 217 (case_specification -> searched_case .)
    INTERSECT       reduce using rule 217 (case_specification -> searched_case .)
    UNION           reduce using rule 217 (case_specification -> searched_case .)
    EXCEPT          reduce using rule 217 (case_specification -> searched_case .)
    ORDER           reduce using rule 217 (case_specification -> searched_case .)
    LIMIT           reduce using rule 217 (case_specification -> searched_case .)
    FOR             reduce using rule 217 (case_specification -> searched_case .)
    $end            reduce using rule 217 (case_specification -> searched_case .)
    RPAREN          reduce using rule 217 (case_specification -> searched_case .)
    REGEXP          reduce using rule 217 (case_specification -> searched_case .)
    IS              reduce using rule 217 (case_specification -> searched_case .)
    EQ              reduce using rule 217 (case_specification -> searched_case .)
    NE              reduce using rule 217 (case_specification -> searched_case .)
    LT              reduce using rule 217 (case_specification -> searched_case .)
    LE              reduce using rule 217 (case_specification -> searched_case .)
    GT              reduce using rule 217 (case_specification -> searched_case .)
    GE              reduce using rule 217 (case_specification -> searched_case .)
    NOT             reduce using rule 217 (case_specification -> searched_case .)
    BETWEEN         reduce using rule 217 (case_specification -> searched_case .)
    IN              reduce using rule 217 (case_specification -> searched_case .)
    LIKE            reduce using rule 217 (case_specification -> searched_case .)
    OR              reduce using rule 217 (case_specification -> searched_case .)
    AND             reduce using rule 217 (case_specification -> searched_case .)
    GROUP           reduce using rule 217 (case_specification -> searched_case .)
    HAVING          reduce using rule 217 (case_specification -> searched_case .)
    THEN            reduce using rule 217 (case_specification -> searched_case .)
    CROSS           reduce using rule 217 (case_specification -> searched_case .)
    NATURAL         reduce using rule 217 (case_specification -> searched_case .)
    INNER           reduce using rule 217 (case_specification -> searched_case .)
    LEFT            reduce using rule 217 (case_specification -> searched_case .)
    RIGHT           reduce using rule 217 (case_specification -> searched_case .)
    FULL            reduce using rule 217 (case_specification -> searched_case .)
    JOIN            reduce using rule 217 (case_specification -> searched_case .)
    SET             reduce using rule 217 (case_specification -> searched_case .)
    WHERE           reduce using rule 217 (case_specification -> searched_case .)
    VALUES          reduce using rule 217 (case_specification -> searched_case .)
    LPAREN          reduce using rule 217 (case_specification -> searched_case .)
    SELECT          reduce using rule 217 (case_specification -> searched_case .)
    ON              reduce using rule 217 (case_specification -> searched_case .)
    USING           reduce using rule 217 (case_specification -> searched_case .)
    ASC             reduce using rule 217 (case_specification -> searched_case .)
    DESC            reduce using rule 217 (case_specification -> searched_case .)
    NULLS           reduce using rule 217 (case_specification -> searched_case .)
    WHEN            reduce using rule 217 (case_specification -> searched_case .)
    END             reduce using rule 217 (case_specification -> searched_case .)
    ELSE            reduce using rule 217 (case_specification -> searched_case .)


state 178

    (220) cast_specification -> CAST . LPAREN value_expression AS data_type RPAREN

    LPAREN          shift and go to state 248


state 179

    (269) number -> DECIMAL .

    ASTERISK        reduce using rule 269 (number -> DECIMAL .)
    SLASH           reduce using rule 269 (number -> DECIMAL .)
    PERCENT         reduce using rule 269 (number -> DECIMAL .)
    CONCAT          reduce using rule 269 (number -> DECIMAL .)
    PLUS            reduce using rule 269 (number -> DECIMAL .)
    MINUS           reduce using rule 269 (number -> DECIMAL .)
    AS              reduce using rule 269 (number -> DECIMAL .)
    IDENTIFIER      reduce using rule 269 (number -> DECIMAL .)
    DIGIT_IDENTIFIER reduce using rule 269 (number -> DECIMAL .)
    BACKQUOTED_IDENTIFIER reduce using rule 269 (number -> DECIMAL .)
    NON_RESERVED    reduce using rule 269 (number -> DECIMAL .)
    COMMA           reduce using rule 269 (number -> DECIMAL .)
    FROM            reduce using rule 269 (number -> DECIMAL .)
    INTERSECT       reduce using rule 269 (number -> DECIMAL .)
    UNION           reduce using rule 269 (number -> DECIMAL .)
    EXCEPT          reduce using rule 269 (number -> DECIMAL .)
    ORDER           reduce using rule 269 (number -> DECIMAL .)
    LIMIT           reduce using rule 269 (number -> DECIMAL .)
    FOR             reduce using rule 269 (number -> DECIMAL .)
    $end            reduce using rule 269 (number -> DECIMAL .)
    RPAREN          reduce using rule 269 (number -> DECIMAL .)
    REGEXP          reduce using rule 269 (number -> DECIMAL .)
    IS              reduce using rule 269 (number -> DECIMAL .)
    EQ              reduce using rule 269 (number -> DECIMAL .)
    NE              reduce using rule 269 (number -> DECIMAL .)
    LT              reduce using rule 269 (number -> DECIMAL .)
    LE              reduce using rule 269 (number -> DECIMAL .)
    GT              reduce using rule 269 (number -> DECIMAL .)
    GE              reduce using rule 269 (number -> DECIMAL .)
    NOT             reduce using rule 269 (number -> DECIMAL .)
    BETWEEN         reduce using rule 269 (number -> DECIMAL .)
    IN              reduce using rule 269 (number -> DECIMAL .)
    LIKE            reduce using rule 269 (number -> DECIMAL .)
    OR              reduce using rule 269 (number -> DECIMAL .)
    AND             reduce using rule 269 (number -> DECIMAL .)
    GROUP           reduce using rule 269 (number -> DECIMAL .)
    HAVING          reduce using rule 269 (number -> DECIMAL .)
    THEN            reduce using rule 269 (number -> DECIMAL .)
    CROSS           reduce using rule 269 (number -> DECIMAL .)
    NATURAL         reduce using rule 269 (number -> DECIMAL .)
    INNER           reduce using rule 269 (number -> DECIMAL .)
    LEFT            reduce using rule 269 (number -> DECIMAL .)
    RIGHT           reduce using rule 269 (number -> DECIMAL .)
    FULL            reduce using rule 269 (number -> DECIMAL .)
    JOIN            reduce using rule 269 (number -> DECIMAL .)
    SET             reduce using rule 269 (number -> DECIMAL .)
    WHERE           reduce using rule 269 (number -> DECIMAL .)
    VALUES          reduce using rule 269 (number -> DECIMAL .)
    LPAREN          reduce using rule 269 (number -> DECIMAL .)
    SELECT          reduce using rule 269 (number -> DECIMAL .)
    ON              reduce using rule 269 (number -> DECIMAL .)
    USING           reduce using rule 269 (number -> DECIMAL .)
    ASC             reduce using rule 269 (number -> DECIMAL .)
    DESC            reduce using rule 269 (number -> DECIMAL .)
    NULLS           reduce using rule 269 (number -> DECIMAL .)
    WHEN            reduce using rule 269 (number -> DECIMAL .)
    END             reduce using rule 269 (number -> DECIMAL .)
    ELSE            reduce using rule 269 (number -> DECIMAL .)


state 180

    (270) number -> INTEGER .

    ASTERISK        reduce using rule 270 (number -> INTEGER .)
    SLASH           reduce using rule 270 (number -> INTEGER .)
    PERCENT         reduce using rule 270 (number -> INTEGER .)
    CONCAT          reduce using rule 270 (number -> INTEGER .)
    PLUS            reduce using rule 270 (number -> INTEGER .)
    MINUS           reduce using rule 270 (number -> INTEGER .)
    AS              reduce using rule 270 (number -> INTEGER .)
    IDENTIFIER      reduce using rule 270 (number -> INTEGER .)
    DIGIT_IDENTIFIER reduce using rule 270 (number -> INTEGER .)
    BACKQUOTED_IDENTIFIER reduce using rule 270 (number -> INTEGER .)
    NON_RESERVED    reduce using rule 270 (number -> INTEGER .)
    COMMA           reduce using rule 270 (number -> INTEGER .)
    FROM            reduce using rule 270 (number -> INTEGER .)
    INTERSECT       reduce using rule 270 (number -> INTEGER .)
    UNION           reduce using rule 270 (number -> INTEGER .)
    EXCEPT          reduce using rule 270 (number -> INTEGER .)
    ORDER           reduce using rule 270 (number -> INTEGER .)
    LIMIT           reduce using rule 270 (number -> INTEGER .)
    FOR             reduce using rule 270 (number -> INTEGER .)
    $end            reduce using rule 270 (number -> INTEGER .)
    RPAREN          reduce using rule 270 (number -> INTEGER .)
    REGEXP          reduce using rule 270 (number -> INTEGER .)
    IS              reduce using rule 270 (number -> INTEGER .)
    EQ              reduce using rule 270 (number -> INTEGER .)
    NE              reduce using rule 270 (number -> INTEGER .)
    LT              reduce using rule 270 (number -> INTEGER .)
    LE              reduce using rule 270 (number -> INTEGER .)
    GT              reduce using rule 270 (number -> INTEGER .)
    GE              reduce using rule 270 (number -> INTEGER .)
    NOT             reduce using rule 270 (number -> INTEGER .)
    BETWEEN         reduce using rule 270 (number -> INTEGER .)
    IN              reduce using rule 270 (number -> INTEGER .)
    LIKE            reduce using rule 270 (number -> INTEGER .)
    OR              reduce using rule 270 (number -> INTEGER .)
    AND             reduce using rule 270 (number -> INTEGER .)
    GROUP           reduce using rule 270 (number -> INTEGER .)
    HAVING          reduce using rule 270 (number -> INTEGER .)
    THEN            reduce using rule 270 (number -> INTEGER .)
    CROSS           reduce using rule 270 (number -> INTEGER .)
    NATURAL         reduce using rule 270 (number -> INTEGER .)
    INNER           reduce using rule 270 (number -> INTEGER .)
    LEFT            reduce using rule 270 (number -> INTEGER .)
    RIGHT           reduce using rule 270 (number -> INTEGER .)
    FULL            reduce using rule 270 (number -> INTEGER .)
    JOIN            reduce using rule 270 (number -> INTEGER .)
    SET             reduce using rule 270 (number -> INTEGER .)
    WHERE           reduce using rule 270 (number -> INTEGER .)
    VALUES          reduce using rule 270 (number -> INTEGER .)
    LPAREN          reduce using rule 270 (number -> INTEGER .)
    SELECT          reduce using rule 270 (number -> INTEGER .)
    ON              reduce using rule 270 (number -> INTEGER .)
    USING           reduce using rule 270 (number -> INTEGER .)
    ASC             reduce using rule 270 (number -> INTEGER .)
    DESC            reduce using rule 270 (number -> INTEGER .)
    NULLS           reduce using rule 270 (number -> INTEGER .)
    WHEN            reduce using rule 270 (number -> INTEGER .)
    END             reduce using rule 270 (number -> INTEGER .)
    ELSE            reduce using rule 270 (number -> INTEGER .)


state 181

    (251) boolean_value -> TRUE .

    ASTERISK        reduce using rule 251 (boolean_value -> TRUE .)
    SLASH           reduce using rule 251 (boolean_value -> TRUE .)
    PERCENT         reduce using rule 251 (boolean_value -> TRUE .)
    CONCAT          reduce using rule 251 (boolean_value -> TRUE .)
    PLUS            reduce using rule 251 (boolean_value -> TRUE .)
    MINUS           reduce using rule 251 (boolean_value -> TRUE .)
    AS              reduce using rule 251 (boolean_value -> TRUE .)
    IDENTIFIER      reduce using rule 251 (boolean_value -> TRUE .)
    DIGIT_IDENTIFIER reduce using rule 251 (boolean_value -> TRUE .)
    BACKQUOTED_IDENTIFIER reduce using rule 251 (boolean_value -> TRUE .)
    NON_RESERVED    reduce using rule 251 (boolean_value -> TRUE .)
    COMMA           reduce using rule 251 (boolean_value -> TRUE .)
    FROM            reduce using rule 251 (boolean_value -> TRUE .)
    INTERSECT       reduce using rule 251 (boolean_value -> TRUE .)
    UNION           reduce using rule 251 (boolean_value -> TRUE .)
    EXCEPT          reduce using rule 251 (boolean_value -> TRUE .)
    ORDER           reduce using rule 251 (boolean_value -> TRUE .)
    LIMIT           reduce using rule 251 (boolean_value -> TRUE .)
    FOR             reduce using rule 251 (boolean_value -> TRUE .)
    $end            reduce using rule 251 (boolean_value -> TRUE .)
    RPAREN          reduce using rule 251 (boolean_value -> TRUE .)
    REGEXP          reduce using rule 251 (boolean_value -> TRUE .)
    IS              reduce using rule 251 (boolean_value -> TRUE .)
    EQ              reduce using rule 251 (boolean_value -> TRUE .)
    NE              reduce using rule 251 (boolean_value -> TRUE .)
    LT              reduce using rule 251 (boolean_value -> TRUE .)
    LE              reduce using rule 251 (boolean_value -> TRUE .)
    GT              reduce using rule 251 (boolean_value -> TRUE .)
    GE              reduce using rule 251 (boolean_value -> TRUE .)
    NOT             reduce using rule 251 (boolean_value -> TRUE .)
    BETWEEN         reduce using rule 251 (boolean_value -> TRUE .)
    IN              reduce using rule 251 (boolean_value -> TRUE .)
    LIKE            reduce using rule 251 (boolean_value -> TRUE .)
    OR              reduce using rule 251 (boolean_value -> TRUE .)
    AND             reduce using rule 251 (boolean_value -> TRUE .)
    GROUP           reduce using rule 251 (boolean_value -> TRUE .)
    HAVING          reduce using rule 251 (boolean_value -> TRUE .)
    THEN            reduce using rule 251 (boolean_value -> TRUE .)
    CROSS           reduce using rule 251 (boolean_value -> TRUE .)
    NATURAL         reduce using rule 251 (boolean_value -> TRUE .)
    INNER           reduce using rule 251 (boolean_value -> TRUE .)
    LEFT            reduce using rule 251 (boolean_value -> TRUE .)
    RIGHT           reduce using rule 251 (boolean_value -> TRUE .)
    FULL            reduce using rule 251 (boolean_value -> TRUE .)
    JOIN            reduce using rule 251 (boolean_value -> TRUE .)
    SET             reduce using rule 251 (boolean_value -> TRUE .)
    WHERE           reduce using rule 251 (boolean_value -> TRUE .)
    VALUES          reduce using rule 251 (boolean_value -> TRUE .)
    LPAREN          reduce using rule 251 (boolean_value -> TRUE .)
    SELECT          reduce using rule 251 (boolean_value -> TRUE .)
    ON              reduce using rule 251 (boolean_value -> TRUE .)
    USING           reduce using rule 251 (boolean_value -> TRUE .)
    ASC             reduce using rule 251 (boolean_value -> TRUE .)
    DESC            reduce using rule 251 (boolean_value -> TRUE .)
    NULLS           reduce using rule 251 (boolean_value -> TRUE .)
    WHEN            reduce using rule 251 (boolean_value -> TRUE .)
    END             reduce using rule 251 (boolean_value -> TRUE .)
    ELSE            reduce using rule 251 (boolean_value -> TRUE .)


state 182

    (252) boolean_value -> FALSE .

    ASTERISK        reduce using rule 252 (boolean_value -> FALSE .)
    SLASH           reduce using rule 252 (boolean_value -> FALSE .)
    PERCENT         reduce using rule 252 (boolean_value -> FALSE .)
    CONCAT          reduce using rule 252 (boolean_value -> FALSE .)
    PLUS            reduce using rule 252 (boolean_value -> FALSE .)
    MINUS           reduce using rule 252 (boolean_value -> FALSE .)
    AS              reduce using rule 252 (boolean_value -> FALSE .)
    IDENTIFIER      reduce using rule 252 (boolean_value -> FALSE .)
    DIGIT_IDENTIFIER reduce using rule 252 (boolean_value -> FALSE .)
    BACKQUOTED_IDENTIFIER reduce using rule 252 (boolean_value -> FALSE .)
    NON_RESERVED    reduce using rule 252 (boolean_value -> FALSE .)
    COMMA           reduce using rule 252 (boolean_value -> FALSE .)
    FROM            reduce using rule 252 (boolean_value -> FALSE .)
    INTERSECT       reduce using rule 252 (boolean_value -> FALSE .)
    UNION           reduce using rule 252 (boolean_value -> FALSE .)
    EXCEPT          reduce using rule 252 (boolean_value -> FALSE .)
    ORDER           reduce using rule 252 (boolean_value -> FALSE .)
    LIMIT           reduce using rule 252 (boolean_value -> FALSE .)
    FOR             reduce using rule 252 (boolean_value -> FALSE .)
    $end            reduce using rule 252 (boolean_value -> FALSE .)
    RPAREN          reduce using rule 252 (boolean_value -> FALSE .)
    REGEXP          reduce using rule 252 (boolean_value -> FALSE .)
    IS              reduce using rule 252 (boolean_value -> FALSE .)
    EQ              reduce using rule 252 (boolean_value -> FALSE .)
    NE              reduce using rule 252 (boolean_value -> FALSE .)
    LT              reduce using rule 252 (boolean_value -> FALSE .)
    LE              reduce using rule 252 (boolean_value -> FALSE .)
    GT              reduce using rule 252 (boolean_value -> FALSE .)
    GE              reduce using rule 252 (boolean_value -> FALSE .)
    NOT             reduce using rule 252 (boolean_value -> FALSE .)
    BETWEEN         reduce using rule 252 (boolean_value -> FALSE .)
    IN              reduce using rule 252 (boolean_value -> FALSE .)
    LIKE            reduce using rule 252 (boolean_value -> FALSE .)
    OR              reduce using rule 252 (boolean_value -> FALSE .)
    AND             reduce using rule 252 (boolean_value -> FALSE .)
    GROUP           reduce using rule 252 (boolean_value -> FALSE .)
    HAVING          reduce using rule 252 (boolean_value -> FALSE .)
    THEN            reduce using rule 252 (boolean_value -> FALSE .)
    CROSS           reduce using rule 252 (boolean_value -> FALSE .)
    NATURAL         reduce using rule 252 (boolean_value -> FALSE .)
    INNER           reduce using rule 252 (boolean_value -> FALSE .)
    LEFT            reduce using rule 252 (boolean_value -> FALSE .)
    RIGHT           reduce using rule 252 (boolean_value -> FALSE .)
    FULL            reduce using rule 252 (boolean_value -> FALSE .)
    JOIN            reduce using rule 252 (boolean_value -> FALSE .)
    SET             reduce using rule 252 (boolean_value -> FALSE .)
    WHERE           reduce using rule 252 (boolean_value -> FALSE .)
    VALUES          reduce using rule 252 (boolean_value -> FALSE .)
    LPAREN          reduce using rule 252 (boolean_value -> FALSE .)
    SELECT          reduce using rule 252 (boolean_value -> FALSE .)
    ON              reduce using rule 252 (boolean_value -> FALSE .)
    USING           reduce using rule 252 (boolean_value -> FALSE .)
    ASC             reduce using rule 252 (boolean_value -> FALSE .)
    DESC            reduce using rule 252 (boolean_value -> FALSE .)
    NULLS           reduce using rule 252 (boolean_value -> FALSE .)
    WHEN            reduce using rule 252 (boolean_value -> FALSE .)
    END             reduce using rule 252 (boolean_value -> FALSE .)
    ELSE            reduce using rule 252 (boolean_value -> FALSE .)


state 183

    (218) simple_case -> CASE . value_expression when_clauses else_opt END
    (219) searched_case -> CASE . when_clauses else_opt END
    (183) value_expression -> . numeric_value_expression
    (221) when_clauses -> . when_clauses when_clause
    (222) when_clauses -> . when_clause
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (223) when_clause -> . WHEN search_condition THEN value_expression
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    WHEN            shift and go to state 252
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 249
    when_clauses                   shift and go to state 250
    numeric_value_expression       shift and go to state 85
    when_clause                    shift and go to state 251
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 184

    (260) qualified_name -> qualified_name PERIOD qualified_name .
    (260) qualified_name -> qualified_name . PERIOD qualified_name

  ! shift/reduce conflict for PERIOD resolved as shift
    AS              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    IDENTIFIER      reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    DIGIT_IDENTIFIER reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    ASTERISK        reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    BACKQUOTED_IDENTIFIER reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    NON_RESERVED    reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    CROSS           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    NATURAL         reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    INNER           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    LEFT            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    RIGHT           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    FULL            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    JOIN            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    INTERSECT       reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    UNION           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    EXCEPT          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    ORDER           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    LIMIT           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    FOR             reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    $end            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    RPAREN          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    SET             reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    COMMA           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    WHERE           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    LPAREN          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    SLASH           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    PERCENT         reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    CONCAT          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    PLUS            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    MINUS           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    FROM            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    REGEXP          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    IS              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    EQ              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    NE              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    LT              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    LE              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    GT              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    GE              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    NOT             reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    BETWEEN         reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    IN              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    LIKE            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    OR              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    AND             reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    GROUP           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    HAVING          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    THEN            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    VALUES          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    SELECT          reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    ON              reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    USING           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    ASC             reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    DESC            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    NULLS           reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    WHEN            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    END             reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    ELSE            reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .)
    PERIOD          shift and go to state 94

  ! PERIOD          [ reduce using rule 260 (qualified_name -> qualified_name PERIOD qualified_name .) ]


state 185

    (153) alias -> as_opt identifier .

    CROSS           reduce using rule 153 (alias -> as_opt identifier .)
    NATURAL         reduce using rule 153 (alias -> as_opt identifier .)
    INNER           reduce using rule 153 (alias -> as_opt identifier .)
    LEFT            reduce using rule 153 (alias -> as_opt identifier .)
    RIGHT           reduce using rule 153 (alias -> as_opt identifier .)
    FULL            reduce using rule 153 (alias -> as_opt identifier .)
    JOIN            reduce using rule 153 (alias -> as_opt identifier .)
    SET             reduce using rule 153 (alias -> as_opt identifier .)
    COMMA           reduce using rule 153 (alias -> as_opt identifier .)
    WHERE           reduce using rule 153 (alias -> as_opt identifier .)
    ORDER           reduce using rule 153 (alias -> as_opt identifier .)
    LIMIT           reduce using rule 153 (alias -> as_opt identifier .)
    $end            reduce using rule 153 (alias -> as_opt identifier .)
    GROUP           reduce using rule 153 (alias -> as_opt identifier .)
    HAVING          reduce using rule 153 (alias -> as_opt identifier .)
    FOR             reduce using rule 153 (alias -> as_opt identifier .)
    INTERSECT       reduce using rule 153 (alias -> as_opt identifier .)
    UNION           reduce using rule 153 (alias -> as_opt identifier .)
    EXCEPT          reduce using rule 153 (alias -> as_opt identifier .)
    RPAREN          reduce using rule 153 (alias -> as_opt identifier .)
    VALUES          reduce using rule 153 (alias -> as_opt identifier .)
    LPAREN          reduce using rule 153 (alias -> as_opt identifier .)
    SELECT          reduce using rule 153 (alias -> as_opt identifier .)
    ON              reduce using rule 153 (alias -> as_opt identifier .)
    USING           reduce using rule 153 (alias -> as_opt identifier .)
    FROM            reduce using rule 153 (alias -> as_opt identifier .)


state 186

    (5) create_table -> CREATE TABLE identifier LPAREN . column_list RPAREN create_table_end
    (6) create_table -> CREATE TABLE identifier LPAREN . column_list COMMA primary_clause RPAREN create_table_end
    (9) column_list -> . column
    (10) column_list -> . column_list COMMA column
    (11) column -> . identifier column_type
    (12) column -> . identifier column_type UNIQUE
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 253
    column_list                    shift and go to state 254
    column                         shift and go to state 255
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 187

    (65) subquery -> LPAREN query_expression order_by_opt limit_opt . RPAREN

    RPAREN          shift and go to state 256


state 188

    (64) cursor_specification -> query_expression order_by_opt limit_opt for_update_opt .

    $end            reduce using rule 64 (cursor_specification -> query_expression order_by_opt limit_opt for_update_opt .)


state 189

    (66) for_update_opt -> FOR . UPDATE
    (67) for_update_opt -> FOR . UPDATE NOWAIT
    (68) for_update_opt -> FOR . UPDATE WAIT INTEGER

    UPDATE          shift and go to state 257


state 190

    (69) for_update_opt -> empty .

    $end            reduce using rule 69 (for_update_opt -> empty .)
    INTERSECT       reduce using rule 69 (for_update_opt -> empty .)
    UNION           reduce using rule 69 (for_update_opt -> empty .)
    EXCEPT          reduce using rule 69 (for_update_opt -> empty .)
    ORDER           reduce using rule 69 (for_update_opt -> empty .)
    LIMIT           reduce using rule 69 (for_update_opt -> empty .)
    FOR             reduce using rule 69 (for_update_opt -> empty .)
    RPAREN          reduce using rule 69 (for_update_opt -> empty .)


state 191

    (84) limit_opt -> LIMIT INTEGER .
    (85) limit_opt -> LIMIT INTEGER . COMMA INTEGER
    (89) limit_opt -> LIMIT INTEGER . OFFSET INTEGER

    FOR             reduce using rule 84 (limit_opt -> LIMIT INTEGER .)
    $end            reduce using rule 84 (limit_opt -> LIMIT INTEGER .)
    RPAREN          reduce using rule 84 (limit_opt -> LIMIT INTEGER .)
    COMMA           shift and go to state 258
    OFFSET          shift and go to state 259


state 192

    (86) limit_opt -> LIMIT QM .
    (87) limit_opt -> LIMIT QM . COMMA QM

    FOR             reduce using rule 86 (limit_opt -> LIMIT QM .)
    $end            reduce using rule 86 (limit_opt -> LIMIT QM .)
    RPAREN          reduce using rule 86 (limit_opt -> LIMIT QM .)
    COMMA           shift and go to state 260


state 193

    (88) limit_opt -> LIMIT ALL .

    FOR             reduce using rule 88 (limit_opt -> LIMIT ALL .)
    $end            reduce using rule 88 (limit_opt -> LIMIT ALL .)
    RPAREN          reduce using rule 88 (limit_opt -> LIMIT ALL .)


state 194

    (73) order_by_opt -> ORDER BY sort_items .
    (76) sort_items -> sort_items . COMMA sort_item

    LIMIT           reduce using rule 73 (order_by_opt -> ORDER BY sort_items .)
    FOR             reduce using rule 73 (order_by_opt -> ORDER BY sort_items .)
    $end            reduce using rule 73 (order_by_opt -> ORDER BY sort_items .)
    RPAREN          reduce using rule 73 (order_by_opt -> ORDER BY sort_items .)
    COMMA           shift and go to state 261


state 195

    (75) sort_items -> sort_item .

    COMMA           reduce using rule 75 (sort_items -> sort_item .)
    LIMIT           reduce using rule 75 (sort_items -> sort_item .)
    FOR             reduce using rule 75 (sort_items -> sort_item .)
    $end            reduce using rule 75 (sort_items -> sort_item .)
    RPAREN          reduce using rule 75 (sort_items -> sort_item .)


state 196

    (77) sort_item -> value_expression . order_opt null_ordering_opt
    (78) order_opt -> . ASC
    (79) order_opt -> . DESC
    (80) order_opt -> . empty
    (271) empty -> .

    ASC             shift and go to state 263
    DESC            shift and go to state 264
    NULLS           reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    order_opt                      shift and go to state 262
    empty                          shift and go to state 265

state 197

    (59) delete -> DELETE FROM relations where_opt . order_by_opt limit_opt
    (73) order_by_opt -> . ORDER BY sort_items
    (74) order_by_opt -> . empty
    (271) empty -> .

    ORDER           shift and go to state 50
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)

    order_by_opt                   shift and go to state 266
    empty                          shift and go to state 51

state 198

    (106) where_opt -> WHERE . search_condition
    (107) where_opt -> WHERE . LPAREN search_condition RPAREN
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 268
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 267
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 199

    (108) where_opt -> empty .

    ORDER           reduce using rule 108 (where_opt -> empty .)
    LIMIT           reduce using rule 108 (where_opt -> empty .)
    $end            reduce using rule 108 (where_opt -> empty .)
    GROUP           reduce using rule 108 (where_opt -> empty .)
    HAVING          reduce using rule 108 (where_opt -> empty .)
    FOR             reduce using rule 108 (where_opt -> empty .)
    INTERSECT       reduce using rule 108 (where_opt -> empty .)
    UNION           reduce using rule 108 (where_opt -> empty .)
    EXCEPT          reduce using rule 108 (where_opt -> empty .)
    RPAREN          reduce using rule 108 (where_opt -> empty .)


state 200

    (60) update -> UPDATE relations SET update_set_list . where_opt order_by_opt limit_opt
    (62) update_set_list -> update_set_list . COMMA update_set
    (106) where_opt -> . WHERE search_condition
    (107) where_opt -> . WHERE LPAREN search_condition RPAREN
    (108) where_opt -> . empty
    (271) empty -> .

    COMMA           shift and go to state 270
    WHERE           shift and go to state 198
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)

    where_opt                      shift and go to state 269
    empty                          shift and go to state 199

state 201

    (61) update_set_list -> update_set .

    COMMA           reduce using rule 61 (update_set_list -> update_set .)
    WHERE           reduce using rule 61 (update_set_list -> update_set .)
    ORDER           reduce using rule 61 (update_set_list -> update_set .)
    LIMIT           reduce using rule 61 (update_set_list -> update_set .)
    $end            reduce using rule 61 (update_set_list -> update_set .)


state 202

    (63) update_set -> comparison_predicate .

    COMMA           reduce using rule 63 (update_set -> comparison_predicate .)
    WHERE           reduce using rule 63 (update_set -> comparison_predicate .)
    ORDER           reduce using rule 63 (update_set -> comparison_predicate .)
    LIMIT           reduce using rule 63 (update_set -> comparison_predicate .)
    $end            reduce using rule 63 (update_set -> comparison_predicate .)


state 203

    (172) comparison_predicate -> value_expression . comparison_operator value_expression
    (241) comparison_operator -> . EQ
    (242) comparison_operator -> . NE
    (243) comparison_operator -> . LT
    (244) comparison_operator -> . LE
    (245) comparison_operator -> . GT
    (246) comparison_operator -> . GE

    EQ              shift and go to state 218
    NE              shift and go to state 219
    LT              shift and go to state 220
    LE              shift and go to state 221
    GT              shift and go to state 222
    GE              shift and go to state 223

    comparison_operator            shift and go to state 214

state 204

    (125) relations -> relations COMMA table_reference .
    (134) cross_join -> table_reference . CROSS JOIN table_primary
    (135) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (136) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (137) join_type -> . INNER
    (138) join_type -> . LEFT outer_opt
    (139) join_type -> . RIGHT outer_opt
    (140) join_type -> . FULL outer_opt
    (141) join_type -> . empty
    (271) empty -> .

    SET             reduce using rule 125 (relations -> relations COMMA table_reference .)
    COMMA           reduce using rule 125 (relations -> relations COMMA table_reference .)
    WHERE           reduce using rule 125 (relations -> relations COMMA table_reference .)
    ORDER           reduce using rule 125 (relations -> relations COMMA table_reference .)
    LIMIT           reduce using rule 125 (relations -> relations COMMA table_reference .)
    $end            reduce using rule 125 (relations -> relations COMMA table_reference .)
    GROUP           reduce using rule 125 (relations -> relations COMMA table_reference .)
    HAVING          reduce using rule 125 (relations -> relations COMMA table_reference .)
    FOR             reduce using rule 125 (relations -> relations COMMA table_reference .)
    INTERSECT       reduce using rule 125 (relations -> relations COMMA table_reference .)
    UNION           reduce using rule 125 (relations -> relations COMMA table_reference .)
    EXCEPT          reduce using rule 125 (relations -> relations COMMA table_reference .)
    RPAREN          reduce using rule 125 (relations -> relations COMMA table_reference .)
    CROSS           shift and go to state 60
    NATURAL         shift and go to state 62
    INNER           shift and go to state 63
    LEFT            shift and go to state 64
    RIGHT           shift and go to state 65
    FULL            shift and go to state 66
    JOIN            reduce using rule 271 (empty -> .)

    join_type                      shift and go to state 61
    empty                          shift and go to state 67

state 205

    (51) insert -> INSERT ignore INTO table_reference . VALUES LPAREN insert_value RPAREN
    (52) insert -> INSERT ignore INTO table_reference . LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (53) insert -> INSERT ignore INTO table_reference . LPAREN index_column_list RPAREN query_spec
    (54) insert -> INSERT ignore INTO table_reference . query_spec
    (134) cross_join -> table_reference . CROSS JOIN table_primary
    (135) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (136) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (105) query_spec -> . SELECT select_items table_expression_opt
    (137) join_type -> . INNER
    (138) join_type -> . LEFT outer_opt
    (139) join_type -> . RIGHT outer_opt
    (140) join_type -> . FULL outer_opt
    (141) join_type -> . empty
    (271) empty -> .

    VALUES          shift and go to state 271
    LPAREN          shift and go to state 272
    CROSS           shift and go to state 60
    NATURAL         shift and go to state 62
    SELECT          shift and go to state 35
    INNER           shift and go to state 63
    LEFT            shift and go to state 64
    RIGHT           shift and go to state 65
    FULL            shift and go to state 66
    JOIN            reduce using rule 271 (empty -> .)

    query_spec                     shift and go to state 273
    join_type                      shift and go to state 61
    empty                          shift and go to state 67

state 206

    (134) cross_join -> table_reference CROSS JOIN table_primary .

    ORDER           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    LIMIT           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    FOR             reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    $end            reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    CROSS           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    NATURAL         reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    INNER           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    LEFT            reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    RIGHT           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    FULL            reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    JOIN            reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    RPAREN          reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    SET             reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    COMMA           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    WHERE           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    GROUP           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    HAVING          reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    INTERSECT       reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    UNION           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    EXCEPT          reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    VALUES          reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    LPAREN          reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    SELECT          reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    ON              reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)
    USING           reduce using rule 134 (cross_join -> table_reference CROSS JOIN table_primary .)


state 207

    (135) qualified_join -> table_reference join_type JOIN table_reference . join_criteria
    (134) cross_join -> table_reference . CROSS JOIN table_primary
    (135) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (136) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (144) join_criteria -> . ON search_condition
    (145) join_criteria -> . USING LPAREN join_columns RPAREN
    (146) join_criteria -> . empty
    (137) join_type -> . INNER
    (138) join_type -> . LEFT outer_opt
    (139) join_type -> . RIGHT outer_opt
    (140) join_type -> . FULL outer_opt
    (141) join_type -> . empty
    (271) empty -> .

  ! shift/reduce conflict for CROSS resolved as shift
  ! shift/reduce conflict for NATURAL resolved as shift
  ! shift/reduce conflict for INNER resolved as shift
  ! shift/reduce conflict for LEFT resolved as shift
  ! shift/reduce conflict for RIGHT resolved as shift
  ! shift/reduce conflict for FULL resolved as shift
  ! shift/reduce conflict for ON resolved as shift
  ! shift/reduce conflict for USING resolved as shift
    CROSS           shift and go to state 60
    NATURAL         shift and go to state 62
    ON              shift and go to state 275
    USING           shift and go to state 276
    INNER           shift and go to state 63
    LEFT            shift and go to state 64
    RIGHT           shift and go to state 65
    FULL            shift and go to state 66
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    JOIN            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    SET             reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    WHERE           reduce using rule 271 (empty -> .)
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    VALUES          reduce using rule 271 (empty -> .)
    LPAREN          reduce using rule 271 (empty -> .)
    SELECT          reduce using rule 271 (empty -> .)

  ! CROSS           [ reduce using rule 271 (empty -> .) ]
  ! NATURAL         [ reduce using rule 271 (empty -> .) ]
  ! INNER           [ reduce using rule 271 (empty -> .) ]
  ! LEFT            [ reduce using rule 271 (empty -> .) ]
  ! RIGHT           [ reduce using rule 271 (empty -> .) ]
  ! FULL            [ reduce using rule 271 (empty -> .) ]
  ! ON              [ reduce using rule 271 (empty -> .) ]
  ! USING           [ reduce using rule 271 (empty -> .) ]

    join_type                      shift and go to state 61
    join_criteria                  shift and go to state 274
    empty                          shift and go to state 277

state 208

    (136) natural_join -> table_reference NATURAL join_type JOIN . table_primary
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 56
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    table_primary                  shift and go to state 278
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 209

    (103) values_list -> values_list COMMA expression .

    COMMA           reduce using rule 103 (values_list -> values_list COMMA expression .)
    INTERSECT       reduce using rule 103 (values_list -> values_list COMMA expression .)
    UNION           reduce using rule 103 (values_list -> values_list COMMA expression .)
    EXCEPT          reduce using rule 103 (values_list -> values_list COMMA expression .)
    ORDER           reduce using rule 103 (values_list -> values_list COMMA expression .)
    LIMIT           reduce using rule 103 (values_list -> values_list COMMA expression .)
    FOR             reduce using rule 103 (values_list -> values_list COMMA expression .)
    $end            reduce using rule 103 (values_list -> values_list COMMA expression .)
    RPAREN          reduce using rule 103 (values_list -> values_list COMMA expression .)


state 210

    (157) search_condition -> search_condition OR search_condition .
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    INTERSECT       reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    UNION           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    EXCEPT          reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    ORDER           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    LIMIT           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    FOR             reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    $end            reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    RPAREN          reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    GROUP           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    HAVING          reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    THEN            reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    CROSS           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    NATURAL         reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    INNER           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    LEFT            reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    RIGHT           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    FULL            reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    JOIN            reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    SET             reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    WHERE           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    VALUES          reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    LPAREN          reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    SELECT          reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    ON              reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    USING           reduce using rule 157 (search_condition -> search_condition OR search_condition .)
    OR              shift and go to state 120
    AND             shift and go to state 121

  ! OR              [ reduce using rule 157 (search_condition -> search_condition OR search_condition .) ]
  ! AND             [ reduce using rule 157 (search_condition -> search_condition OR search_condition .) ]


state 211

    (158) search_condition -> search_condition AND search_condition .
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    INTERSECT       reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    UNION           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    EXCEPT          reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    ORDER           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    LIMIT           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    FOR             reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    $end            reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    RPAREN          reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    GROUP           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    HAVING          reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    THEN            reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    CROSS           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    NATURAL         reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    INNER           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    LEFT            reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    RIGHT           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    FULL            reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    JOIN            reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    SET             reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    WHERE           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    VALUES          reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    LPAREN          reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    SELECT          reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    ON              reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    USING           reduce using rule 158 (search_condition -> search_condition AND search_condition .)
    OR              shift and go to state 120
    AND             shift and go to state 121

  ! OR              [ reduce using rule 158 (search_condition -> search_condition AND search_condition .) ]
  ! AND             [ reduce using rule 158 (search_condition -> search_condition AND search_condition .) ]


state 212

    (156) search_condition -> LPAREN search_condition RPAREN .

    OR              reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    AND             reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    COMMA           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    INTERSECT       reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    UNION           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    EXCEPT          reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    ORDER           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    LIMIT           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    FOR             reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    $end            reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    RPAREN          reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    GROUP           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    HAVING          reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    THEN            reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    CROSS           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    NATURAL         reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    INNER           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    LEFT            reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    RIGHT           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    FULL            reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    JOIN            reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    SET             reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    WHERE           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    VALUES          reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    LPAREN          reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    SELECT          reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    ON              reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    USING           reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)


state 213

    (160) boolean_term -> LPAREN boolean_term RPAREN .

    OR              reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    AND             reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    COMMA           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    INTERSECT       reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    UNION           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    EXCEPT          reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    ORDER           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    LIMIT           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    FOR             reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    $end            reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    RPAREN          reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    GROUP           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    HAVING          reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    THEN            reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    CROSS           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    NATURAL         reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    INNER           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    LEFT            reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    RIGHT           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    FULL            reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    JOIN            reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    SET             reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    WHERE           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    VALUES          reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    LPAREN          reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    SELECT          reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    ON              reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)
    USING           reduce using rule 160 (boolean_term -> LPAREN boolean_term RPAREN .)


state 214

    (172) comparison_predicate -> value_expression comparison_operator . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 279
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 215

    (173) between_predicate -> value_expression not_opt . BETWEEN value_expression AND value_expression
    (174) in_predicate -> value_expression not_opt . IN in_value
    (179) like_predicate -> value_expression not_opt . LIKE value_expression

    BETWEEN         shift and go to state 280
    IN              shift and go to state 281
    LIKE            shift and go to state 282


state 216

    (180) regexp_predicate -> value_expression REGEXP . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 283
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 217

    (181) null_predicate -> value_expression IS . not_opt NULL
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

    NOT             shift and go to state 75
    NULL            reduce using rule 271 (empty -> .)

    not_opt                        shift and go to state 284
    empty                          shift and go to state 76

state 218

    (241) comparison_operator -> EQ .

    PLUS            reduce using rule 241 (comparison_operator -> EQ .)
    MINUS           reduce using rule 241 (comparison_operator -> EQ .)
    LPAREN          reduce using rule 241 (comparison_operator -> EQ .)
    NULL            reduce using rule 241 (comparison_operator -> EQ .)
    SCONST          reduce using rule 241 (comparison_operator -> EQ .)
    QUOTED_IDENTIFIER reduce using rule 241 (comparison_operator -> EQ .)
    QM              reduce using rule 241 (comparison_operator -> EQ .)
    CURRENT_DATE    reduce using rule 241 (comparison_operator -> EQ .)
    CURRENT_TIME    reduce using rule 241 (comparison_operator -> EQ .)
    CURRENT_TIMESTAMP reduce using rule 241 (comparison_operator -> EQ .)
    LOCALTIME       reduce using rule 241 (comparison_operator -> EQ .)
    LOCALTIMESTAMP  reduce using rule 241 (comparison_operator -> EQ .)
    CAST            reduce using rule 241 (comparison_operator -> EQ .)
    DECIMAL         reduce using rule 241 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 241 (comparison_operator -> EQ .)
    TRUE            reduce using rule 241 (comparison_operator -> EQ .)
    FALSE           reduce using rule 241 (comparison_operator -> EQ .)
    IDENTIFIER      reduce using rule 241 (comparison_operator -> EQ .)
    DIGIT_IDENTIFIER reduce using rule 241 (comparison_operator -> EQ .)
    ASTERISK        reduce using rule 241 (comparison_operator -> EQ .)
    CASE            reduce using rule 241 (comparison_operator -> EQ .)
    BACKQUOTED_IDENTIFIER reduce using rule 241 (comparison_operator -> EQ .)
    NON_RESERVED    reduce using rule 241 (comparison_operator -> EQ .)


state 219

    (242) comparison_operator -> NE .

    PLUS            reduce using rule 242 (comparison_operator -> NE .)
    MINUS           reduce using rule 242 (comparison_operator -> NE .)
    LPAREN          reduce using rule 242 (comparison_operator -> NE .)
    NULL            reduce using rule 242 (comparison_operator -> NE .)
    SCONST          reduce using rule 242 (comparison_operator -> NE .)
    QUOTED_IDENTIFIER reduce using rule 242 (comparison_operator -> NE .)
    QM              reduce using rule 242 (comparison_operator -> NE .)
    CURRENT_DATE    reduce using rule 242 (comparison_operator -> NE .)
    CURRENT_TIME    reduce using rule 242 (comparison_operator -> NE .)
    CURRENT_TIMESTAMP reduce using rule 242 (comparison_operator -> NE .)
    LOCALTIME       reduce using rule 242 (comparison_operator -> NE .)
    LOCALTIMESTAMP  reduce using rule 242 (comparison_operator -> NE .)
    CAST            reduce using rule 242 (comparison_operator -> NE .)
    DECIMAL         reduce using rule 242 (comparison_operator -> NE .)
    INTEGER         reduce using rule 242 (comparison_operator -> NE .)
    TRUE            reduce using rule 242 (comparison_operator -> NE .)
    FALSE           reduce using rule 242 (comparison_operator -> NE .)
    IDENTIFIER      reduce using rule 242 (comparison_operator -> NE .)
    DIGIT_IDENTIFIER reduce using rule 242 (comparison_operator -> NE .)
    ASTERISK        reduce using rule 242 (comparison_operator -> NE .)
    CASE            reduce using rule 242 (comparison_operator -> NE .)
    BACKQUOTED_IDENTIFIER reduce using rule 242 (comparison_operator -> NE .)
    NON_RESERVED    reduce using rule 242 (comparison_operator -> NE .)


state 220

    (243) comparison_operator -> LT .

    PLUS            reduce using rule 243 (comparison_operator -> LT .)
    MINUS           reduce using rule 243 (comparison_operator -> LT .)
    LPAREN          reduce using rule 243 (comparison_operator -> LT .)
    NULL            reduce using rule 243 (comparison_operator -> LT .)
    SCONST          reduce using rule 243 (comparison_operator -> LT .)
    QUOTED_IDENTIFIER reduce using rule 243 (comparison_operator -> LT .)
    QM              reduce using rule 243 (comparison_operator -> LT .)
    CURRENT_DATE    reduce using rule 243 (comparison_operator -> LT .)
    CURRENT_TIME    reduce using rule 243 (comparison_operator -> LT .)
    CURRENT_TIMESTAMP reduce using rule 243 (comparison_operator -> LT .)
    LOCALTIME       reduce using rule 243 (comparison_operator -> LT .)
    LOCALTIMESTAMP  reduce using rule 243 (comparison_operator -> LT .)
    CAST            reduce using rule 243 (comparison_operator -> LT .)
    DECIMAL         reduce using rule 243 (comparison_operator -> LT .)
    INTEGER         reduce using rule 243 (comparison_operator -> LT .)
    TRUE            reduce using rule 243 (comparison_operator -> LT .)
    FALSE           reduce using rule 243 (comparison_operator -> LT .)
    IDENTIFIER      reduce using rule 243 (comparison_operator -> LT .)
    DIGIT_IDENTIFIER reduce using rule 243 (comparison_operator -> LT .)
    ASTERISK        reduce using rule 243 (comparison_operator -> LT .)
    CASE            reduce using rule 243 (comparison_operator -> LT .)
    BACKQUOTED_IDENTIFIER reduce using rule 243 (comparison_operator -> LT .)
    NON_RESERVED    reduce using rule 243 (comparison_operator -> LT .)


state 221

    (244) comparison_operator -> LE .

    PLUS            reduce using rule 244 (comparison_operator -> LE .)
    MINUS           reduce using rule 244 (comparison_operator -> LE .)
    LPAREN          reduce using rule 244 (comparison_operator -> LE .)
    NULL            reduce using rule 244 (comparison_operator -> LE .)
    SCONST          reduce using rule 244 (comparison_operator -> LE .)
    QUOTED_IDENTIFIER reduce using rule 244 (comparison_operator -> LE .)
    QM              reduce using rule 244 (comparison_operator -> LE .)
    CURRENT_DATE    reduce using rule 244 (comparison_operator -> LE .)
    CURRENT_TIME    reduce using rule 244 (comparison_operator -> LE .)
    CURRENT_TIMESTAMP reduce using rule 244 (comparison_operator -> LE .)
    LOCALTIME       reduce using rule 244 (comparison_operator -> LE .)
    LOCALTIMESTAMP  reduce using rule 244 (comparison_operator -> LE .)
    CAST            reduce using rule 244 (comparison_operator -> LE .)
    DECIMAL         reduce using rule 244 (comparison_operator -> LE .)
    INTEGER         reduce using rule 244 (comparison_operator -> LE .)
    TRUE            reduce using rule 244 (comparison_operator -> LE .)
    FALSE           reduce using rule 244 (comparison_operator -> LE .)
    IDENTIFIER      reduce using rule 244 (comparison_operator -> LE .)
    DIGIT_IDENTIFIER reduce using rule 244 (comparison_operator -> LE .)
    ASTERISK        reduce using rule 244 (comparison_operator -> LE .)
    CASE            reduce using rule 244 (comparison_operator -> LE .)
    BACKQUOTED_IDENTIFIER reduce using rule 244 (comparison_operator -> LE .)
    NON_RESERVED    reduce using rule 244 (comparison_operator -> LE .)


state 222

    (245) comparison_operator -> GT .

    PLUS            reduce using rule 245 (comparison_operator -> GT .)
    MINUS           reduce using rule 245 (comparison_operator -> GT .)
    LPAREN          reduce using rule 245 (comparison_operator -> GT .)
    NULL            reduce using rule 245 (comparison_operator -> GT .)
    SCONST          reduce using rule 245 (comparison_operator -> GT .)
    QUOTED_IDENTIFIER reduce using rule 245 (comparison_operator -> GT .)
    QM              reduce using rule 245 (comparison_operator -> GT .)
    CURRENT_DATE    reduce using rule 245 (comparison_operator -> GT .)
    CURRENT_TIME    reduce using rule 245 (comparison_operator -> GT .)
    CURRENT_TIMESTAMP reduce using rule 245 (comparison_operator -> GT .)
    LOCALTIME       reduce using rule 245 (comparison_operator -> GT .)
    LOCALTIMESTAMP  reduce using rule 245 (comparison_operator -> GT .)
    CAST            reduce using rule 245 (comparison_operator -> GT .)
    DECIMAL         reduce using rule 245 (comparison_operator -> GT .)
    INTEGER         reduce using rule 245 (comparison_operator -> GT .)
    TRUE            reduce using rule 245 (comparison_operator -> GT .)
    FALSE           reduce using rule 245 (comparison_operator -> GT .)
    IDENTIFIER      reduce using rule 245 (comparison_operator -> GT .)
    DIGIT_IDENTIFIER reduce using rule 245 (comparison_operator -> GT .)
    ASTERISK        reduce using rule 245 (comparison_operator -> GT .)
    CASE            reduce using rule 245 (comparison_operator -> GT .)
    BACKQUOTED_IDENTIFIER reduce using rule 245 (comparison_operator -> GT .)
    NON_RESERVED    reduce using rule 245 (comparison_operator -> GT .)


state 223

    (246) comparison_operator -> GE .

    PLUS            reduce using rule 246 (comparison_operator -> GE .)
    MINUS           reduce using rule 246 (comparison_operator -> GE .)
    LPAREN          reduce using rule 246 (comparison_operator -> GE .)
    NULL            reduce using rule 246 (comparison_operator -> GE .)
    SCONST          reduce using rule 246 (comparison_operator -> GE .)
    QUOTED_IDENTIFIER reduce using rule 246 (comparison_operator -> GE .)
    QM              reduce using rule 246 (comparison_operator -> GE .)
    CURRENT_DATE    reduce using rule 246 (comparison_operator -> GE .)
    CURRENT_TIME    reduce using rule 246 (comparison_operator -> GE .)
    CURRENT_TIMESTAMP reduce using rule 246 (comparison_operator -> GE .)
    LOCALTIME       reduce using rule 246 (comparison_operator -> GE .)
    LOCALTIMESTAMP  reduce using rule 246 (comparison_operator -> GE .)
    CAST            reduce using rule 246 (comparison_operator -> GE .)
    DECIMAL         reduce using rule 246 (comparison_operator -> GE .)
    INTEGER         reduce using rule 246 (comparison_operator -> GE .)
    TRUE            reduce using rule 246 (comparison_operator -> GE .)
    FALSE           reduce using rule 246 (comparison_operator -> GE .)
    IDENTIFIER      reduce using rule 246 (comparison_operator -> GE .)
    DIGIT_IDENTIFIER reduce using rule 246 (comparison_operator -> GE .)
    ASTERISK        reduce using rule 246 (comparison_operator -> GE .)
    CASE            reduce using rule 246 (comparison_operator -> GE .)
    BACKQUOTED_IDENTIFIER reduce using rule 246 (comparison_operator -> GE .)
    NON_RESERVED    reduce using rule 246 (comparison_operator -> GE .)


state 224

    (182) exists_predicate -> EXISTS subquery .

    OR              reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    AND             reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    COMMA           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    INTERSECT       reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    UNION           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    EXCEPT          reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    ORDER           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    LIMIT           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    FOR             reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    $end            reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    RPAREN          reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    GROUP           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    HAVING          reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    THEN            reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    CROSS           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    NATURAL         reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    INNER           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    LEFT            reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    RIGHT           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    FULL            reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    JOIN            reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    SET             reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    WHERE           reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    VALUES          reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    LPAREN          reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    SELECT          reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    ON              reduce using rule 182 (exists_predicate -> EXISTS subquery .)
    USING           reduce using rule 182 (exists_predicate -> EXISTS subquery .)


state 225

    (92) nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .
    (95) nonjoin_query_term -> nonjoin_query_term . INTERSECT set_quantifier_opt nonjoin_query_primary

    UNION           reduce using rule 92 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    EXCEPT          reduce using rule 92 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    ORDER           reduce using rule 92 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    LIMIT           reduce using rule 92 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    FOR             reduce using rule 92 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    $end            reduce using rule 92 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    RPAREN          reduce using rule 92 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    INTERSECT       shift and go to state 79


state 226

    (97) nonjoin_query_primary -> LPAREN . nonjoin_query_expression RPAREN
    (91) nonjoin_query_expression -> . nonjoin_query_term
    (92) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 226
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19

    nonjoin_query_expression       shift and go to state 285
    nonjoin_query_term             shift and go to state 24
    nonjoin_query_primary          shift and go to state 28
    simple_table                   shift and go to state 30
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32

state 227

    (93) nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .
    (95) nonjoin_query_term -> nonjoin_query_term . INTERSECT set_quantifier_opt nonjoin_query_primary

    UNION           reduce using rule 93 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    EXCEPT          reduce using rule 93 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    ORDER           reduce using rule 93 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    LIMIT           reduce using rule 93 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    FOR             reduce using rule 93 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    $end            reduce using rule 93 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    RPAREN          reduce using rule 93 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    INTERSECT       shift and go to state 79


state 228

    (95) nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .

    INTERSECT       reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    UNION           reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    EXCEPT          reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    ORDER           reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    LIMIT           reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    FOR             reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    $end            reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    RPAREN          reduce using rule 95 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)


state 229

    (118) select_items -> select_items COMMA select_item .

    COMMA           reduce using rule 118 (select_items -> select_items COMMA select_item .)
    FROM            reduce using rule 118 (select_items -> select_items COMMA select_item .)
    INTERSECT       reduce using rule 118 (select_items -> select_items COMMA select_item .)
    UNION           reduce using rule 118 (select_items -> select_items COMMA select_item .)
    EXCEPT          reduce using rule 118 (select_items -> select_items COMMA select_item .)
    ORDER           reduce using rule 118 (select_items -> select_items COMMA select_item .)
    LIMIT           reduce using rule 118 (select_items -> select_items COMMA select_item .)
    FOR             reduce using rule 118 (select_items -> select_items COMMA select_item .)
    $end            reduce using rule 118 (select_items -> select_items COMMA select_item .)
    RPAREN          reduce using rule 118 (select_items -> select_items COMMA select_item .)


state 230

    (123) table_expression_opt -> FROM relations . where_opt group_by_opt having_opt for_update_opt
    (125) relations -> relations . COMMA table_reference
    (106) where_opt -> . WHERE search_condition
    (107) where_opt -> . WHERE LPAREN search_condition RPAREN
    (108) where_opt -> . empty
    (271) empty -> .

    COMMA           shift and go to state 109
    WHERE           shift and go to state 198
    GROUP           reduce using rule 271 (empty -> .)
    HAVING          reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    where_opt                      shift and go to state 286
    empty                          shift and go to state 199

state 231

    (120) select_item -> DISTINCT LPAREN derived_column . RPAREN

    RPAREN          shift and go to state 287


state 232

    (184) numeric_value_expression -> numeric_value_expression PLUS term .
    (187) term -> term . ASTERISK factor
    (188) term -> term . SLASH factor
    (189) term -> term . PERCENT factor
    (190) term -> term . CONCAT factor

  ! shift/reduce conflict for ASTERISK resolved as shift
    PLUS            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    MINUS           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    AS              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    IDENTIFIER      reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    DIGIT_IDENTIFIER reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    BACKQUOTED_IDENTIFIER reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NON_RESERVED    reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    COMMA           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    FROM            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    INTERSECT       reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    UNION           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    EXCEPT          reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ORDER           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LIMIT           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    FOR             reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    $end            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    RPAREN          reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    REGEXP          reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    IS              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    EQ              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NE              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LT              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LE              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    GT              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    GE              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NOT             reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    BETWEEN         reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    IN              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LIKE            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    OR              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    AND             reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    GROUP           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    HAVING          reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    THEN            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    CROSS           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NATURAL         reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    INNER           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LEFT            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    RIGHT           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    FULL            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    JOIN            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    SET             reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    WHERE           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    VALUES          reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LPAREN          reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    SELECT          reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ON              reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    USING           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ASC             reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    DESC            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NULLS           reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    WHEN            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    END             reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ELSE            reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ASTERISK        shift and go to state 150
    SLASH           shift and go to state 151
    PERCENT         shift and go to state 152
    CONCAT          shift and go to state 153

  ! ASTERISK        [ reduce using rule 184 (numeric_value_expression -> numeric_value_expression PLUS term .) ]


state 233

    (185) numeric_value_expression -> numeric_value_expression MINUS term .
    (187) term -> term . ASTERISK factor
    (188) term -> term . SLASH factor
    (189) term -> term . PERCENT factor
    (190) term -> term . CONCAT factor

  ! shift/reduce conflict for ASTERISK resolved as shift
    PLUS            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    MINUS           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    AS              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    IDENTIFIER      reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    DIGIT_IDENTIFIER reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    BACKQUOTED_IDENTIFIER reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NON_RESERVED    reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    COMMA           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    FROM            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    INTERSECT       reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    UNION           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    EXCEPT          reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ORDER           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LIMIT           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    FOR             reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    $end            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    RPAREN          reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    REGEXP          reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    IS              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    EQ              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NE              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LT              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LE              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    GT              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    GE              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NOT             reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    BETWEEN         reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    IN              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LIKE            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    OR              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    AND             reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    GROUP           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    HAVING          reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    THEN            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    CROSS           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NATURAL         reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    INNER           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LEFT            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    RIGHT           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    FULL            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    JOIN            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    SET             reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    WHERE           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    VALUES          reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LPAREN          reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    SELECT          reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ON              reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    USING           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ASC             reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    DESC            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NULLS           reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    WHEN            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    END             reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ELSE            reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ASTERISK        shift and go to state 150
    SLASH           shift and go to state 151
    PERCENT         shift and go to state 152
    CONCAT          shift and go to state 153

  ! ASTERISK        [ reduce using rule 185 (numeric_value_expression -> numeric_value_expression MINUS term .) ]


state 234

    (187) term -> term ASTERISK factor .

    ASTERISK        reduce using rule 187 (term -> term ASTERISK factor .)
    SLASH           reduce using rule 187 (term -> term ASTERISK factor .)
    PERCENT         reduce using rule 187 (term -> term ASTERISK factor .)
    CONCAT          reduce using rule 187 (term -> term ASTERISK factor .)
    PLUS            reduce using rule 187 (term -> term ASTERISK factor .)
    MINUS           reduce using rule 187 (term -> term ASTERISK factor .)
    AS              reduce using rule 187 (term -> term ASTERISK factor .)
    IDENTIFIER      reduce using rule 187 (term -> term ASTERISK factor .)
    DIGIT_IDENTIFIER reduce using rule 187 (term -> term ASTERISK factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 187 (term -> term ASTERISK factor .)
    NON_RESERVED    reduce using rule 187 (term -> term ASTERISK factor .)
    COMMA           reduce using rule 187 (term -> term ASTERISK factor .)
    FROM            reduce using rule 187 (term -> term ASTERISK factor .)
    INTERSECT       reduce using rule 187 (term -> term ASTERISK factor .)
    UNION           reduce using rule 187 (term -> term ASTERISK factor .)
    EXCEPT          reduce using rule 187 (term -> term ASTERISK factor .)
    ORDER           reduce using rule 187 (term -> term ASTERISK factor .)
    LIMIT           reduce using rule 187 (term -> term ASTERISK factor .)
    FOR             reduce using rule 187 (term -> term ASTERISK factor .)
    $end            reduce using rule 187 (term -> term ASTERISK factor .)
    RPAREN          reduce using rule 187 (term -> term ASTERISK factor .)
    REGEXP          reduce using rule 187 (term -> term ASTERISK factor .)
    IS              reduce using rule 187 (term -> term ASTERISK factor .)
    EQ              reduce using rule 187 (term -> term ASTERISK factor .)
    NE              reduce using rule 187 (term -> term ASTERISK factor .)
    LT              reduce using rule 187 (term -> term ASTERISK factor .)
    LE              reduce using rule 187 (term -> term ASTERISK factor .)
    GT              reduce using rule 187 (term -> term ASTERISK factor .)
    GE              reduce using rule 187 (term -> term ASTERISK factor .)
    NOT             reduce using rule 187 (term -> term ASTERISK factor .)
    BETWEEN         reduce using rule 187 (term -> term ASTERISK factor .)
    IN              reduce using rule 187 (term -> term ASTERISK factor .)
    LIKE            reduce using rule 187 (term -> term ASTERISK factor .)
    OR              reduce using rule 187 (term -> term ASTERISK factor .)
    AND             reduce using rule 187 (term -> term ASTERISK factor .)
    GROUP           reduce using rule 187 (term -> term ASTERISK factor .)
    HAVING          reduce using rule 187 (term -> term ASTERISK factor .)
    THEN            reduce using rule 187 (term -> term ASTERISK factor .)
    CROSS           reduce using rule 187 (term -> term ASTERISK factor .)
    NATURAL         reduce using rule 187 (term -> term ASTERISK factor .)
    INNER           reduce using rule 187 (term -> term ASTERISK factor .)
    LEFT            reduce using rule 187 (term -> term ASTERISK factor .)
    RIGHT           reduce using rule 187 (term -> term ASTERISK factor .)
    FULL            reduce using rule 187 (term -> term ASTERISK factor .)
    JOIN            reduce using rule 187 (term -> term ASTERISK factor .)
    SET             reduce using rule 187 (term -> term ASTERISK factor .)
    WHERE           reduce using rule 187 (term -> term ASTERISK factor .)
    VALUES          reduce using rule 187 (term -> term ASTERISK factor .)
    LPAREN          reduce using rule 187 (term -> term ASTERISK factor .)
    SELECT          reduce using rule 187 (term -> term ASTERISK factor .)
    ON              reduce using rule 187 (term -> term ASTERISK factor .)
    USING           reduce using rule 187 (term -> term ASTERISK factor .)
    ASC             reduce using rule 187 (term -> term ASTERISK factor .)
    DESC            reduce using rule 187 (term -> term ASTERISK factor .)
    NULLS           reduce using rule 187 (term -> term ASTERISK factor .)
    WHEN            reduce using rule 187 (term -> term ASTERISK factor .)
    END             reduce using rule 187 (term -> term ASTERISK factor .)
    ELSE            reduce using rule 187 (term -> term ASTERISK factor .)


state 235

    (188) term -> term SLASH factor .

    ASTERISK        reduce using rule 188 (term -> term SLASH factor .)
    SLASH           reduce using rule 188 (term -> term SLASH factor .)
    PERCENT         reduce using rule 188 (term -> term SLASH factor .)
    CONCAT          reduce using rule 188 (term -> term SLASH factor .)
    PLUS            reduce using rule 188 (term -> term SLASH factor .)
    MINUS           reduce using rule 188 (term -> term SLASH factor .)
    AS              reduce using rule 188 (term -> term SLASH factor .)
    IDENTIFIER      reduce using rule 188 (term -> term SLASH factor .)
    DIGIT_IDENTIFIER reduce using rule 188 (term -> term SLASH factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 188 (term -> term SLASH factor .)
    NON_RESERVED    reduce using rule 188 (term -> term SLASH factor .)
    COMMA           reduce using rule 188 (term -> term SLASH factor .)
    FROM            reduce using rule 188 (term -> term SLASH factor .)
    INTERSECT       reduce using rule 188 (term -> term SLASH factor .)
    UNION           reduce using rule 188 (term -> term SLASH factor .)
    EXCEPT          reduce using rule 188 (term -> term SLASH factor .)
    ORDER           reduce using rule 188 (term -> term SLASH factor .)
    LIMIT           reduce using rule 188 (term -> term SLASH factor .)
    FOR             reduce using rule 188 (term -> term SLASH factor .)
    $end            reduce using rule 188 (term -> term SLASH factor .)
    RPAREN          reduce using rule 188 (term -> term SLASH factor .)
    REGEXP          reduce using rule 188 (term -> term SLASH factor .)
    IS              reduce using rule 188 (term -> term SLASH factor .)
    EQ              reduce using rule 188 (term -> term SLASH factor .)
    NE              reduce using rule 188 (term -> term SLASH factor .)
    LT              reduce using rule 188 (term -> term SLASH factor .)
    LE              reduce using rule 188 (term -> term SLASH factor .)
    GT              reduce using rule 188 (term -> term SLASH factor .)
    GE              reduce using rule 188 (term -> term SLASH factor .)
    NOT             reduce using rule 188 (term -> term SLASH factor .)
    BETWEEN         reduce using rule 188 (term -> term SLASH factor .)
    IN              reduce using rule 188 (term -> term SLASH factor .)
    LIKE            reduce using rule 188 (term -> term SLASH factor .)
    OR              reduce using rule 188 (term -> term SLASH factor .)
    AND             reduce using rule 188 (term -> term SLASH factor .)
    GROUP           reduce using rule 188 (term -> term SLASH factor .)
    HAVING          reduce using rule 188 (term -> term SLASH factor .)
    THEN            reduce using rule 188 (term -> term SLASH factor .)
    CROSS           reduce using rule 188 (term -> term SLASH factor .)
    NATURAL         reduce using rule 188 (term -> term SLASH factor .)
    INNER           reduce using rule 188 (term -> term SLASH factor .)
    LEFT            reduce using rule 188 (term -> term SLASH factor .)
    RIGHT           reduce using rule 188 (term -> term SLASH factor .)
    FULL            reduce using rule 188 (term -> term SLASH factor .)
    JOIN            reduce using rule 188 (term -> term SLASH factor .)
    SET             reduce using rule 188 (term -> term SLASH factor .)
    WHERE           reduce using rule 188 (term -> term SLASH factor .)
    VALUES          reduce using rule 188 (term -> term SLASH factor .)
    LPAREN          reduce using rule 188 (term -> term SLASH factor .)
    SELECT          reduce using rule 188 (term -> term SLASH factor .)
    ON              reduce using rule 188 (term -> term SLASH factor .)
    USING           reduce using rule 188 (term -> term SLASH factor .)
    ASC             reduce using rule 188 (term -> term SLASH factor .)
    DESC            reduce using rule 188 (term -> term SLASH factor .)
    NULLS           reduce using rule 188 (term -> term SLASH factor .)
    WHEN            reduce using rule 188 (term -> term SLASH factor .)
    END             reduce using rule 188 (term -> term SLASH factor .)
    ELSE            reduce using rule 188 (term -> term SLASH factor .)


state 236

    (189) term -> term PERCENT factor .

    ASTERISK        reduce using rule 189 (term -> term PERCENT factor .)
    SLASH           reduce using rule 189 (term -> term PERCENT factor .)
    PERCENT         reduce using rule 189 (term -> term PERCENT factor .)
    CONCAT          reduce using rule 189 (term -> term PERCENT factor .)
    PLUS            reduce using rule 189 (term -> term PERCENT factor .)
    MINUS           reduce using rule 189 (term -> term PERCENT factor .)
    AS              reduce using rule 189 (term -> term PERCENT factor .)
    IDENTIFIER      reduce using rule 189 (term -> term PERCENT factor .)
    DIGIT_IDENTIFIER reduce using rule 189 (term -> term PERCENT factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 189 (term -> term PERCENT factor .)
    NON_RESERVED    reduce using rule 189 (term -> term PERCENT factor .)
    COMMA           reduce using rule 189 (term -> term PERCENT factor .)
    FROM            reduce using rule 189 (term -> term PERCENT factor .)
    INTERSECT       reduce using rule 189 (term -> term PERCENT factor .)
    UNION           reduce using rule 189 (term -> term PERCENT factor .)
    EXCEPT          reduce using rule 189 (term -> term PERCENT factor .)
    ORDER           reduce using rule 189 (term -> term PERCENT factor .)
    LIMIT           reduce using rule 189 (term -> term PERCENT factor .)
    FOR             reduce using rule 189 (term -> term PERCENT factor .)
    $end            reduce using rule 189 (term -> term PERCENT factor .)
    RPAREN          reduce using rule 189 (term -> term PERCENT factor .)
    REGEXP          reduce using rule 189 (term -> term PERCENT factor .)
    IS              reduce using rule 189 (term -> term PERCENT factor .)
    EQ              reduce using rule 189 (term -> term PERCENT factor .)
    NE              reduce using rule 189 (term -> term PERCENT factor .)
    LT              reduce using rule 189 (term -> term PERCENT factor .)
    LE              reduce using rule 189 (term -> term PERCENT factor .)
    GT              reduce using rule 189 (term -> term PERCENT factor .)
    GE              reduce using rule 189 (term -> term PERCENT factor .)
    NOT             reduce using rule 189 (term -> term PERCENT factor .)
    BETWEEN         reduce using rule 189 (term -> term PERCENT factor .)
    IN              reduce using rule 189 (term -> term PERCENT factor .)
    LIKE            reduce using rule 189 (term -> term PERCENT factor .)
    OR              reduce using rule 189 (term -> term PERCENT factor .)
    AND             reduce using rule 189 (term -> term PERCENT factor .)
    GROUP           reduce using rule 189 (term -> term PERCENT factor .)
    HAVING          reduce using rule 189 (term -> term PERCENT factor .)
    THEN            reduce using rule 189 (term -> term PERCENT factor .)
    CROSS           reduce using rule 189 (term -> term PERCENT factor .)
    NATURAL         reduce using rule 189 (term -> term PERCENT factor .)
    INNER           reduce using rule 189 (term -> term PERCENT factor .)
    LEFT            reduce using rule 189 (term -> term PERCENT factor .)
    RIGHT           reduce using rule 189 (term -> term PERCENT factor .)
    FULL            reduce using rule 189 (term -> term PERCENT factor .)
    JOIN            reduce using rule 189 (term -> term PERCENT factor .)
    SET             reduce using rule 189 (term -> term PERCENT factor .)
    WHERE           reduce using rule 189 (term -> term PERCENT factor .)
    VALUES          reduce using rule 189 (term -> term PERCENT factor .)
    LPAREN          reduce using rule 189 (term -> term PERCENT factor .)
    SELECT          reduce using rule 189 (term -> term PERCENT factor .)
    ON              reduce using rule 189 (term -> term PERCENT factor .)
    USING           reduce using rule 189 (term -> term PERCENT factor .)
    ASC             reduce using rule 189 (term -> term PERCENT factor .)
    DESC            reduce using rule 189 (term -> term PERCENT factor .)
    NULLS           reduce using rule 189 (term -> term PERCENT factor .)
    WHEN            reduce using rule 189 (term -> term PERCENT factor .)
    END             reduce using rule 189 (term -> term PERCENT factor .)
    ELSE            reduce using rule 189 (term -> term PERCENT factor .)


state 237

    (190) term -> term CONCAT factor .

    ASTERISK        reduce using rule 190 (term -> term CONCAT factor .)
    SLASH           reduce using rule 190 (term -> term CONCAT factor .)
    PERCENT         reduce using rule 190 (term -> term CONCAT factor .)
    CONCAT          reduce using rule 190 (term -> term CONCAT factor .)
    PLUS            reduce using rule 190 (term -> term CONCAT factor .)
    MINUS           reduce using rule 190 (term -> term CONCAT factor .)
    AS              reduce using rule 190 (term -> term CONCAT factor .)
    IDENTIFIER      reduce using rule 190 (term -> term CONCAT factor .)
    DIGIT_IDENTIFIER reduce using rule 190 (term -> term CONCAT factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 190 (term -> term CONCAT factor .)
    NON_RESERVED    reduce using rule 190 (term -> term CONCAT factor .)
    COMMA           reduce using rule 190 (term -> term CONCAT factor .)
    FROM            reduce using rule 190 (term -> term CONCAT factor .)
    INTERSECT       reduce using rule 190 (term -> term CONCAT factor .)
    UNION           reduce using rule 190 (term -> term CONCAT factor .)
    EXCEPT          reduce using rule 190 (term -> term CONCAT factor .)
    ORDER           reduce using rule 190 (term -> term CONCAT factor .)
    LIMIT           reduce using rule 190 (term -> term CONCAT factor .)
    FOR             reduce using rule 190 (term -> term CONCAT factor .)
    $end            reduce using rule 190 (term -> term CONCAT factor .)
    RPAREN          reduce using rule 190 (term -> term CONCAT factor .)
    REGEXP          reduce using rule 190 (term -> term CONCAT factor .)
    IS              reduce using rule 190 (term -> term CONCAT factor .)
    EQ              reduce using rule 190 (term -> term CONCAT factor .)
    NE              reduce using rule 190 (term -> term CONCAT factor .)
    LT              reduce using rule 190 (term -> term CONCAT factor .)
    LE              reduce using rule 190 (term -> term CONCAT factor .)
    GT              reduce using rule 190 (term -> term CONCAT factor .)
    GE              reduce using rule 190 (term -> term CONCAT factor .)
    NOT             reduce using rule 190 (term -> term CONCAT factor .)
    BETWEEN         reduce using rule 190 (term -> term CONCAT factor .)
    IN              reduce using rule 190 (term -> term CONCAT factor .)
    LIKE            reduce using rule 190 (term -> term CONCAT factor .)
    OR              reduce using rule 190 (term -> term CONCAT factor .)
    AND             reduce using rule 190 (term -> term CONCAT factor .)
    GROUP           reduce using rule 190 (term -> term CONCAT factor .)
    HAVING          reduce using rule 190 (term -> term CONCAT factor .)
    THEN            reduce using rule 190 (term -> term CONCAT factor .)
    CROSS           reduce using rule 190 (term -> term CONCAT factor .)
    NATURAL         reduce using rule 190 (term -> term CONCAT factor .)
    INNER           reduce using rule 190 (term -> term CONCAT factor .)
    LEFT            reduce using rule 190 (term -> term CONCAT factor .)
    RIGHT           reduce using rule 190 (term -> term CONCAT factor .)
    FULL            reduce using rule 190 (term -> term CONCAT factor .)
    JOIN            reduce using rule 190 (term -> term CONCAT factor .)
    SET             reduce using rule 190 (term -> term CONCAT factor .)
    WHERE           reduce using rule 190 (term -> term CONCAT factor .)
    VALUES          reduce using rule 190 (term -> term CONCAT factor .)
    LPAREN          reduce using rule 190 (term -> term CONCAT factor .)
    SELECT          reduce using rule 190 (term -> term CONCAT factor .)
    ON              reduce using rule 190 (term -> term CONCAT factor .)
    USING           reduce using rule 190 (term -> term CONCAT factor .)
    ASC             reduce using rule 190 (term -> term CONCAT factor .)
    DESC            reduce using rule 190 (term -> term CONCAT factor .)
    NULLS           reduce using rule 190 (term -> term CONCAT factor .)
    WHEN            reduce using rule 190 (term -> term CONCAT factor .)
    END             reduce using rule 190 (term -> term CONCAT factor .)
    ELSE            reduce using rule 190 (term -> term CONCAT factor .)


state 238

    (195) parenthetic_primary_expression -> LPAREN . value_expression RPAREN
    (196) parenthetic_primary_expression -> LPAREN . parenthetic_primary_expression RPAREN
    (97) nonjoin_query_primary -> LPAREN . nonjoin_query_expression RPAREN
    (65) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (183) value_expression -> . numeric_value_expression
    (195) parenthetic_primary_expression -> . LPAREN value_expression RPAREN
    (196) parenthetic_primary_expression -> . LPAREN parenthetic_primary_expression RPAREN
    (91) nonjoin_query_expression -> . nonjoin_query_term
    (92) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (70) query_expression -> . query_expression_body
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (71) query_expression_body -> . nonjoin_query_expression
    (72) query_expression_body -> . joined_table
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (192) factor -> . sign_opt primary_expression
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DIGIT_IDENTIFIER resolved as shift
  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for BACKQUOTED_IDENTIFIER resolved as shift
  ! shift/reduce conflict for NON_RESERVED resolved as shift
    LPAREN          shift and go to state 238
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 271 (empty -> .) ]
  ! DIGIT_IDENTIFIER [ reduce using rule 271 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 271 (empty -> .) ]
  ! BACKQUOTED_IDENTIFIER [ reduce using rule 271 (empty -> .) ]
  ! NON_RESERVED    [ reduce using rule 271 (empty -> .) ]

    value_expression               shift and go to state 239
    parenthetic_primary_expression shift and go to state 240
    nonjoin_query_expression       shift and go to state 47
    query_expression               shift and go to state 48
    numeric_value_expression       shift and go to state 85
    nonjoin_query_term             shift and go to state 24
    query_expression_body          shift and go to state 21
    term                           shift and go to state 87
    nonjoin_query_primary          shift and go to state 28
    joined_table                   shift and go to state 23
    factor                         shift and go to state 89
    simple_table                   shift and go to state 30
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    sign_opt                       shift and go to state 90
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32
    table_reference                shift and go to state 18
    table_primary                  shift and go to state 29
    sign                           shift and go to state 91
    empty                          shift and go to state 92
    qualified_name                 shift and go to state 36
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 239

    (195) parenthetic_primary_expression -> LPAREN value_expression . RPAREN

    RPAREN          shift and go to state 288


state 240

    (196) parenthetic_primary_expression -> LPAREN parenthetic_primary_expression . RPAREN

    RPAREN          shift and go to state 289


state 241

    (210) function_call -> qualified_name LPAREN . call_args RPAREN
    (211) function_call -> qualified_name LPAREN . DISTINCT call_args RPAREN
    (212) call_args -> . call_list
    (213) call_args -> . empty_call_args
    (226) call_list -> . call_list COMMA expression
    (227) call_list -> . expression
    (214) empty_call_args -> . ASTERISK
    (215) empty_call_args -> . empty
    (154) expression -> . search_condition
    (271) empty -> .
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty

  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    DISTINCT        shift and go to state 291
    ASTERISK        shift and go to state 295
    RPAREN          reduce using rule 271 (empty -> .)
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 271 (empty -> .) ]

    call_args                      shift and go to state 290
    call_list                      shift and go to state 292
    empty_call_args                shift and go to state 293
    expression                     shift and go to state 294
    empty                          shift and go to state 296
    search_condition               shift and go to state 70
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74

state 242

    (237) date_time -> CURRENT_TIME integer_param_opt .

    ASTERISK        reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    SLASH           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    PERCENT         reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    CONCAT          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    PLUS            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    MINUS           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    AS              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    IDENTIFIER      reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    NON_RESERVED    reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    COMMA           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    FROM            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    INTERSECT       reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    UNION           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    EXCEPT          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    ORDER           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    LIMIT           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    FOR             reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    $end            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    RPAREN          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    REGEXP          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    IS              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    EQ              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    NE              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    LT              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    LE              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    GT              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    GE              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    NOT             reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    BETWEEN         reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    IN              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    LIKE            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    OR              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    AND             reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    GROUP           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    HAVING          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    THEN            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    CROSS           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    NATURAL         reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    INNER           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    LEFT            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    RIGHT           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    FULL            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    JOIN            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    SET             reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    WHERE           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    VALUES          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    LPAREN          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    SELECT          reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    ON              reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    USING           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    ASC             reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    DESC            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    NULLS           reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    WHEN            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    END             reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)
    ELSE            reduce using rule 237 (date_time -> CURRENT_TIME integer_param_opt .)


state 243

    (257) integer_param_opt -> LPAREN . INTEGER RPAREN
    (258) integer_param_opt -> LPAREN . RPAREN

    INTEGER         shift and go to state 297
    RPAREN          shift and go to state 298


state 244

    (259) integer_param_opt -> empty .

    ASTERISK        reduce using rule 259 (integer_param_opt -> empty .)
    SLASH           reduce using rule 259 (integer_param_opt -> empty .)
    PERCENT         reduce using rule 259 (integer_param_opt -> empty .)
    CONCAT          reduce using rule 259 (integer_param_opt -> empty .)
    PLUS            reduce using rule 259 (integer_param_opt -> empty .)
    MINUS           reduce using rule 259 (integer_param_opt -> empty .)
    AS              reduce using rule 259 (integer_param_opt -> empty .)
    IDENTIFIER      reduce using rule 259 (integer_param_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 259 (integer_param_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 259 (integer_param_opt -> empty .)
    NON_RESERVED    reduce using rule 259 (integer_param_opt -> empty .)
    COMMA           reduce using rule 259 (integer_param_opt -> empty .)
    FROM            reduce using rule 259 (integer_param_opt -> empty .)
    INTERSECT       reduce using rule 259 (integer_param_opt -> empty .)
    UNION           reduce using rule 259 (integer_param_opt -> empty .)
    EXCEPT          reduce using rule 259 (integer_param_opt -> empty .)
    ORDER           reduce using rule 259 (integer_param_opt -> empty .)
    LIMIT           reduce using rule 259 (integer_param_opt -> empty .)
    FOR             reduce using rule 259 (integer_param_opt -> empty .)
    $end            reduce using rule 259 (integer_param_opt -> empty .)
    RPAREN          reduce using rule 259 (integer_param_opt -> empty .)
    REGEXP          reduce using rule 259 (integer_param_opt -> empty .)
    IS              reduce using rule 259 (integer_param_opt -> empty .)
    EQ              reduce using rule 259 (integer_param_opt -> empty .)
    NE              reduce using rule 259 (integer_param_opt -> empty .)
    LT              reduce using rule 259 (integer_param_opt -> empty .)
    LE              reduce using rule 259 (integer_param_opt -> empty .)
    GT              reduce using rule 259 (integer_param_opt -> empty .)
    GE              reduce using rule 259 (integer_param_opt -> empty .)
    NOT             reduce using rule 259 (integer_param_opt -> empty .)
    BETWEEN         reduce using rule 259 (integer_param_opt -> empty .)
    IN              reduce using rule 259 (integer_param_opt -> empty .)
    LIKE            reduce using rule 259 (integer_param_opt -> empty .)
    OR              reduce using rule 259 (integer_param_opt -> empty .)
    AND             reduce using rule 259 (integer_param_opt -> empty .)
    GROUP           reduce using rule 259 (integer_param_opt -> empty .)
    HAVING          reduce using rule 259 (integer_param_opt -> empty .)
    THEN            reduce using rule 259 (integer_param_opt -> empty .)
    CROSS           reduce using rule 259 (integer_param_opt -> empty .)
    NATURAL         reduce using rule 259 (integer_param_opt -> empty .)
    INNER           reduce using rule 259 (integer_param_opt -> empty .)
    LEFT            reduce using rule 259 (integer_param_opt -> empty .)
    RIGHT           reduce using rule 259 (integer_param_opt -> empty .)
    FULL            reduce using rule 259 (integer_param_opt -> empty .)
    JOIN            reduce using rule 259 (integer_param_opt -> empty .)
    SET             reduce using rule 259 (integer_param_opt -> empty .)
    WHERE           reduce using rule 259 (integer_param_opt -> empty .)
    VALUES          reduce using rule 259 (integer_param_opt -> empty .)
    LPAREN          reduce using rule 259 (integer_param_opt -> empty .)
    SELECT          reduce using rule 259 (integer_param_opt -> empty .)
    ON              reduce using rule 259 (integer_param_opt -> empty .)
    USING           reduce using rule 259 (integer_param_opt -> empty .)
    ASC             reduce using rule 259 (integer_param_opt -> empty .)
    DESC            reduce using rule 259 (integer_param_opt -> empty .)
    NULLS           reduce using rule 259 (integer_param_opt -> empty .)
    WHEN            reduce using rule 259 (integer_param_opt -> empty .)
    END             reduce using rule 259 (integer_param_opt -> empty .)
    ELSE            reduce using rule 259 (integer_param_opt -> empty .)


state 245

    (238) date_time -> CURRENT_TIMESTAMP integer_param_opt .

    ASTERISK        reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    SLASH           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    PERCENT         reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    CONCAT          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    PLUS            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    MINUS           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    AS              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    IDENTIFIER      reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NON_RESERVED    reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    COMMA           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    FROM            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    INTERSECT       reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    UNION           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    EXCEPT          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ORDER           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LIMIT           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    FOR             reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    $end            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    RPAREN          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    REGEXP          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    IS              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    EQ              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NE              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LT              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LE              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    GT              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    GE              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NOT             reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    BETWEEN         reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    IN              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LIKE            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    OR              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    AND             reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    GROUP           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    HAVING          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    THEN            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    CROSS           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NATURAL         reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    INNER           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LEFT            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    RIGHT           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    FULL            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    JOIN            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    SET             reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    WHERE           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    VALUES          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LPAREN          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    SELECT          reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ON              reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    USING           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ASC             reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    DESC            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NULLS           reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    WHEN            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    END             reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ELSE            reduce using rule 238 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)


state 246

    (239) date_time -> LOCALTIME integer_param_opt .

    ASTERISK        reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    SLASH           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    PERCENT         reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    CONCAT          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    PLUS            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    MINUS           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    AS              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    IDENTIFIER      reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    NON_RESERVED    reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    COMMA           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    FROM            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    INTERSECT       reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    UNION           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    EXCEPT          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    ORDER           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    LIMIT           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    FOR             reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    $end            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    RPAREN          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    REGEXP          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    IS              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    EQ              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    NE              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    LT              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    LE              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    GT              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    GE              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    NOT             reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    BETWEEN         reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    IN              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    LIKE            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    OR              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    AND             reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    GROUP           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    HAVING          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    THEN            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    CROSS           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    NATURAL         reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    INNER           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    LEFT            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    RIGHT           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    FULL            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    JOIN            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    SET             reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    WHERE           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    VALUES          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    LPAREN          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    SELECT          reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    ON              reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    USING           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    ASC             reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    DESC            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    NULLS           reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    WHEN            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    END             reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)
    ELSE            reduce using rule 239 (date_time -> LOCALTIME integer_param_opt .)


state 247

    (240) date_time -> LOCALTIMESTAMP integer_param_opt .

    ASTERISK        reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    SLASH           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    PERCENT         reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    CONCAT          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    PLUS            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    MINUS           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    AS              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    IDENTIFIER      reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NON_RESERVED    reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    COMMA           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    FROM            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    INTERSECT       reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    UNION           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    EXCEPT          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ORDER           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LIMIT           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    FOR             reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    $end            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    RPAREN          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    REGEXP          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    IS              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    EQ              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NE              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LT              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LE              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    GT              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    GE              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NOT             reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    BETWEEN         reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    IN              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LIKE            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    OR              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    AND             reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    GROUP           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    HAVING          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    THEN            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    CROSS           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NATURAL         reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    INNER           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LEFT            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    RIGHT           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    FULL            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    JOIN            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    SET             reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    WHERE           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    VALUES          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LPAREN          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    SELECT          reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ON              reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    USING           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ASC             reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    DESC            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NULLS           reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    WHEN            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    END             reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ELSE            reduce using rule 240 (date_time -> LOCALTIMESTAMP integer_param_opt .)


state 248

    (220) cast_specification -> CAST LPAREN . value_expression AS data_type RPAREN
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 299
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 249

    (218) simple_case -> CASE value_expression . when_clauses else_opt END
    (221) when_clauses -> . when_clauses when_clause
    (222) when_clauses -> . when_clause
    (223) when_clause -> . WHEN search_condition THEN value_expression

    WHEN            shift and go to state 252

    when_clauses                   shift and go to state 300
    when_clause                    shift and go to state 251

state 250

    (219) searched_case -> CASE when_clauses . else_opt END
    (221) when_clauses -> when_clauses . when_clause
    (224) else_opt -> . ELSE value_expression
    (225) else_opt -> . empty
    (223) when_clause -> . WHEN search_condition THEN value_expression
    (271) empty -> .

    ELSE            shift and go to state 303
    WHEN            shift and go to state 252
    END             reduce using rule 271 (empty -> .)

    else_opt                       shift and go to state 301
    when_clause                    shift and go to state 302
    empty                          shift and go to state 304

state 251

    (222) when_clauses -> when_clause .

    ELSE            reduce using rule 222 (when_clauses -> when_clause .)
    WHEN            reduce using rule 222 (when_clauses -> when_clause .)
    END             reduce using rule 222 (when_clauses -> when_clause .)


state 252

    (223) when_clause -> WHEN . search_condition THEN value_expression
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 305
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 253

    (11) column -> identifier . column_type
    (12) column -> identifier . column_type UNIQUE
    (13) column_type -> . INT column_end
    (14) column_type -> . INT LPAREN INTEGER RPAREN column_end
    (15) column_type -> . FLOAT column_end
    (16) column_type -> . BIGINT column_end
    (17) column_type -> . BIGINT LPAREN INTEGER RPAREN column_end
    (18) column_type -> . TINYINT LPAREN INTEGER RPAREN column_end
    (19) column_type -> . DATETIME column_end
    (20) column_type -> . DATETIME LPAREN INTEGER RPAREN column_end
    (21) column_type -> . VARCHAR LPAREN INTEGER RPAREN column_end
    (22) column_type -> . CHAR LPAREN INTEGER RPAREN column_end
    (23) column_type -> . TIMESTAMP column_end

    INT             shift and go to state 307
    FLOAT           shift and go to state 308
    BIGINT          shift and go to state 309
    TINYINT         shift and go to state 310
    DATETIME        shift and go to state 311
    VARCHAR         shift and go to state 312
    CHAR            shift and go to state 313
    TIMESTAMP       shift and go to state 314

    column_type                    shift and go to state 306

state 254

    (5) create_table -> CREATE TABLE identifier LPAREN column_list . RPAREN create_table_end
    (6) create_table -> CREATE TABLE identifier LPAREN column_list . COMMA primary_clause RPAREN create_table_end
    (10) column_list -> column_list . COMMA column

    RPAREN          shift and go to state 315
    COMMA           shift and go to state 316


state 255

    (9) column_list -> column .

    RPAREN          reduce using rule 9 (column_list -> column .)
    COMMA           reduce using rule 9 (column_list -> column .)


state 256

    (65) subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .

    AS              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    IDENTIFIER      reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ASTERISK        reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NON_RESERVED    reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    CROSS           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NATURAL         reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    INNER           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LEFT            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    RIGHT           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    FULL            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    JOIN            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    SET             reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    COMMA           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    WHERE           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ORDER           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LIMIT           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    $end            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    SLASH           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    PERCENT         reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    CONCAT          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    PLUS            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    MINUS           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    FROM            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    INTERSECT       reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    UNION           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    EXCEPT          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    FOR             reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    RPAREN          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    REGEXP          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    IS              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    EQ              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NE              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LT              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LE              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    GT              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    GE              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NOT             reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    BETWEEN         reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    IN              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LIKE            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    OR              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    AND             reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    GROUP           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    HAVING          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    THEN            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    VALUES          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LPAREN          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    SELECT          reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ON              reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    USING           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ASC             reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    DESC            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NULLS           reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    WHEN            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    END             reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ELSE            reduce using rule 65 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)


state 257

    (66) for_update_opt -> FOR UPDATE .
    (67) for_update_opt -> FOR UPDATE . NOWAIT
    (68) for_update_opt -> FOR UPDATE . WAIT INTEGER

    $end            reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    INTERSECT       reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    UNION           reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    EXCEPT          reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    ORDER           reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    LIMIT           reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    FOR             reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    RPAREN          reduce using rule 66 (for_update_opt -> FOR UPDATE .)
    NOWAIT          shift and go to state 317
    WAIT            shift and go to state 318


state 258

    (85) limit_opt -> LIMIT INTEGER COMMA . INTEGER

    INTEGER         shift and go to state 319


state 259

    (89) limit_opt -> LIMIT INTEGER OFFSET . INTEGER

    INTEGER         shift and go to state 320


state 260

    (87) limit_opt -> LIMIT QM COMMA . QM

    QM              shift and go to state 321


state 261

    (76) sort_items -> sort_items COMMA . sort_item
    (77) sort_item -> . value_expression order_opt null_ordering_opt
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    sort_item                      shift and go to state 322
    value_expression               shift and go to state 196
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 262

    (77) sort_item -> value_expression order_opt . null_ordering_opt
    (81) null_ordering_opt -> . NULLS FIRST
    (82) null_ordering_opt -> . NULLS LAST
    (83) null_ordering_opt -> . empty
    (271) empty -> .

    NULLS           shift and go to state 324
    COMMA           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    null_ordering_opt              shift and go to state 323
    empty                          shift and go to state 325

state 263

    (78) order_opt -> ASC .

    NULLS           reduce using rule 78 (order_opt -> ASC .)
    COMMA           reduce using rule 78 (order_opt -> ASC .)
    LIMIT           reduce using rule 78 (order_opt -> ASC .)
    FOR             reduce using rule 78 (order_opt -> ASC .)
    $end            reduce using rule 78 (order_opt -> ASC .)
    RPAREN          reduce using rule 78 (order_opt -> ASC .)


state 264

    (79) order_opt -> DESC .

    NULLS           reduce using rule 79 (order_opt -> DESC .)
    COMMA           reduce using rule 79 (order_opt -> DESC .)
    LIMIT           reduce using rule 79 (order_opt -> DESC .)
    FOR             reduce using rule 79 (order_opt -> DESC .)
    $end            reduce using rule 79 (order_opt -> DESC .)
    RPAREN          reduce using rule 79 (order_opt -> DESC .)


state 265

    (80) order_opt -> empty .

    NULLS           reduce using rule 80 (order_opt -> empty .)
    COMMA           reduce using rule 80 (order_opt -> empty .)
    LIMIT           reduce using rule 80 (order_opt -> empty .)
    FOR             reduce using rule 80 (order_opt -> empty .)
    $end            reduce using rule 80 (order_opt -> empty .)
    RPAREN          reduce using rule 80 (order_opt -> empty .)


state 266

    (59) delete -> DELETE FROM relations where_opt order_by_opt . limit_opt
    (84) limit_opt -> . LIMIT INTEGER
    (85) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (86) limit_opt -> . LIMIT QM
    (87) limit_opt -> . LIMIT QM COMMA QM
    (88) limit_opt -> . LIMIT ALL
    (89) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (90) limit_opt -> . empty
    (271) empty -> .

    LIMIT           shift and go to state 104
    $end            reduce using rule 271 (empty -> .)

    limit_opt                      shift and go to state 326
    empty                          shift and go to state 105

state 267

    (106) where_opt -> WHERE search_condition .
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

    ORDER           reduce using rule 106 (where_opt -> WHERE search_condition .)
    LIMIT           reduce using rule 106 (where_opt -> WHERE search_condition .)
    $end            reduce using rule 106 (where_opt -> WHERE search_condition .)
    GROUP           reduce using rule 106 (where_opt -> WHERE search_condition .)
    HAVING          reduce using rule 106 (where_opt -> WHERE search_condition .)
    FOR             reduce using rule 106 (where_opt -> WHERE search_condition .)
    INTERSECT       reduce using rule 106 (where_opt -> WHERE search_condition .)
    UNION           reduce using rule 106 (where_opt -> WHERE search_condition .)
    EXCEPT          reduce using rule 106 (where_opt -> WHERE search_condition .)
    RPAREN          reduce using rule 106 (where_opt -> WHERE search_condition .)
    OR              shift and go to state 120
    AND             shift and go to state 121


state 268

    (107) where_opt -> WHERE LPAREN . search_condition RPAREN
    (156) search_condition -> LPAREN . search_condition RPAREN
    (160) boolean_term -> LPAREN . boolean_term RPAREN
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 327
    boolean_term                   shift and go to state 123
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 269

    (60) update -> UPDATE relations SET update_set_list where_opt . order_by_opt limit_opt
    (73) order_by_opt -> . ORDER BY sort_items
    (74) order_by_opt -> . empty
    (271) empty -> .

    ORDER           shift and go to state 50
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)

    order_by_opt                   shift and go to state 328
    empty                          shift and go to state 51

state 270

    (62) update_set_list -> update_set_list COMMA . update_set
    (63) update_set -> . comparison_predicate
    (172) comparison_predicate -> . value_expression comparison_operator value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    update_set                     shift and go to state 329
    comparison_predicate           shift and go to state 202
    value_expression               shift and go to state 203
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 271

    (51) insert -> INSERT ignore INTO table_reference VALUES . LPAREN insert_value RPAREN

    LPAREN          shift and go to state 330


state 272

    (52) insert -> INSERT ignore INTO table_reference LPAREN . index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (53) insert -> INSERT ignore INTO table_reference LPAREN . index_column_list RPAREN query_spec
    (43) index_column_list -> . identifier
    (44) index_column_list -> . index_column_list COMMA identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    index_column_list              shift and go to state 331
    identifier                     shift and go to state 332
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 273

    (54) insert -> INSERT ignore INTO table_reference query_spec .

    $end            reduce using rule 54 (insert -> INSERT ignore INTO table_reference query_spec .)


state 274

    (135) qualified_join -> table_reference join_type JOIN table_reference join_criteria .

    ORDER           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    LIMIT           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    FOR             reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    $end            reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    CROSS           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    NATURAL         reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    INNER           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    LEFT            reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    RIGHT           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    FULL            reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    JOIN            reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    RPAREN          reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    SET             reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    COMMA           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    WHERE           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    GROUP           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    HAVING          reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    INTERSECT       reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    UNION           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    EXCEPT          reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    VALUES          reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    LPAREN          reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    SELECT          reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    ON              reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    USING           reduce using rule 135 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)


state 275

    (144) join_criteria -> ON . search_condition
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 333
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 276

    (145) join_criteria -> USING . LPAREN join_columns RPAREN

    LPAREN          shift and go to state 334


state 277

    (146) join_criteria -> empty .
    (141) join_type -> empty .

  ! reduce/reduce conflict for JOIN resolved using rule 141 (join_type -> empty .)
    ORDER           reduce using rule 146 (join_criteria -> empty .)
    LIMIT           reduce using rule 146 (join_criteria -> empty .)
    FOR             reduce using rule 146 (join_criteria -> empty .)
    $end            reduce using rule 146 (join_criteria -> empty .)
    CROSS           reduce using rule 146 (join_criteria -> empty .)
    NATURAL         reduce using rule 146 (join_criteria -> empty .)
    INNER           reduce using rule 146 (join_criteria -> empty .)
    LEFT            reduce using rule 146 (join_criteria -> empty .)
    RIGHT           reduce using rule 146 (join_criteria -> empty .)
    FULL            reduce using rule 146 (join_criteria -> empty .)
    RPAREN          reduce using rule 146 (join_criteria -> empty .)
    SET             reduce using rule 146 (join_criteria -> empty .)
    COMMA           reduce using rule 146 (join_criteria -> empty .)
    WHERE           reduce using rule 146 (join_criteria -> empty .)
    GROUP           reduce using rule 146 (join_criteria -> empty .)
    HAVING          reduce using rule 146 (join_criteria -> empty .)
    INTERSECT       reduce using rule 146 (join_criteria -> empty .)
    UNION           reduce using rule 146 (join_criteria -> empty .)
    EXCEPT          reduce using rule 146 (join_criteria -> empty .)
    VALUES          reduce using rule 146 (join_criteria -> empty .)
    LPAREN          reduce using rule 146 (join_criteria -> empty .)
    SELECT          reduce using rule 146 (join_criteria -> empty .)
    ON              reduce using rule 146 (join_criteria -> empty .)
    USING           reduce using rule 146 (join_criteria -> empty .)
    JOIN            reduce using rule 141 (join_type -> empty .)

  ! JOIN            [ reduce using rule 146 (join_criteria -> empty .) ]


state 278

    (136) natural_join -> table_reference NATURAL join_type JOIN table_primary .

    ORDER           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    LIMIT           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    FOR             reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    $end            reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    CROSS           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    NATURAL         reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    INNER           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    LEFT            reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    RIGHT           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    FULL            reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    JOIN            reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    RPAREN          reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    SET             reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    COMMA           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    WHERE           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    GROUP           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    HAVING          reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    INTERSECT       reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    UNION           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    EXCEPT          reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    VALUES          reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    LPAREN          reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    SELECT          reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    ON              reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    USING           reduce using rule 136 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)


state 279

    (172) comparison_predicate -> value_expression comparison_operator value_expression .

    OR              reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    AND             reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    COMMA           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    INTERSECT       reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    UNION           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    EXCEPT          reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    ORDER           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    LIMIT           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    FOR             reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    $end            reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    RPAREN          reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    GROUP           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    HAVING          reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    THEN            reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    CROSS           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    NATURAL         reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    INNER           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    LEFT            reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    RIGHT           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    FULL            reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    JOIN            reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    SET             reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    WHERE           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    VALUES          reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    LPAREN          reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    SELECT          reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    ON              reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)
    USING           reduce using rule 172 (comparison_predicate -> value_expression comparison_operator value_expression .)


state 280

    (173) between_predicate -> value_expression not_opt BETWEEN . value_expression AND value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 335
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 281

    (174) in_predicate -> value_expression not_opt IN . in_value
    (175) in_value -> . LPAREN in_expressions RPAREN
    (176) in_value -> . subquery
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN

    LPAREN          shift and go to state 337

    in_value                       shift and go to state 336
    subquery                       shift and go to state 338

state 282

    (179) like_predicate -> value_expression not_opt LIKE . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 339
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 283

    (180) regexp_predicate -> value_expression REGEXP value_expression .

    OR              reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    AND             reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    COMMA           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    INTERSECT       reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    UNION           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    EXCEPT          reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    ORDER           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    LIMIT           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    FOR             reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    $end            reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    RPAREN          reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    GROUP           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    HAVING          reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    THEN            reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    CROSS           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    NATURAL         reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    INNER           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    LEFT            reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    RIGHT           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    FULL            reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    JOIN            reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    SET             reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    WHERE           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    VALUES          reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    LPAREN          reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    SELECT          reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    ON              reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)
    USING           reduce using rule 180 (regexp_predicate -> value_expression REGEXP value_expression .)


state 284

    (181) null_predicate -> value_expression IS not_opt . NULL

    NULL            shift and go to state 340


state 285

    (97) nonjoin_query_primary -> LPAREN nonjoin_query_expression . RPAREN
    (92) nonjoin_query_expression -> nonjoin_query_expression . UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> nonjoin_query_expression . EXCEPT set_quantifier_opt nonjoin_query_term

    RPAREN          shift and go to state 101
    UNION           shift and go to state 77
    EXCEPT          shift and go to state 78


state 286

    (123) table_expression_opt -> FROM relations where_opt . group_by_opt having_opt for_update_opt
    (109) group_by_opt -> . GROUP BY grouping_expressions
    (110) group_by_opt -> . empty
    (271) empty -> .

    GROUP           shift and go to state 342
    HAVING          reduce using rule 271 (empty -> .)
    FOR             reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    group_by_opt                   shift and go to state 341
    empty                          shift and go to state 343

state 287

    (120) select_item -> DISTINCT LPAREN derived_column RPAREN .

    COMMA           reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    FROM            reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    INTERSECT       reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    UNION           reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    EXCEPT          reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    ORDER           reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    LIMIT           reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    FOR             reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    $end            reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    RPAREN          reduce using rule 120 (select_item -> DISTINCT LPAREN derived_column RPAREN .)


state 288

    (195) parenthetic_primary_expression -> LPAREN value_expression RPAREN .

    ASTERISK        reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    SLASH           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    PERCENT         reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    CONCAT          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    PLUS            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    MINUS           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    AS              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    IDENTIFIER      reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NON_RESERVED    reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    COMMA           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    FROM            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    INTERSECT       reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    UNION           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    EXCEPT          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ORDER           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LIMIT           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    FOR             reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    $end            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    RPAREN          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    REGEXP          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    IS              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    EQ              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NE              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LT              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LE              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    GT              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    GE              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NOT             reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    BETWEEN         reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    IN              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LIKE            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    OR              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    AND             reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    GROUP           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    HAVING          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    THEN            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    CROSS           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NATURAL         reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    INNER           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LEFT            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    RIGHT           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    FULL            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    JOIN            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    SET             reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    WHERE           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    VALUES          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LPAREN          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    SELECT          reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ON              reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    USING           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ASC             reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    DESC            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NULLS           reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    WHEN            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    END             reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ELSE            reduce using rule 195 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)


state 289

    (196) parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .

    ASTERISK        reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    SLASH           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    PERCENT         reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    CONCAT          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    PLUS            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    MINUS           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    AS              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    IDENTIFIER      reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NON_RESERVED    reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    COMMA           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    FROM            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    INTERSECT       reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    UNION           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    EXCEPT          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ORDER           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LIMIT           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    FOR             reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    $end            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    RPAREN          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    REGEXP          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    IS              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    EQ              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NE              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LT              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LE              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    GT              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    GE              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NOT             reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    BETWEEN         reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    IN              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LIKE            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    OR              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    AND             reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    GROUP           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    HAVING          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    THEN            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    CROSS           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NATURAL         reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    INNER           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LEFT            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    RIGHT           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    FULL            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    JOIN            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    SET             reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    WHERE           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    VALUES          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LPAREN          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    SELECT          reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ON              reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    USING           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ASC             reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    DESC            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NULLS           reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    WHEN            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    END             reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ELSE            reduce using rule 196 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)


state 290

    (210) function_call -> qualified_name LPAREN call_args . RPAREN

    RPAREN          shift and go to state 344


state 291

    (211) function_call -> qualified_name LPAREN DISTINCT . call_args RPAREN
    (212) call_args -> . call_list
    (213) call_args -> . empty_call_args
    (226) call_list -> . call_list COMMA expression
    (227) call_list -> . expression
    (214) empty_call_args -> . ASTERISK
    (215) empty_call_args -> . empty
    (154) expression -> . search_condition
    (271) empty -> .
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty

  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ASTERISK        shift and go to state 295
    RPAREN          reduce using rule 271 (empty -> .)
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 271 (empty -> .) ]

    call_args                      shift and go to state 345
    call_list                      shift and go to state 292
    empty_call_args                shift and go to state 293
    expression                     shift and go to state 294
    empty                          shift and go to state 296
    search_condition               shift and go to state 70
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74

state 292

    (212) call_args -> call_list .
    (226) call_list -> call_list . COMMA expression

    RPAREN          reduce using rule 212 (call_args -> call_list .)
    COMMA           shift and go to state 346


state 293

    (213) call_args -> empty_call_args .

    RPAREN          reduce using rule 213 (call_args -> empty_call_args .)


state 294

    (227) call_list -> expression .

    COMMA           reduce using rule 227 (call_list -> expression .)
    RPAREN          reduce using rule 227 (call_list -> expression .)


state 295

    (214) empty_call_args -> ASTERISK .

    RPAREN          reduce using rule 214 (empty_call_args -> ASTERISK .)


state 296

    (215) empty_call_args -> empty .
    (250) not_opt -> empty .

    RPAREN          reduce using rule 215 (empty_call_args -> empty .)
    EXISTS          reduce using rule 250 (not_opt -> empty .)
    PLUS            reduce using rule 250 (not_opt -> empty .)
    MINUS           reduce using rule 250 (not_opt -> empty .)
    LPAREN          reduce using rule 250 (not_opt -> empty .)
    NULL            reduce using rule 250 (not_opt -> empty .)
    SCONST          reduce using rule 250 (not_opt -> empty .)
    QUOTED_IDENTIFIER reduce using rule 250 (not_opt -> empty .)
    QM              reduce using rule 250 (not_opt -> empty .)
    CURRENT_DATE    reduce using rule 250 (not_opt -> empty .)
    CURRENT_TIME    reduce using rule 250 (not_opt -> empty .)
    CURRENT_TIMESTAMP reduce using rule 250 (not_opt -> empty .)
    LOCALTIME       reduce using rule 250 (not_opt -> empty .)
    LOCALTIMESTAMP  reduce using rule 250 (not_opt -> empty .)
    CAST            reduce using rule 250 (not_opt -> empty .)
    DECIMAL         reduce using rule 250 (not_opt -> empty .)
    INTEGER         reduce using rule 250 (not_opt -> empty .)
    TRUE            reduce using rule 250 (not_opt -> empty .)
    FALSE           reduce using rule 250 (not_opt -> empty .)
    IDENTIFIER      reduce using rule 250 (not_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 250 (not_opt -> empty .)
    ASTERISK        reduce using rule 250 (not_opt -> empty .)
    CASE            reduce using rule 250 (not_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 250 (not_opt -> empty .)
    NON_RESERVED    reduce using rule 250 (not_opt -> empty .)


state 297

    (257) integer_param_opt -> LPAREN INTEGER . RPAREN

    RPAREN          shift and go to state 347


state 298

    (258) integer_param_opt -> LPAREN RPAREN .

    ASTERISK        reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    SLASH           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    PERCENT         reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    CONCAT          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    PLUS            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    MINUS           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    AS              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    NON_RESERVED    reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    COMMA           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    FROM            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    INTERSECT       reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    UNION           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    EXCEPT          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    ORDER           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    LIMIT           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    FOR             reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    $end            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    RPAREN          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    REGEXP          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    IS              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    EQ              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    NE              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    LT              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    LE              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    GT              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    GE              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    NOT             reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    BETWEEN         reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    IN              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    LIKE            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    OR              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    AND             reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    GROUP           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    HAVING          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    THEN            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    CROSS           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    NATURAL         reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    INNER           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    LEFT            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    RIGHT           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    FULL            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    JOIN            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    SET             reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    WHERE           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    VALUES          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    LPAREN          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    SELECT          reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    ON              reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    USING           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    ASC             reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    DESC            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    NULLS           reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    WHEN            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    END             reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)
    ELSE            reduce using rule 258 (integer_param_opt -> LPAREN RPAREN .)


state 299

    (220) cast_specification -> CAST LPAREN value_expression . AS data_type RPAREN

    AS              shift and go to state 348


state 300

    (218) simple_case -> CASE value_expression when_clauses . else_opt END
    (221) when_clauses -> when_clauses . when_clause
    (224) else_opt -> . ELSE value_expression
    (225) else_opt -> . empty
    (223) when_clause -> . WHEN search_condition THEN value_expression
    (271) empty -> .

    ELSE            shift and go to state 303
    WHEN            shift and go to state 252
    END             reduce using rule 271 (empty -> .)

    else_opt                       shift and go to state 349
    when_clause                    shift and go to state 302
    empty                          shift and go to state 304

state 301

    (219) searched_case -> CASE when_clauses else_opt . END

    END             shift and go to state 350


state 302

    (221) when_clauses -> when_clauses when_clause .

    ELSE            reduce using rule 221 (when_clauses -> when_clauses when_clause .)
    WHEN            reduce using rule 221 (when_clauses -> when_clauses when_clause .)
    END             reduce using rule 221 (when_clauses -> when_clauses when_clause .)


state 303

    (224) else_opt -> ELSE . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 351
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 304

    (225) else_opt -> empty .

    END             reduce using rule 225 (else_opt -> empty .)


state 305

    (223) when_clause -> WHEN search_condition . THEN value_expression
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

    THEN            shift and go to state 352
    OR              shift and go to state 120
    AND             shift and go to state 121


state 306

    (11) column -> identifier column_type .
    (12) column -> identifier column_type . UNIQUE

    RPAREN          reduce using rule 11 (column -> identifier column_type .)
    COMMA           reduce using rule 11 (column -> identifier column_type .)
    UNIQUE          shift and go to state 353


state 307

    (13) column_type -> INT . column_end
    (14) column_type -> INT . LPAREN INTEGER RPAREN column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    LPAREN          shift and go to state 355
    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 354
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 308

    (15) column_type -> FLOAT . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 359
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 309

    (16) column_type -> BIGINT . column_end
    (17) column_type -> BIGINT . LPAREN INTEGER RPAREN column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    LPAREN          shift and go to state 361
    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 360
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 310

    (18) column_type -> TINYINT . LPAREN INTEGER RPAREN column_end

    LPAREN          shift and go to state 362


state 311

    (19) column_type -> DATETIME . column_end
    (20) column_type -> DATETIME . LPAREN INTEGER RPAREN column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    LPAREN          shift and go to state 364
    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 363
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 312

    (21) column_type -> VARCHAR . LPAREN INTEGER RPAREN column_end

    LPAREN          shift and go to state 365


state 313

    (22) column_type -> CHAR . LPAREN INTEGER RPAREN column_end

    LPAREN          shift and go to state 366


state 314

    (23) column_type -> TIMESTAMP . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 367
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 315

    (5) create_table -> CREATE TABLE identifier LPAREN column_list RPAREN . create_table_end
    (7) create_table_end -> . ENGINE EQ identifier DEFAULT CHARSET EQ identifier
    (8) create_table_end -> . DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    ENGINE          shift and go to state 369
    DEFAULT         shift and go to state 370

    create_table_end               shift and go to state 368

state 316

    (6) create_table -> CREATE TABLE identifier LPAREN column_list COMMA . primary_clause RPAREN create_table_end
    (10) column_list -> column_list COMMA . column
    (37) primary_clause -> . PRIMARY KEY LPAREN index_column_list RPAREN
    (38) primary_clause -> . PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list
    (11) column -> . identifier column_type
    (12) column -> . identifier column_type UNIQUE
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    PRIMARY         shift and go to state 373
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 253
    primary_clause                 shift and go to state 371
    column                         shift and go to state 372
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 317

    (67) for_update_opt -> FOR UPDATE NOWAIT .

    $end            reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)
    INTERSECT       reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)
    UNION           reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)
    EXCEPT          reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)
    ORDER           reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)
    LIMIT           reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)
    FOR             reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)
    RPAREN          reduce using rule 67 (for_update_opt -> FOR UPDATE NOWAIT .)


state 318

    (68) for_update_opt -> FOR UPDATE WAIT . INTEGER

    INTEGER         shift and go to state 374


state 319

    (85) limit_opt -> LIMIT INTEGER COMMA INTEGER .

    FOR             reduce using rule 85 (limit_opt -> LIMIT INTEGER COMMA INTEGER .)
    $end            reduce using rule 85 (limit_opt -> LIMIT INTEGER COMMA INTEGER .)
    RPAREN          reduce using rule 85 (limit_opt -> LIMIT INTEGER COMMA INTEGER .)


state 320

    (89) limit_opt -> LIMIT INTEGER OFFSET INTEGER .

    FOR             reduce using rule 89 (limit_opt -> LIMIT INTEGER OFFSET INTEGER .)
    $end            reduce using rule 89 (limit_opt -> LIMIT INTEGER OFFSET INTEGER .)
    RPAREN          reduce using rule 89 (limit_opt -> LIMIT INTEGER OFFSET INTEGER .)


state 321

    (87) limit_opt -> LIMIT QM COMMA QM .

    FOR             reduce using rule 87 (limit_opt -> LIMIT QM COMMA QM .)
    $end            reduce using rule 87 (limit_opt -> LIMIT QM COMMA QM .)
    RPAREN          reduce using rule 87 (limit_opt -> LIMIT QM COMMA QM .)


state 322

    (76) sort_items -> sort_items COMMA sort_item .

    COMMA           reduce using rule 76 (sort_items -> sort_items COMMA sort_item .)
    LIMIT           reduce using rule 76 (sort_items -> sort_items COMMA sort_item .)
    FOR             reduce using rule 76 (sort_items -> sort_items COMMA sort_item .)
    $end            reduce using rule 76 (sort_items -> sort_items COMMA sort_item .)
    RPAREN          reduce using rule 76 (sort_items -> sort_items COMMA sort_item .)


state 323

    (77) sort_item -> value_expression order_opt null_ordering_opt .

    COMMA           reduce using rule 77 (sort_item -> value_expression order_opt null_ordering_opt .)
    LIMIT           reduce using rule 77 (sort_item -> value_expression order_opt null_ordering_opt .)
    FOR             reduce using rule 77 (sort_item -> value_expression order_opt null_ordering_opt .)
    $end            reduce using rule 77 (sort_item -> value_expression order_opt null_ordering_opt .)
    RPAREN          reduce using rule 77 (sort_item -> value_expression order_opt null_ordering_opt .)


state 324

    (81) null_ordering_opt -> NULLS . FIRST
    (82) null_ordering_opt -> NULLS . LAST

    FIRST           shift and go to state 375
    LAST            shift and go to state 376


state 325

    (83) null_ordering_opt -> empty .

    COMMA           reduce using rule 83 (null_ordering_opt -> empty .)
    LIMIT           reduce using rule 83 (null_ordering_opt -> empty .)
    FOR             reduce using rule 83 (null_ordering_opt -> empty .)
    $end            reduce using rule 83 (null_ordering_opt -> empty .)
    RPAREN          reduce using rule 83 (null_ordering_opt -> empty .)


state 326

    (59) delete -> DELETE FROM relations where_opt order_by_opt limit_opt .

    $end            reduce using rule 59 (delete -> DELETE FROM relations where_opt order_by_opt limit_opt .)


state 327

    (107) where_opt -> WHERE LPAREN search_condition . RPAREN
    (156) search_condition -> LPAREN search_condition . RPAREN
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

    RPAREN          shift and go to state 377
    OR              shift and go to state 120
    AND             shift and go to state 121


state 328

    (60) update -> UPDATE relations SET update_set_list where_opt order_by_opt . limit_opt
    (84) limit_opt -> . LIMIT INTEGER
    (85) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (86) limit_opt -> . LIMIT QM
    (87) limit_opt -> . LIMIT QM COMMA QM
    (88) limit_opt -> . LIMIT ALL
    (89) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (90) limit_opt -> . empty
    (271) empty -> .

    LIMIT           shift and go to state 104
    $end            reduce using rule 271 (empty -> .)

    limit_opt                      shift and go to state 378
    empty                          shift and go to state 105

state 329

    (62) update_set_list -> update_set_list COMMA update_set .

    COMMA           reduce using rule 62 (update_set_list -> update_set_list COMMA update_set .)
    WHERE           reduce using rule 62 (update_set_list -> update_set_list COMMA update_set .)
    ORDER           reduce using rule 62 (update_set_list -> update_set_list COMMA update_set .)
    LIMIT           reduce using rule 62 (update_set_list -> update_set_list COMMA update_set .)
    $end            reduce using rule 62 (update_set_list -> update_set_list COMMA update_set .)


state 330

    (51) insert -> INSERT ignore INTO table_reference VALUES LPAREN . insert_value RPAREN
    (55) insert_value -> . value
    (56) insert_value -> . insert_value COMMA value
    (204) value -> . NULL
    (205) value -> . SCONST
    (206) value -> . number
    (207) value -> . boolean_value
    (208) value -> . QUOTED_IDENTIFIER
    (209) value -> . QM
    (269) number -> . DECIMAL
    (270) number -> . INTEGER
    (251) boolean_value -> . TRUE
    (252) boolean_value -> . FALSE

    NULL            shift and go to state 165
    SCONST          shift and go to state 166
    QUOTED_IDENTIFIER shift and go to state 169
    QM              shift and go to state 170
    DECIMAL         shift and go to state 179
    INTEGER         shift and go to state 180
    TRUE            shift and go to state 181
    FALSE           shift and go to state 182

    insert_value                   shift and go to state 379
    value                          shift and go to state 380
    number                         shift and go to state 167
    boolean_value                  shift and go to state 168

state 331

    (52) insert -> INSERT ignore INTO table_reference LPAREN index_column_list . RPAREN VALUES LPAREN insert_value RPAREN
    (53) insert -> INSERT ignore INTO table_reference LPAREN index_column_list . RPAREN query_spec
    (44) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 381
    COMMA           shift and go to state 382


state 332

    (43) index_column_list -> identifier .

    RPAREN          reduce using rule 43 (index_column_list -> identifier .)
    COMMA           reduce using rule 43 (index_column_list -> identifier .)


state 333

    (144) join_criteria -> ON search_condition .
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

    ORDER           reduce using rule 144 (join_criteria -> ON search_condition .)
    LIMIT           reduce using rule 144 (join_criteria -> ON search_condition .)
    FOR             reduce using rule 144 (join_criteria -> ON search_condition .)
    $end            reduce using rule 144 (join_criteria -> ON search_condition .)
    CROSS           reduce using rule 144 (join_criteria -> ON search_condition .)
    NATURAL         reduce using rule 144 (join_criteria -> ON search_condition .)
    INNER           reduce using rule 144 (join_criteria -> ON search_condition .)
    LEFT            reduce using rule 144 (join_criteria -> ON search_condition .)
    RIGHT           reduce using rule 144 (join_criteria -> ON search_condition .)
    FULL            reduce using rule 144 (join_criteria -> ON search_condition .)
    JOIN            reduce using rule 144 (join_criteria -> ON search_condition .)
    RPAREN          reduce using rule 144 (join_criteria -> ON search_condition .)
    SET             reduce using rule 144 (join_criteria -> ON search_condition .)
    COMMA           reduce using rule 144 (join_criteria -> ON search_condition .)
    WHERE           reduce using rule 144 (join_criteria -> ON search_condition .)
    GROUP           reduce using rule 144 (join_criteria -> ON search_condition .)
    HAVING          reduce using rule 144 (join_criteria -> ON search_condition .)
    INTERSECT       reduce using rule 144 (join_criteria -> ON search_condition .)
    UNION           reduce using rule 144 (join_criteria -> ON search_condition .)
    EXCEPT          reduce using rule 144 (join_criteria -> ON search_condition .)
    VALUES          reduce using rule 144 (join_criteria -> ON search_condition .)
    LPAREN          reduce using rule 144 (join_criteria -> ON search_condition .)
    SELECT          reduce using rule 144 (join_criteria -> ON search_condition .)
    ON              reduce using rule 144 (join_criteria -> ON search_condition .)
    USING           reduce using rule 144 (join_criteria -> ON search_condition .)
    OR              shift and go to state 120
    AND             shift and go to state 121


state 334

    (145) join_criteria -> USING LPAREN . join_columns RPAREN
    (147) join_columns -> . identifier
    (148) join_columns -> . join_columns COMMA identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    join_columns                   shift and go to state 383
    identifier                     shift and go to state 384
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 335

    (173) between_predicate -> value_expression not_opt BETWEEN value_expression . AND value_expression

    AND             shift and go to state 385


state 336

    (174) in_predicate -> value_expression not_opt IN in_value .

    OR              reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    AND             reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    COMMA           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    INTERSECT       reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    UNION           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    EXCEPT          reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    ORDER           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    LIMIT           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    FOR             reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    $end            reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    RPAREN          reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    GROUP           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    HAVING          reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    THEN            reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    CROSS           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    NATURAL         reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    INNER           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    LEFT            reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    RIGHT           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    FULL            reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    JOIN            reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    SET             reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    WHERE           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    VALUES          reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    LPAREN          reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    SELECT          reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    ON              reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)
    USING           reduce using rule 174 (in_predicate -> value_expression not_opt IN in_value .)


state 337

    (175) in_value -> LPAREN . in_expressions RPAREN
    (65) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (177) in_expressions -> . value_expression
    (178) in_expressions -> . in_expressions COMMA value_expression
    (70) query_expression -> . query_expression_body
    (183) value_expression -> . numeric_value_expression
    (71) query_expression_body -> . nonjoin_query_expression
    (72) query_expression_body -> . joined_table
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (91) nonjoin_query_expression -> . nonjoin_query_term
    (92) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (93) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (131) joined_table -> . cross_join
    (132) joined_table -> . qualified_join
    (133) joined_table -> . natural_join
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (94) nonjoin_query_term -> . nonjoin_query_primary
    (95) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (134) cross_join -> . table_reference CROSS JOIN table_primary
    (135) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (136) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (192) factor -> . sign_opt primary_expression
    (96) nonjoin_query_primary -> . simple_table
    (97) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (127) table_reference -> . table_primary
    (128) table_reference -> . joined_table
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (98) simple_table -> . query_spec
    (99) simple_table -> . explicit_table
    (100) simple_table -> . table_value_constructor
    (129) table_primary -> . aliased_relation
    (130) table_primary -> . derived_table
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .
    (105) query_spec -> . SELECT select_items table_expression_opt
    (101) explicit_table -> . TABLE qualified_name
    (102) table_value_constructor -> . VALUES values_list
    (149) aliased_relation -> . qualified_name alias_opt
    (150) derived_table -> . subquery alias_opt
    (260) qualified_name -> . qualified_name PERIOD qualified_name
    (261) qualified_name -> . identifier
    (65) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DIGIT_IDENTIFIER resolved as shift
  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for BACKQUOTED_IDENTIFIER resolved as shift
  ! shift/reduce conflict for NON_RESERVED resolved as shift
    LPAREN          shift and go to state 9
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    SELECT          shift and go to state 35
    TABLE           shift and go to state 7
    VALUES          shift and go to state 19
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 271 (empty -> .) ]
  ! DIGIT_IDENTIFIER [ reduce using rule 271 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 271 (empty -> .) ]
  ! BACKQUOTED_IDENTIFIER [ reduce using rule 271 (empty -> .) ]
  ! NON_RESERVED    [ reduce using rule 271 (empty -> .) ]

    in_expressions                 shift and go to state 386
    query_expression               shift and go to state 48
    value_expression               shift and go to state 387
    query_expression_body          shift and go to state 21
    numeric_value_expression       shift and go to state 85
    nonjoin_query_expression       shift and go to state 22
    joined_table                   shift and go to state 23
    term                           shift and go to state 87
    nonjoin_query_term             shift and go to state 24
    cross_join                     shift and go to state 25
    qualified_join                 shift and go to state 26
    natural_join                   shift and go to state 27
    factor                         shift and go to state 89
    nonjoin_query_primary          shift and go to state 28
    table_reference                shift and go to state 18
    table_primary                  shift and go to state 29
    sign_opt                       shift and go to state 90
    simple_table                   shift and go to state 30
    sign                           shift and go to state 91
    empty                          shift and go to state 92
    query_spec                     shift and go to state 20
    explicit_table                 shift and go to state 31
    table_value_constructor        shift and go to state 32
    aliased_relation               shift and go to state 33
    derived_table                  shift and go to state 34
    qualified_name                 shift and go to state 36
    subquery                       shift and go to state 37
    identifier                     shift and go to state 8
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 338

    (176) in_value -> subquery .

    OR              reduce using rule 176 (in_value -> subquery .)
    AND             reduce using rule 176 (in_value -> subquery .)
    COMMA           reduce using rule 176 (in_value -> subquery .)
    INTERSECT       reduce using rule 176 (in_value -> subquery .)
    UNION           reduce using rule 176 (in_value -> subquery .)
    EXCEPT          reduce using rule 176 (in_value -> subquery .)
    ORDER           reduce using rule 176 (in_value -> subquery .)
    LIMIT           reduce using rule 176 (in_value -> subquery .)
    FOR             reduce using rule 176 (in_value -> subquery .)
    $end            reduce using rule 176 (in_value -> subquery .)
    RPAREN          reduce using rule 176 (in_value -> subquery .)
    GROUP           reduce using rule 176 (in_value -> subquery .)
    HAVING          reduce using rule 176 (in_value -> subquery .)
    THEN            reduce using rule 176 (in_value -> subquery .)
    CROSS           reduce using rule 176 (in_value -> subquery .)
    NATURAL         reduce using rule 176 (in_value -> subquery .)
    INNER           reduce using rule 176 (in_value -> subquery .)
    LEFT            reduce using rule 176 (in_value -> subquery .)
    RIGHT           reduce using rule 176 (in_value -> subquery .)
    FULL            reduce using rule 176 (in_value -> subquery .)
    JOIN            reduce using rule 176 (in_value -> subquery .)
    SET             reduce using rule 176 (in_value -> subquery .)
    WHERE           reduce using rule 176 (in_value -> subquery .)
    VALUES          reduce using rule 176 (in_value -> subquery .)
    LPAREN          reduce using rule 176 (in_value -> subquery .)
    SELECT          reduce using rule 176 (in_value -> subquery .)
    ON              reduce using rule 176 (in_value -> subquery .)
    USING           reduce using rule 176 (in_value -> subquery .)


state 339

    (179) like_predicate -> value_expression not_opt LIKE value_expression .

    OR              reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    AND             reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    COMMA           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    INTERSECT       reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    UNION           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    EXCEPT          reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    ORDER           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    LIMIT           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    FOR             reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    $end            reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    RPAREN          reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    GROUP           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    HAVING          reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    THEN            reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    CROSS           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    NATURAL         reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    INNER           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    LEFT            reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    RIGHT           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    FULL            reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    JOIN            reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    SET             reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    WHERE           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    VALUES          reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    LPAREN          reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    SELECT          reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    ON              reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)
    USING           reduce using rule 179 (like_predicate -> value_expression not_opt LIKE value_expression .)


state 340

    (181) null_predicate -> value_expression IS not_opt NULL .

    OR              reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    AND             reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    COMMA           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    INTERSECT       reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    UNION           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    EXCEPT          reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    ORDER           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    LIMIT           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    FOR             reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    $end            reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    RPAREN          reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    GROUP           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    HAVING          reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    THEN            reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    CROSS           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    NATURAL         reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    INNER           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    LEFT            reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    RIGHT           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    FULL            reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    JOIN            reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    SET             reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    WHERE           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    VALUES          reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    LPAREN          reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    SELECT          reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    ON              reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)
    USING           reduce using rule 181 (null_predicate -> value_expression IS not_opt NULL .)


state 341

    (123) table_expression_opt -> FROM relations where_opt group_by_opt . having_opt for_update_opt
    (113) having_opt -> . HAVING search_condition
    (114) having_opt -> . empty
    (271) empty -> .

    HAVING          shift and go to state 389
    FOR             reduce using rule 271 (empty -> .)
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    having_opt                     shift and go to state 388
    empty                          shift and go to state 390

state 342

    (109) group_by_opt -> GROUP . BY grouping_expressions

    BY              shift and go to state 391


state 343

    (110) group_by_opt -> empty .

    HAVING          reduce using rule 110 (group_by_opt -> empty .)
    FOR             reduce using rule 110 (group_by_opt -> empty .)
    INTERSECT       reduce using rule 110 (group_by_opt -> empty .)
    UNION           reduce using rule 110 (group_by_opt -> empty .)
    EXCEPT          reduce using rule 110 (group_by_opt -> empty .)
    ORDER           reduce using rule 110 (group_by_opt -> empty .)
    LIMIT           reduce using rule 110 (group_by_opt -> empty .)
    $end            reduce using rule 110 (group_by_opt -> empty .)
    RPAREN          reduce using rule 110 (group_by_opt -> empty .)


state 344

    (210) function_call -> qualified_name LPAREN call_args RPAREN .

    ASTERISK        reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    SLASH           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    PERCENT         reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    CONCAT          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    PLUS            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    MINUS           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    AS              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NON_RESERVED    reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    COMMA           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    FROM            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    INTERSECT       reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    UNION           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    EXCEPT          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ORDER           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LIMIT           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    FOR             reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    $end            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    REGEXP          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    IS              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    EQ              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NE              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LT              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LE              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    GT              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    GE              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NOT             reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    BETWEEN         reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    IN              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LIKE            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    OR              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    AND             reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    GROUP           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    HAVING          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    THEN            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    CROSS           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NATURAL         reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    INNER           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LEFT            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    RIGHT           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    FULL            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    JOIN            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    SET             reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    WHERE           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    VALUES          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    SELECT          reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ON              reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    USING           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ASC             reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    DESC            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NULLS           reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    WHEN            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    END             reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ELSE            reduce using rule 210 (function_call -> qualified_name LPAREN call_args RPAREN .)


state 345

    (211) function_call -> qualified_name LPAREN DISTINCT call_args . RPAREN

    RPAREN          shift and go to state 392


state 346

    (226) call_list -> call_list COMMA . expression
    (154) expression -> . search_condition
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    expression                     shift and go to state 393
    search_condition               shift and go to state 70
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 347

    (257) integer_param_opt -> LPAREN INTEGER RPAREN .

    ASTERISK        reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    SLASH           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    PERCENT         reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    CONCAT          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    PLUS            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    MINUS           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    AS              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    IDENTIFIER      reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NON_RESERVED    reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    COMMA           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    FROM            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    INTERSECT       reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    UNION           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    EXCEPT          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ORDER           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LIMIT           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    FOR             reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    $end            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    RPAREN          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    REGEXP          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    IS              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    EQ              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NE              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LT              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LE              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    GT              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    GE              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NOT             reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    BETWEEN         reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    IN              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LIKE            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    OR              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    AND             reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    GROUP           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    HAVING          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    THEN            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    CROSS           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NATURAL         reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    INNER           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LEFT            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    RIGHT           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    FULL            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    JOIN            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    SET             reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    WHERE           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    VALUES          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LPAREN          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    SELECT          reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ON              reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    USING           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ASC             reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    DESC            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NULLS           reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    WHEN            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    END             reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ELSE            reduce using rule 257 (integer_param_opt -> LPAREN INTEGER RPAREN .)


state 348

    (220) cast_specification -> CAST LPAREN value_expression AS . data_type RPAREN
    (228) data_type -> . base_data_type type_param_list_opt
    (235) base_data_type -> . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    data_type                      shift and go to state 394
    base_data_type                 shift and go to state 395
    identifier                     shift and go to state 396
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 349

    (218) simple_case -> CASE value_expression when_clauses else_opt . END

    END             shift and go to state 397


state 350

    (219) searched_case -> CASE when_clauses else_opt END .

    ASTERISK        reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    SLASH           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    PERCENT         reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    CONCAT          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    PLUS            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    MINUS           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    AS              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    IDENTIFIER      reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    DIGIT_IDENTIFIER reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    BACKQUOTED_IDENTIFIER reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    NON_RESERVED    reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    COMMA           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    FROM            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    INTERSECT       reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    UNION           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    EXCEPT          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    ORDER           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    LIMIT           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    FOR             reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    $end            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    RPAREN          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    REGEXP          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    IS              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    EQ              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    NE              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    LT              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    LE              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    GT              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    GE              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    NOT             reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    BETWEEN         reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    IN              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    LIKE            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    OR              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    AND             reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    GROUP           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    HAVING          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    THEN            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    CROSS           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    NATURAL         reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    INNER           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    LEFT            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    RIGHT           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    FULL            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    JOIN            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    SET             reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    WHERE           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    VALUES          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    LPAREN          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    SELECT          reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    ON              reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    USING           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    ASC             reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    DESC            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    NULLS           reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    WHEN            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    END             reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)
    ELSE            reduce using rule 219 (searched_case -> CASE when_clauses else_opt END .)


state 351

    (224) else_opt -> ELSE value_expression .

    END             reduce using rule 224 (else_opt -> ELSE value_expression .)


state 352

    (223) when_clause -> WHEN search_condition THEN . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 398
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 353

    (12) column -> identifier column_type UNIQUE .

    RPAREN          reduce using rule 12 (column -> identifier column_type UNIQUE .)
    COMMA           reduce using rule 12 (column -> identifier column_type UNIQUE .)


state 354

    (13) column_type -> INT column_end .

    UNIQUE          reduce using rule 13 (column_type -> INT column_end .)
    RPAREN          reduce using rule 13 (column_type -> INT column_end .)
    COMMA           reduce using rule 13 (column_type -> INT column_end .)


state 355

    (14) column_type -> INT LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 399


state 356

    (24) column_end -> collate . NOT NULL comment_end
    (25) column_end -> collate . NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> collate . DEFAULT NULL comment_end
    (27) column_end -> collate . NULL DEFAULT NULL comment_end
    (28) column_end -> collate . UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> collate . NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> collate . NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> collate . NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end

    NOT             shift and go to state 400
    DEFAULT         shift and go to state 402
    NULL            shift and go to state 401
    UNSIGNED        shift and go to state 403


state 357

    (32) column_end -> empty .
    (34) collate -> empty .

    UNIQUE          reduce using rule 32 (column_end -> empty .)
    RPAREN          reduce using rule 32 (column_end -> empty .)
    COMMA           reduce using rule 32 (column_end -> empty .)
    NOT             reduce using rule 34 (collate -> empty .)
    DEFAULT         reduce using rule 34 (collate -> empty .)
    NULL            reduce using rule 34 (collate -> empty .)
    UNSIGNED        reduce using rule 34 (collate -> empty .)


state 358

    (33) collate -> COLLATE . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 404
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 359

    (15) column_type -> FLOAT column_end .

    UNIQUE          reduce using rule 15 (column_type -> FLOAT column_end .)
    RPAREN          reduce using rule 15 (column_type -> FLOAT column_end .)
    COMMA           reduce using rule 15 (column_type -> FLOAT column_end .)


state 360

    (16) column_type -> BIGINT column_end .

    UNIQUE          reduce using rule 16 (column_type -> BIGINT column_end .)
    RPAREN          reduce using rule 16 (column_type -> BIGINT column_end .)
    COMMA           reduce using rule 16 (column_type -> BIGINT column_end .)


state 361

    (17) column_type -> BIGINT LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 405


state 362

    (18) column_type -> TINYINT LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 406


state 363

    (19) column_type -> DATETIME column_end .

    UNIQUE          reduce using rule 19 (column_type -> DATETIME column_end .)
    RPAREN          reduce using rule 19 (column_type -> DATETIME column_end .)
    COMMA           reduce using rule 19 (column_type -> DATETIME column_end .)


state 364

    (20) column_type -> DATETIME LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 407


state 365

    (21) column_type -> VARCHAR LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 408


state 366

    (22) column_type -> CHAR LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 409


state 367

    (23) column_type -> TIMESTAMP column_end .

    UNIQUE          reduce using rule 23 (column_type -> TIMESTAMP column_end .)
    RPAREN          reduce using rule 23 (column_type -> TIMESTAMP column_end .)
    COMMA           reduce using rule 23 (column_type -> TIMESTAMP column_end .)


state 368

    (5) create_table -> CREATE TABLE identifier LPAREN column_list RPAREN create_table_end .

    $end            reduce using rule 5 (create_table -> CREATE TABLE identifier LPAREN column_list RPAREN create_table_end .)


state 369

    (7) create_table_end -> ENGINE . EQ identifier DEFAULT CHARSET EQ identifier

    EQ              shift and go to state 410


state 370

    (8) create_table_end -> DEFAULT . CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    CHARSET         shift and go to state 411


state 371

    (6) create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause . RPAREN create_table_end

    RPAREN          shift and go to state 412


state 372

    (10) column_list -> column_list COMMA column .

    RPAREN          reduce using rule 10 (column_list -> column_list COMMA column .)
    COMMA           reduce using rule 10 (column_list -> column_list COMMA column .)


state 373

    (37) primary_clause -> PRIMARY . KEY LPAREN index_column_list RPAREN
    (38) primary_clause -> PRIMARY . KEY LPAREN index_column_list RPAREN COMMA index_list

    KEY             shift and go to state 413


state 374

    (68) for_update_opt -> FOR UPDATE WAIT INTEGER .

    $end            reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    INTERSECT       reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    UNION           reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    EXCEPT          reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    ORDER           reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    LIMIT           reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    FOR             reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    RPAREN          reduce using rule 68 (for_update_opt -> FOR UPDATE WAIT INTEGER .)


state 375

    (81) null_ordering_opt -> NULLS FIRST .

    COMMA           reduce using rule 81 (null_ordering_opt -> NULLS FIRST .)
    LIMIT           reduce using rule 81 (null_ordering_opt -> NULLS FIRST .)
    FOR             reduce using rule 81 (null_ordering_opt -> NULLS FIRST .)
    $end            reduce using rule 81 (null_ordering_opt -> NULLS FIRST .)
    RPAREN          reduce using rule 81 (null_ordering_opt -> NULLS FIRST .)


state 376

    (82) null_ordering_opt -> NULLS LAST .

    COMMA           reduce using rule 82 (null_ordering_opt -> NULLS LAST .)
    LIMIT           reduce using rule 82 (null_ordering_opt -> NULLS LAST .)
    FOR             reduce using rule 82 (null_ordering_opt -> NULLS LAST .)
    $end            reduce using rule 82 (null_ordering_opt -> NULLS LAST .)
    RPAREN          reduce using rule 82 (null_ordering_opt -> NULLS LAST .)


state 377

    (107) where_opt -> WHERE LPAREN search_condition RPAREN .
    (156) search_condition -> LPAREN search_condition RPAREN .

  ! reduce/reduce conflict for ORDER resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for LIMIT resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for GROUP resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for HAVING resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for INTERSECT resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for UNION resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for EXCEPT resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    ORDER           reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    LIMIT           reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    $end            reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    GROUP           reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    HAVING          reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    FOR             reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    INTERSECT       reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    UNION           reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    EXCEPT          reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    RPAREN          reduce using rule 107 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    OR              reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)
    AND             reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .)

  ! ORDER           [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! LIMIT           [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! $end            [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! GROUP           [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! HAVING          [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! FOR             [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! INTERSECT       [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! UNION           [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! EXCEPT          [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! RPAREN          [ reduce using rule 156 (search_condition -> LPAREN search_condition RPAREN .) ]


state 378

    (60) update -> UPDATE relations SET update_set_list where_opt order_by_opt limit_opt .

    $end            reduce using rule 60 (update -> UPDATE relations SET update_set_list where_opt order_by_opt limit_opt .)


state 379

    (51) insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value . RPAREN
    (56) insert_value -> insert_value . COMMA value

    RPAREN          shift and go to state 414
    COMMA           shift and go to state 415


state 380

    (55) insert_value -> value .

    RPAREN          reduce using rule 55 (insert_value -> value .)
    COMMA           reduce using rule 55 (insert_value -> value .)


state 381

    (52) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN . VALUES LPAREN insert_value RPAREN
    (53) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN . query_spec
    (105) query_spec -> . SELECT select_items table_expression_opt

    VALUES          shift and go to state 416
    SELECT          shift and go to state 35

    query_spec                     shift and go to state 417

state 382

    (44) index_column_list -> index_column_list COMMA . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 418
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 383

    (145) join_criteria -> USING LPAREN join_columns . RPAREN
    (148) join_columns -> join_columns . COMMA identifier

    RPAREN          shift and go to state 419
    COMMA           shift and go to state 420


state 384

    (147) join_columns -> identifier .

    RPAREN          reduce using rule 147 (join_columns -> identifier .)
    COMMA           reduce using rule 147 (join_columns -> identifier .)


state 385

    (173) between_predicate -> value_expression not_opt BETWEEN value_expression AND . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 421
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 386

    (175) in_value -> LPAREN in_expressions . RPAREN
    (178) in_expressions -> in_expressions . COMMA value_expression

    RPAREN          shift and go to state 422
    COMMA           shift and go to state 423


state 387

    (177) in_expressions -> value_expression .

    RPAREN          reduce using rule 177 (in_expressions -> value_expression .)
    COMMA           reduce using rule 177 (in_expressions -> value_expression .)


state 388

    (123) table_expression_opt -> FROM relations where_opt group_by_opt having_opt . for_update_opt
    (66) for_update_opt -> . FOR UPDATE
    (67) for_update_opt -> . FOR UPDATE NOWAIT
    (68) for_update_opt -> . FOR UPDATE WAIT INTEGER
    (69) for_update_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for FOR resolved as shift
    FOR             shift and go to state 189
    INTERSECT       reduce using rule 271 (empty -> .)
    UNION           reduce using rule 271 (empty -> .)
    EXCEPT          reduce using rule 271 (empty -> .)
    ORDER           reduce using rule 271 (empty -> .)
    LIMIT           reduce using rule 271 (empty -> .)
    $end            reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

  ! FOR             [ reduce using rule 271 (empty -> .) ]

    for_update_opt                 shift and go to state 424
    empty                          shift and go to state 190

state 389

    (113) having_opt -> HAVING . search_condition
    (155) search_condition -> . boolean_term
    (156) search_condition -> . LPAREN search_condition RPAREN
    (157) search_condition -> . search_condition OR search_condition
    (158) search_condition -> . search_condition AND search_condition
    (159) boolean_term -> . boolean_factor
    (160) boolean_term -> . LPAREN boolean_term RPAREN
    (161) boolean_factor -> . not_opt boolean_test
    (249) not_opt -> . NOT
    (250) not_opt -> . empty
    (271) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 72
    NOT             shift and go to state 75
    EXISTS          reduce using rule 271 (empty -> .)
    PLUS            reduce using rule 271 (empty -> .)
    MINUS           reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

  ! LPAREN          [ reduce using rule 271 (empty -> .) ]

    search_condition               shift and go to state 425
    boolean_term                   shift and go to state 71
    boolean_factor                 shift and go to state 73
    not_opt                        shift and go to state 74
    empty                          shift and go to state 76

state 390

    (114) having_opt -> empty .

    FOR             reduce using rule 114 (having_opt -> empty .)
    INTERSECT       reduce using rule 114 (having_opt -> empty .)
    UNION           reduce using rule 114 (having_opt -> empty .)
    EXCEPT          reduce using rule 114 (having_opt -> empty .)
    ORDER           reduce using rule 114 (having_opt -> empty .)
    LIMIT           reduce using rule 114 (having_opt -> empty .)
    $end            reduce using rule 114 (having_opt -> empty .)
    RPAREN          reduce using rule 114 (having_opt -> empty .)


state 391

    (109) group_by_opt -> GROUP BY . grouping_expressions
    (111) grouping_expressions -> . value_expression
    (112) grouping_expressions -> . grouping_expressions COMMA value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    grouping_expressions           shift and go to state 426
    value_expression               shift and go to state 427
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 392

    (211) function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .

    ASTERISK        reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    SLASH           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    PERCENT         reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    CONCAT          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    PLUS            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    MINUS           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    AS              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    IDENTIFIER      reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NON_RESERVED    reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    COMMA           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    FROM            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    INTERSECT       reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    UNION           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    EXCEPT          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ORDER           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LIMIT           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    FOR             reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    $end            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    RPAREN          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    REGEXP          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    IS              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    EQ              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NE              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LT              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LE              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    GT              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    GE              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NOT             reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    BETWEEN         reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    IN              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LIKE            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    OR              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    AND             reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    GROUP           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    HAVING          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    THEN            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    CROSS           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NATURAL         reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    INNER           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LEFT            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    RIGHT           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    FULL            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    JOIN            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    SET             reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    WHERE           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    VALUES          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LPAREN          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    SELECT          reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ON              reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    USING           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ASC             reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    DESC            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NULLS           reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    WHEN            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    END             reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ELSE            reduce using rule 211 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)


state 393

    (226) call_list -> call_list COMMA expression .

    COMMA           reduce using rule 226 (call_list -> call_list COMMA expression .)
    RPAREN          reduce using rule 226 (call_list -> call_list COMMA expression .)


state 394

    (220) cast_specification -> CAST LPAREN value_expression AS data_type . RPAREN

    RPAREN          shift and go to state 428


state 395

    (228) data_type -> base_data_type . type_param_list_opt
    (229) type_param_list_opt -> . LPAREN type_param_list RPAREN
    (230) type_param_list_opt -> . empty
    (271) empty -> .

    LPAREN          shift and go to state 430
    RPAREN          reduce using rule 271 (empty -> .)

    type_param_list_opt            shift and go to state 429
    empty                          shift and go to state 431

state 396

    (235) base_data_type -> identifier .

    LPAREN          reduce using rule 235 (base_data_type -> identifier .)
    RPAREN          reduce using rule 235 (base_data_type -> identifier .)
    COMMA           reduce using rule 235 (base_data_type -> identifier .)


state 397

    (218) simple_case -> CASE value_expression when_clauses else_opt END .

    ASTERISK        reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    SLASH           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    PERCENT         reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    CONCAT          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    PLUS            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    MINUS           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    AS              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    IDENTIFIER      reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    DIGIT_IDENTIFIER reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    BACKQUOTED_IDENTIFIER reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NON_RESERVED    reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    COMMA           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    FROM            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    INTERSECT       reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    UNION           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    EXCEPT          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ORDER           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LIMIT           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    FOR             reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    $end            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    RPAREN          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    REGEXP          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    IS              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    EQ              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NE              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LT              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LE              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    GT              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    GE              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NOT             reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    BETWEEN         reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    IN              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LIKE            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    OR              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    AND             reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    GROUP           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    HAVING          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    THEN            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    CROSS           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NATURAL         reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    INNER           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LEFT            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    RIGHT           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    FULL            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    JOIN            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    SET             reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    WHERE           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    VALUES          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LPAREN          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    SELECT          reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ON              reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    USING           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ASC             reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    DESC            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NULLS           reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    WHEN            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    END             reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ELSE            reduce using rule 218 (simple_case -> CASE value_expression when_clauses else_opt END .)


state 398

    (223) when_clause -> WHEN search_condition THEN value_expression .

    ELSE            reduce using rule 223 (when_clause -> WHEN search_condition THEN value_expression .)
    WHEN            reduce using rule 223 (when_clause -> WHEN search_condition THEN value_expression .)
    END             reduce using rule 223 (when_clause -> WHEN search_condition THEN value_expression .)


state 399

    (14) column_type -> INT LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 432


state 400

    (24) column_end -> collate NOT . NULL comment_end
    (25) column_end -> collate NOT . NULL DEFAULT SCONST comment_end
    (29) column_end -> collate NOT . NULL AUTO_INCREMENT comment_end
    (30) column_end -> collate NOT . NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> collate NOT . NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end

    NULL            shift and go to state 433


state 401

    (27) column_end -> collate NULL . DEFAULT NULL comment_end

    DEFAULT         shift and go to state 434


state 402

    (26) column_end -> collate DEFAULT . NULL comment_end

    NULL            shift and go to state 435


state 403

    (28) column_end -> collate UNSIGNED . AUTO_INCREMENT comment_end

    AUTO_INCREMENT  shift and go to state 436


state 404

    (33) collate -> COLLATE identifier .

    NOT             reduce using rule 33 (collate -> COLLATE identifier .)
    DEFAULT         reduce using rule 33 (collate -> COLLATE identifier .)
    NULL            reduce using rule 33 (collate -> COLLATE identifier .)
    UNSIGNED        reduce using rule 33 (collate -> COLLATE identifier .)


state 405

    (17) column_type -> BIGINT LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 437


state 406

    (18) column_type -> TINYINT LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 438


state 407

    (20) column_type -> DATETIME LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 439


state 408

    (21) column_type -> VARCHAR LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 440


state 409

    (22) column_type -> CHAR LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 441


state 410

    (7) create_table_end -> ENGINE EQ . identifier DEFAULT CHARSET EQ identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 442
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 411

    (8) create_table_end -> DEFAULT CHARSET . EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 443


state 412

    (6) create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN . create_table_end
    (7) create_table_end -> . ENGINE EQ identifier DEFAULT CHARSET EQ identifier
    (8) create_table_end -> . DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    ENGINE          shift and go to state 369
    DEFAULT         shift and go to state 370

    create_table_end               shift and go to state 444

state 413

    (37) primary_clause -> PRIMARY KEY . LPAREN index_column_list RPAREN
    (38) primary_clause -> PRIMARY KEY . LPAREN index_column_list RPAREN COMMA index_list

    LPAREN          shift and go to state 445


state 414

    (51) insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN .

    $end            reduce using rule 51 (insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN .)


state 415

    (56) insert_value -> insert_value COMMA . value
    (204) value -> . NULL
    (205) value -> . SCONST
    (206) value -> . number
    (207) value -> . boolean_value
    (208) value -> . QUOTED_IDENTIFIER
    (209) value -> . QM
    (269) number -> . DECIMAL
    (270) number -> . INTEGER
    (251) boolean_value -> . TRUE
    (252) boolean_value -> . FALSE

    NULL            shift and go to state 165
    SCONST          shift and go to state 166
    QUOTED_IDENTIFIER shift and go to state 169
    QM              shift and go to state 170
    DECIMAL         shift and go to state 179
    INTEGER         shift and go to state 180
    TRUE            shift and go to state 181
    FALSE           shift and go to state 182

    value                          shift and go to state 446
    number                         shift and go to state 167
    boolean_value                  shift and go to state 168

state 416

    (52) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES . LPAREN insert_value RPAREN

    LPAREN          shift and go to state 447


state 417

    (53) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec .

    $end            reduce using rule 53 (insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec .)


state 418

    (44) index_column_list -> index_column_list COMMA identifier .

    RPAREN          reduce using rule 44 (index_column_list -> index_column_list COMMA identifier .)
    COMMA           reduce using rule 44 (index_column_list -> index_column_list COMMA identifier .)


state 419

    (145) join_criteria -> USING LPAREN join_columns RPAREN .

    ORDER           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    LIMIT           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    FOR             reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    $end            reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    CROSS           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    NATURAL         reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    INNER           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    LEFT            reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    RIGHT           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    FULL            reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    JOIN            reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    RPAREN          reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    SET             reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    COMMA           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    WHERE           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    GROUP           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    HAVING          reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    INTERSECT       reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    UNION           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    EXCEPT          reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    VALUES          reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    LPAREN          reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    SELECT          reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    ON              reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)
    USING           reduce using rule 145 (join_criteria -> USING LPAREN join_columns RPAREN .)


state 420

    (148) join_columns -> join_columns COMMA . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 448
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 421

    (173) between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .

    OR              reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    AND             reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    COMMA           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    INTERSECT       reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    UNION           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    EXCEPT          reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    ORDER           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    LIMIT           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    FOR             reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    $end            reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    RPAREN          reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    GROUP           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    HAVING          reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    THEN            reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    CROSS           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    NATURAL         reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    INNER           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    LEFT            reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    RIGHT           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    FULL            reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    JOIN            reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    SET             reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    WHERE           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    VALUES          reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    LPAREN          reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    SELECT          reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    ON              reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    USING           reduce using rule 173 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)


state 422

    (175) in_value -> LPAREN in_expressions RPAREN .

    OR              reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    AND             reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    COMMA           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    INTERSECT       reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    UNION           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    EXCEPT          reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    ORDER           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    LIMIT           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    FOR             reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    $end            reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    RPAREN          reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    GROUP           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    HAVING          reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    THEN            reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    CROSS           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    NATURAL         reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    INNER           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    LEFT            reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    RIGHT           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    FULL            reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    JOIN            reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    SET             reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    WHERE           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    VALUES          reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    LPAREN          reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    SELECT          reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    ON              reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)
    USING           reduce using rule 175 (in_value -> LPAREN in_expressions RPAREN .)


state 423

    (178) in_expressions -> in_expressions COMMA . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 449
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 424

    (123) table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .

    INTERSECT       reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)
    UNION           reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)
    EXCEPT          reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)
    ORDER           reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)
    LIMIT           reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)
    FOR             reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)
    $end            reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)
    RPAREN          reduce using rule 123 (table_expression_opt -> FROM relations where_opt group_by_opt having_opt for_update_opt .)


state 425

    (113) having_opt -> HAVING search_condition .
    (157) search_condition -> search_condition . OR search_condition
    (158) search_condition -> search_condition . AND search_condition

    FOR             reduce using rule 113 (having_opt -> HAVING search_condition .)
    INTERSECT       reduce using rule 113 (having_opt -> HAVING search_condition .)
    UNION           reduce using rule 113 (having_opt -> HAVING search_condition .)
    EXCEPT          reduce using rule 113 (having_opt -> HAVING search_condition .)
    ORDER           reduce using rule 113 (having_opt -> HAVING search_condition .)
    LIMIT           reduce using rule 113 (having_opt -> HAVING search_condition .)
    $end            reduce using rule 113 (having_opt -> HAVING search_condition .)
    RPAREN          reduce using rule 113 (having_opt -> HAVING search_condition .)
    OR              shift and go to state 120
    AND             shift and go to state 121


state 426

    (109) group_by_opt -> GROUP BY grouping_expressions .
    (112) grouping_expressions -> grouping_expressions . COMMA value_expression

    HAVING          reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    FOR             reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    INTERSECT       reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    UNION           reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    EXCEPT          reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    ORDER           reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    LIMIT           reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    $end            reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    RPAREN          reduce using rule 109 (group_by_opt -> GROUP BY grouping_expressions .)
    COMMA           shift and go to state 450


state 427

    (111) grouping_expressions -> value_expression .

    COMMA           reduce using rule 111 (grouping_expressions -> value_expression .)
    HAVING          reduce using rule 111 (grouping_expressions -> value_expression .)
    FOR             reduce using rule 111 (grouping_expressions -> value_expression .)
    INTERSECT       reduce using rule 111 (grouping_expressions -> value_expression .)
    UNION           reduce using rule 111 (grouping_expressions -> value_expression .)
    EXCEPT          reduce using rule 111 (grouping_expressions -> value_expression .)
    ORDER           reduce using rule 111 (grouping_expressions -> value_expression .)
    LIMIT           reduce using rule 111 (grouping_expressions -> value_expression .)
    $end            reduce using rule 111 (grouping_expressions -> value_expression .)
    RPAREN          reduce using rule 111 (grouping_expressions -> value_expression .)


state 428

    (220) cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .

    ASTERISK        reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    SLASH           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    PERCENT         reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    CONCAT          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    PLUS            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    MINUS           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    AS              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    IDENTIFIER      reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NON_RESERVED    reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    COMMA           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    FROM            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    INTERSECT       reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    UNION           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    EXCEPT          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ORDER           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LIMIT           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    FOR             reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    $end            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    RPAREN          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    REGEXP          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    IS              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    EQ              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NE              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LT              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LE              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    GT              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    GE              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NOT             reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    BETWEEN         reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    IN              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LIKE            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    OR              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    AND             reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    GROUP           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    HAVING          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    THEN            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    CROSS           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NATURAL         reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    INNER           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LEFT            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    RIGHT           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    FULL            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    JOIN            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    SET             reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    WHERE           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    VALUES          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LPAREN          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    SELECT          reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ON              reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    USING           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ASC             reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    DESC            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NULLS           reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    WHEN            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    END             reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ELSE            reduce using rule 220 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)


state 429

    (228) data_type -> base_data_type type_param_list_opt .

    RPAREN          reduce using rule 228 (data_type -> base_data_type type_param_list_opt .)


state 430

    (229) type_param_list_opt -> LPAREN . type_param_list RPAREN
    (231) type_param_list -> . type_param_list COMMA type_parameter
    (232) type_param_list -> . type_parameter
    (233) type_parameter -> . INTEGER
    (234) type_parameter -> . base_data_type
    (235) base_data_type -> . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    INTEGER         shift and go to state 453
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    type_param_list                shift and go to state 451
    type_parameter                 shift and go to state 452
    base_data_type                 shift and go to state 454
    identifier                     shift and go to state 396
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 431

    (230) type_param_list_opt -> empty .

    RPAREN          reduce using rule 230 (type_param_list_opt -> empty .)


state 432

    (14) column_type -> INT LPAREN INTEGER RPAREN . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 455
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 433

    (24) column_end -> collate NOT NULL . comment_end
    (25) column_end -> collate NOT NULL . DEFAULT SCONST comment_end
    (29) column_end -> collate NOT NULL . AUTO_INCREMENT comment_end
    (30) column_end -> collate NOT NULL . DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> collate NOT NULL . DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    DEFAULT         shift and go to state 457
    AUTO_INCREMENT  shift and go to state 458
    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 456
    empty                          shift and go to state 460

state 434

    (27) column_end -> collate NULL DEFAULT . NULL comment_end

    NULL            shift and go to state 461


state 435

    (26) column_end -> collate DEFAULT NULL . comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 462
    empty                          shift and go to state 460

state 436

    (28) column_end -> collate UNSIGNED AUTO_INCREMENT . comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 463
    empty                          shift and go to state 460

state 437

    (17) column_type -> BIGINT LPAREN INTEGER RPAREN . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 464
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 438

    (18) column_type -> TINYINT LPAREN INTEGER RPAREN . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 465
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 439

    (20) column_type -> DATETIME LPAREN INTEGER RPAREN . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 466
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 440

    (21) column_type -> VARCHAR LPAREN INTEGER RPAREN . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 467
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 441

    (22) column_type -> CHAR LPAREN INTEGER RPAREN . column_end
    (24) column_end -> . collate NOT NULL comment_end
    (25) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (26) column_end -> . collate DEFAULT NULL comment_end
    (27) column_end -> . collate NULL DEFAULT NULL comment_end
    (28) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (29) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (30) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (31) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (32) column_end -> . empty
    (33) collate -> . COLLATE identifier
    (34) collate -> . empty
    (271) empty -> .

    COLLATE         shift and go to state 358
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)
    NOT             reduce using rule 271 (empty -> .)
    DEFAULT         reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    UNSIGNED        reduce using rule 271 (empty -> .)

    column_end                     shift and go to state 468
    collate                        shift and go to state 356
    empty                          shift and go to state 357

state 442

    (7) create_table_end -> ENGINE EQ identifier . DEFAULT CHARSET EQ identifier

    DEFAULT         shift and go to state 469


state 443

    (8) create_table_end -> DEFAULT CHARSET EQ . identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 470
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 444

    (6) create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end .

    $end            reduce using rule 6 (create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end .)


state 445

    (37) primary_clause -> PRIMARY KEY LPAREN . index_column_list RPAREN
    (38) primary_clause -> PRIMARY KEY LPAREN . index_column_list RPAREN COMMA index_list
    (43) index_column_list -> . identifier
    (44) index_column_list -> . index_column_list COMMA identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    index_column_list              shift and go to state 471
    identifier                     shift and go to state 332
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 446

    (56) insert_value -> insert_value COMMA value .

    RPAREN          reduce using rule 56 (insert_value -> insert_value COMMA value .)
    COMMA           reduce using rule 56 (insert_value -> insert_value COMMA value .)


state 447

    (52) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN . insert_value RPAREN
    (55) insert_value -> . value
    (56) insert_value -> . insert_value COMMA value
    (204) value -> . NULL
    (205) value -> . SCONST
    (206) value -> . number
    (207) value -> . boolean_value
    (208) value -> . QUOTED_IDENTIFIER
    (209) value -> . QM
    (269) number -> . DECIMAL
    (270) number -> . INTEGER
    (251) boolean_value -> . TRUE
    (252) boolean_value -> . FALSE

    NULL            shift and go to state 165
    SCONST          shift and go to state 166
    QUOTED_IDENTIFIER shift and go to state 169
    QM              shift and go to state 170
    DECIMAL         shift and go to state 179
    INTEGER         shift and go to state 180
    TRUE            shift and go to state 181
    FALSE           shift and go to state 182

    insert_value                   shift and go to state 472
    value                          shift and go to state 380
    number                         shift and go to state 167
    boolean_value                  shift and go to state 168

state 448

    (148) join_columns -> join_columns COMMA identifier .

    RPAREN          reduce using rule 148 (join_columns -> join_columns COMMA identifier .)
    COMMA           reduce using rule 148 (join_columns -> join_columns COMMA identifier .)


state 449

    (178) in_expressions -> in_expressions COMMA value_expression .

    RPAREN          reduce using rule 178 (in_expressions -> in_expressions COMMA value_expression .)
    COMMA           reduce using rule 178 (in_expressions -> in_expressions COMMA value_expression .)


state 450

    (112) grouping_expressions -> grouping_expressions COMMA . value_expression
    (183) value_expression -> . numeric_value_expression
    (184) numeric_value_expression -> . numeric_value_expression PLUS term
    (185) numeric_value_expression -> . numeric_value_expression MINUS term
    (186) numeric_value_expression -> . term
    (187) term -> . term ASTERISK factor
    (188) term -> . term SLASH factor
    (189) term -> . term PERCENT factor
    (190) term -> . term CONCAT factor
    (191) term -> . factor
    (192) factor -> . sign_opt primary_expression
    (253) sign_opt -> . sign
    (254) sign_opt -> . empty
    (255) sign -> . PLUS
    (256) sign -> . MINUS
    (271) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    LPAREN          reduce using rule 271 (empty -> .)
    NULL            reduce using rule 271 (empty -> .)
    SCONST          reduce using rule 271 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    QM              reduce using rule 271 (empty -> .)
    CURRENT_DATE    reduce using rule 271 (empty -> .)
    CURRENT_TIME    reduce using rule 271 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 271 (empty -> .)
    LOCALTIME       reduce using rule 271 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 271 (empty -> .)
    CAST            reduce using rule 271 (empty -> .)
    DECIMAL         reduce using rule 271 (empty -> .)
    INTEGER         reduce using rule 271 (empty -> .)
    TRUE            reduce using rule 271 (empty -> .)
    FALSE           reduce using rule 271 (empty -> .)
    IDENTIFIER      reduce using rule 271 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 271 (empty -> .)
    ASTERISK        reduce using rule 271 (empty -> .)
    CASE            reduce using rule 271 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (empty -> .)
    NON_RESERVED    reduce using rule 271 (empty -> .)

    value_expression               shift and go to state 473
    numeric_value_expression       shift and go to state 85
    term                           shift and go to state 87
    factor                         shift and go to state 89
    sign_opt                       shift and go to state 90
    sign                           shift and go to state 91
    empty                          shift and go to state 92

state 451

    (229) type_param_list_opt -> LPAREN type_param_list . RPAREN
    (231) type_param_list -> type_param_list . COMMA type_parameter

    RPAREN          shift and go to state 474
    COMMA           shift and go to state 475


state 452

    (232) type_param_list -> type_parameter .

    RPAREN          reduce using rule 232 (type_param_list -> type_parameter .)
    COMMA           reduce using rule 232 (type_param_list -> type_parameter .)


state 453

    (233) type_parameter -> INTEGER .

    RPAREN          reduce using rule 233 (type_parameter -> INTEGER .)
    COMMA           reduce using rule 233 (type_parameter -> INTEGER .)


state 454

    (234) type_parameter -> base_data_type .

    RPAREN          reduce using rule 234 (type_parameter -> base_data_type .)
    COMMA           reduce using rule 234 (type_parameter -> base_data_type .)


state 455

    (14) column_type -> INT LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 14 (column_type -> INT LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 14 (column_type -> INT LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 14 (column_type -> INT LPAREN INTEGER RPAREN column_end .)


state 456

    (24) column_end -> collate NOT NULL comment_end .

    UNIQUE          reduce using rule 24 (column_end -> collate NOT NULL comment_end .)
    RPAREN          reduce using rule 24 (column_end -> collate NOT NULL comment_end .)
    COMMA           reduce using rule 24 (column_end -> collate NOT NULL comment_end .)


state 457

    (25) column_end -> collate NOT NULL DEFAULT . SCONST comment_end
    (30) column_end -> collate NOT NULL DEFAULT . CURRENT_TIMESTAMP comment_end
    (31) column_end -> collate NOT NULL DEFAULT . CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end

    SCONST          shift and go to state 476
    CURRENT_TIMESTAMP shift and go to state 477


state 458

    (29) column_end -> collate NOT NULL AUTO_INCREMENT . comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 478
    empty                          shift and go to state 460

state 459

    (35) comment_end -> COMMENT . SCONST

    SCONST          shift and go to state 479


state 460

    (36) comment_end -> empty .

    UNIQUE          reduce using rule 36 (comment_end -> empty .)
    RPAREN          reduce using rule 36 (comment_end -> empty .)
    COMMA           reduce using rule 36 (comment_end -> empty .)


state 461

    (27) column_end -> collate NULL DEFAULT NULL . comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 480
    empty                          shift and go to state 460

state 462

    (26) column_end -> collate DEFAULT NULL comment_end .

    UNIQUE          reduce using rule 26 (column_end -> collate DEFAULT NULL comment_end .)
    RPAREN          reduce using rule 26 (column_end -> collate DEFAULT NULL comment_end .)
    COMMA           reduce using rule 26 (column_end -> collate DEFAULT NULL comment_end .)


state 463

    (28) column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .

    UNIQUE          reduce using rule 28 (column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .)
    RPAREN          reduce using rule 28 (column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .)
    COMMA           reduce using rule 28 (column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .)


state 464

    (17) column_type -> BIGINT LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 17 (column_type -> BIGINT LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 17 (column_type -> BIGINT LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 17 (column_type -> BIGINT LPAREN INTEGER RPAREN column_end .)


state 465

    (18) column_type -> TINYINT LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 18 (column_type -> TINYINT LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 18 (column_type -> TINYINT LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 18 (column_type -> TINYINT LPAREN INTEGER RPAREN column_end .)


state 466

    (20) column_type -> DATETIME LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 20 (column_type -> DATETIME LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 20 (column_type -> DATETIME LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 20 (column_type -> DATETIME LPAREN INTEGER RPAREN column_end .)


state 467

    (21) column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 21 (column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 21 (column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 21 (column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .)


state 468

    (22) column_type -> CHAR LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 22 (column_type -> CHAR LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 22 (column_type -> CHAR LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 22 (column_type -> CHAR LPAREN INTEGER RPAREN column_end .)


state 469

    (7) create_table_end -> ENGINE EQ identifier DEFAULT . CHARSET EQ identifier

    CHARSET         shift and go to state 481


state 470

    (8) create_table_end -> DEFAULT CHARSET EQ identifier . COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    COLLATE         shift and go to state 482


state 471

    (37) primary_clause -> PRIMARY KEY LPAREN index_column_list . RPAREN
    (38) primary_clause -> PRIMARY KEY LPAREN index_column_list . RPAREN COMMA index_list
    (44) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 483
    COMMA           shift and go to state 382


state 472

    (52) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value . RPAREN
    (56) insert_value -> insert_value . COMMA value

    RPAREN          shift and go to state 484
    COMMA           shift and go to state 415


state 473

    (112) grouping_expressions -> grouping_expressions COMMA value_expression .

    COMMA           reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    HAVING          reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    FOR             reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    INTERSECT       reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    UNION           reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    EXCEPT          reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    ORDER           reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    LIMIT           reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    $end            reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    RPAREN          reduce using rule 112 (grouping_expressions -> grouping_expressions COMMA value_expression .)


state 474

    (229) type_param_list_opt -> LPAREN type_param_list RPAREN .

    RPAREN          reduce using rule 229 (type_param_list_opt -> LPAREN type_param_list RPAREN .)


state 475

    (231) type_param_list -> type_param_list COMMA . type_parameter
    (233) type_parameter -> . INTEGER
    (234) type_parameter -> . base_data_type
    (235) base_data_type -> . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    INTEGER         shift and go to state 453
    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    type_parameter                 shift and go to state 485
    base_data_type                 shift and go to state 454
    identifier                     shift and go to state 396
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 476

    (25) column_end -> collate NOT NULL DEFAULT SCONST . comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 486
    empty                          shift and go to state 460

state 477

    (30) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP . comment_end
    (31) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP . ON UPDATE CURRENT_TIMESTAMP comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    ON              shift and go to state 488
    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 487
    empty                          shift and go to state 460

state 478

    (29) column_end -> collate NOT NULL AUTO_INCREMENT comment_end .

    UNIQUE          reduce using rule 29 (column_end -> collate NOT NULL AUTO_INCREMENT comment_end .)
    RPAREN          reduce using rule 29 (column_end -> collate NOT NULL AUTO_INCREMENT comment_end .)
    COMMA           reduce using rule 29 (column_end -> collate NOT NULL AUTO_INCREMENT comment_end .)


state 479

    (35) comment_end -> COMMENT SCONST .

    UNIQUE          reduce using rule 35 (comment_end -> COMMENT SCONST .)
    RPAREN          reduce using rule 35 (comment_end -> COMMENT SCONST .)
    COMMA           reduce using rule 35 (comment_end -> COMMENT SCONST .)


state 480

    (27) column_end -> collate NULL DEFAULT NULL comment_end .

    UNIQUE          reduce using rule 27 (column_end -> collate NULL DEFAULT NULL comment_end .)
    RPAREN          reduce using rule 27 (column_end -> collate NULL DEFAULT NULL comment_end .)
    COMMA           reduce using rule 27 (column_end -> collate NULL DEFAULT NULL comment_end .)


state 481

    (7) create_table_end -> ENGINE EQ identifier DEFAULT CHARSET . EQ identifier

    EQ              shift and go to state 489


state 482

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE . EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 490


state 483

    (37) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN .
    (38) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN . COMMA index_list

    RPAREN          reduce using rule 37 (primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN .)
    COMMA           shift and go to state 491


state 484

    (52) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN .

    $end            reduce using rule 52 (insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN .)


state 485

    (231) type_param_list -> type_param_list COMMA type_parameter .

    RPAREN          reduce using rule 231 (type_param_list -> type_param_list COMMA type_parameter .)
    COMMA           reduce using rule 231 (type_param_list -> type_param_list COMMA type_parameter .)


state 486

    (25) column_end -> collate NOT NULL DEFAULT SCONST comment_end .

    UNIQUE          reduce using rule 25 (column_end -> collate NOT NULL DEFAULT SCONST comment_end .)
    RPAREN          reduce using rule 25 (column_end -> collate NOT NULL DEFAULT SCONST comment_end .)
    COMMA           reduce using rule 25 (column_end -> collate NOT NULL DEFAULT SCONST comment_end .)


state 487

    (30) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .

    UNIQUE          reduce using rule 30 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .)
    RPAREN          reduce using rule 30 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .)
    COMMA           reduce using rule 30 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .)


state 488

    (31) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON . UPDATE CURRENT_TIMESTAMP comment_end

    UPDATE          shift and go to state 492


state 489

    (7) create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ . identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 493
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 490

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ . identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 494
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 491

    (38) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA . index_list
    (39) index_list -> . index_key identifier LPAREN index_column_list RPAREN index_end
    (40) index_list -> . index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end
    (41) index_key -> . KEY
    (42) index_key -> . UNIQUE KEY

    KEY             shift and go to state 495
    UNIQUE          shift and go to state 498

    index_list                     shift and go to state 496
    index_key                      shift and go to state 497

state 492

    (31) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE . CURRENT_TIMESTAMP comment_end

    CURRENT_TIMESTAMP shift and go to state 499


state 493

    (7) create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ identifier .

    $end            reduce using rule 7 (create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ identifier .)


state 494

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier . COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    COMPRESSION     shift and go to state 500


state 495

    (41) index_key -> KEY .

    IDENTIFIER      reduce using rule 41 (index_key -> KEY .)
    DIGIT_IDENTIFIER reduce using rule 41 (index_key -> KEY .)
    ASTERISK        reduce using rule 41 (index_key -> KEY .)
    BACKQUOTED_IDENTIFIER reduce using rule 41 (index_key -> KEY .)
    NON_RESERVED    reduce using rule 41 (index_key -> KEY .)


state 496

    (38) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list .
    (40) index_list -> index_list . COMMA index_key identifier LPAREN index_column_list RPAREN index_end

    RPAREN          reduce using rule 38 (primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list .)
    COMMA           shift and go to state 501


state 497

    (39) index_list -> index_key . identifier LPAREN index_column_list RPAREN index_end
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 502
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 498

    (42) index_key -> UNIQUE . KEY

    KEY             shift and go to state 503


state 499

    (31) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP . comment_end
    (35) comment_end -> . COMMENT SCONST
    (36) comment_end -> . empty
    (271) empty -> .

    COMMENT         shift and go to state 459
    UNIQUE          reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)
    COMMA           reduce using rule 271 (empty -> .)

    comment_end                    shift and go to state 504
    empty                          shift and go to state 460

state 500

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION . EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 505


state 501

    (40) index_list -> index_list COMMA . index_key identifier LPAREN index_column_list RPAREN index_end
    (41) index_key -> . KEY
    (42) index_key -> . UNIQUE KEY

    KEY             shift and go to state 495
    UNIQUE          shift and go to state 498

    index_key                      shift and go to state 506

state 502

    (39) index_list -> index_key identifier . LPAREN index_column_list RPAREN index_end

    LPAREN          shift and go to state 507


state 503

    (42) index_key -> UNIQUE KEY .

    IDENTIFIER      reduce using rule 42 (index_key -> UNIQUE KEY .)
    DIGIT_IDENTIFIER reduce using rule 42 (index_key -> UNIQUE KEY .)
    ASTERISK        reduce using rule 42 (index_key -> UNIQUE KEY .)
    BACKQUOTED_IDENTIFIER reduce using rule 42 (index_key -> UNIQUE KEY .)
    NON_RESERVED    reduce using rule 42 (index_key -> UNIQUE KEY .)


state 504

    (31) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .

    UNIQUE          reduce using rule 31 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .)
    RPAREN          reduce using rule 31 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .)
    COMMA           reduce using rule 31 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .)


state 505

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ . SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    SCONST          shift and go to state 508


state 506

    (40) index_list -> index_list COMMA index_key . identifier LPAREN index_column_list RPAREN index_end
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 509
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 507

    (39) index_list -> index_key identifier LPAREN . index_column_list RPAREN index_end
    (43) index_column_list -> . identifier
    (44) index_column_list -> . index_column_list COMMA identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 332
    index_column_list              shift and go to state 510
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 508

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST . REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    REPLICA_NUM     shift and go to state 511


state 509

    (40) index_list -> index_list COMMA index_key identifier . LPAREN index_column_list RPAREN index_end

    LPAREN          shift and go to state 512


state 510

    (39) index_list -> index_key identifier LPAREN index_column_list . RPAREN index_end
    (44) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 513
    COMMA           shift and go to state 382


state 511

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM . EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 514


state 512

    (40) index_list -> index_list COMMA index_key identifier LPAREN . index_column_list RPAREN index_end
    (43) index_column_list -> . identifier
    (44) index_column_list -> . index_column_list COMMA identifier
    (262) identifier -> . IDENTIFIER
    (263) identifier -> . quoted_identifier
    (264) identifier -> . non_reserved
    (265) identifier -> . DIGIT_IDENTIFIER
    (266) identifier -> . ASTERISK
    (268) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (267) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 38
    DIGIT_IDENTIFIER shift and go to state 41
    ASTERISK        shift and go to state 42
    BACKQUOTED_IDENTIFIER shift and go to state 43
    NON_RESERVED    shift and go to state 44

    identifier                     shift and go to state 332
    index_column_list              shift and go to state 515
    quoted_identifier              shift and go to state 39
    non_reserved                   shift and go to state 40

state 513

    (39) index_list -> index_key identifier LPAREN index_column_list RPAREN . index_end
    (45) index_end -> . BLOCK_SIZE INTEGER
    (46) index_end -> . empty
    (271) empty -> .

    BLOCK_SIZE      shift and go to state 517
    COMMA           reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    index_end                      shift and go to state 516
    empty                          shift and go to state 518

state 514

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ . INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    INTEGER         shift and go to state 519


state 515

    (40) index_list -> index_list COMMA index_key identifier LPAREN index_column_list . RPAREN index_end
    (44) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 520
    COMMA           shift and go to state 382


state 516

    (39) index_list -> index_key identifier LPAREN index_column_list RPAREN index_end .

    COMMA           reduce using rule 39 (index_list -> index_key identifier LPAREN index_column_list RPAREN index_end .)
    RPAREN          reduce using rule 39 (index_list -> index_key identifier LPAREN index_column_list RPAREN index_end .)


state 517

    (45) index_end -> BLOCK_SIZE . INTEGER

    INTEGER         shift and go to state 521


state 518

    (46) index_end -> empty .

    COMMA           reduce using rule 46 (index_end -> empty .)
    RPAREN          reduce using rule 46 (index_end -> empty .)


state 519

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER . BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    BLOCK_SIZE      shift and go to state 522


state 520

    (40) index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN . index_end
    (45) index_end -> . BLOCK_SIZE INTEGER
    (46) index_end -> . empty
    (271) empty -> .

    BLOCK_SIZE      shift and go to state 517
    COMMA           reduce using rule 271 (empty -> .)
    RPAREN          reduce using rule 271 (empty -> .)

    index_end                      shift and go to state 523
    empty                          shift and go to state 518

state 521

    (45) index_end -> BLOCK_SIZE INTEGER .

    COMMA           reduce using rule 45 (index_end -> BLOCK_SIZE INTEGER .)
    RPAREN          reduce using rule 45 (index_end -> BLOCK_SIZE INTEGER .)


state 522

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE . EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 524


state 523

    (40) index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end .

    COMMA           reduce using rule 40 (index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end .)
    RPAREN          reduce using rule 40 (index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end .)


state 524

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ . INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    INTEGER         shift and go to state 525


state 525

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER . USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    USE_BLOOM_FILTER shift and go to state 526


state 526

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER . EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 527


state 527

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ . FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    FALSE           shift and go to state 528


state 528

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE . TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    TABLET_SIZE     shift and go to state 529


state 529

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE . EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 530


state 530

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ . INTEGER PCTFREE EQ INTEGER

    INTEGER         shift and go to state 531


state 531

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER . PCTFREE EQ INTEGER

    PCTFREE         shift and go to state 532


state 532

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE . EQ INTEGER

    EQ              shift and go to state 533


state 533

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ . INTEGER

    INTEGER         shift and go to state 534


state 534

    (8) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER .

    $end            reduce using rule 8 (create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 19 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 87 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 120 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 157 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 157 resolved as shift
WARNING: shift/reduce conflict for DIGIT_IDENTIFIER in state 157 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 157 resolved as shift
WARNING: shift/reduce conflict for BACKQUOTED_IDENTIFIER in state 157 resolved as shift
WARNING: shift/reduce conflict for NON_RESERVED in state 157 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 172 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 173 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 174 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for PERIOD in state 184 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 198 resolved as shift
WARNING: shift/reduce conflict for CROSS in state 207 resolved as shift
WARNING: shift/reduce conflict for NATURAL in state 207 resolved as shift
WARNING: shift/reduce conflict for INNER in state 207 resolved as shift
WARNING: shift/reduce conflict for LEFT in state 207 resolved as shift
WARNING: shift/reduce conflict for RIGHT in state 207 resolved as shift
WARNING: shift/reduce conflict for FULL in state 207 resolved as shift
WARNING: shift/reduce conflict for ON in state 207 resolved as shift
WARNING: shift/reduce conflict for USING in state 207 resolved as shift
WARNING: shift/reduce conflict for OR in state 210 resolved as shift
WARNING: shift/reduce conflict for AND in state 210 resolved as shift
WARNING: shift/reduce conflict for OR in state 211 resolved as shift
WARNING: shift/reduce conflict for AND in state 211 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 232 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 233 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 238 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 238 resolved as shift
WARNING: shift/reduce conflict for DIGIT_IDENTIFIER in state 238 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 238 resolved as shift
WARNING: shift/reduce conflict for BACKQUOTED_IDENTIFIER in state 238 resolved as shift
WARNING: shift/reduce conflict for NON_RESERVED in state 238 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 241 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 241 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 252 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 268 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 275 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 291 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 291 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 337 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 337 resolved as shift
WARNING: shift/reduce conflict for DIGIT_IDENTIFIER in state 337 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 337 resolved as shift
WARNING: shift/reduce conflict for BACKQUOTED_IDENTIFIER in state 337 resolved as shift
WARNING: shift/reduce conflict for NON_RESERVED in state 337 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 346 resolved as shift
WARNING: shift/reduce conflict for FOR in state 388 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 389 resolved as shift
WARNING: reduce/reduce conflict in state 277 resolved using rule (join_type -> empty)
WARNING: rejected rule (join_criteria -> empty) in state 277
WARNING: reduce/reduce conflict in state 377 resolved using rule (where_opt -> WHERE LPAREN search_condition RPAREN)
WARNING: rejected rule (search_condition -> LPAREN search_condition RPAREN) in state 377
