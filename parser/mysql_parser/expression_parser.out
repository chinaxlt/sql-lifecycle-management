Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    ALTER
    ANALYZE
    ANY
    APPROXIMATE
    ARRAY
    AT
    BERNOULLI
    CALL
    CATALOGS
    COALESCE
    COLUMN
    COLUMNS
    COMMITTED
    CONFIDENCE
    CONSTRAINT
    CUBE
    CURRENT
    DATA
    DATE
    DAY
    DESCRIBE
    DISTRIBUTED
    DROP
    ESCAPE
    EXPLAIN
    EXTRACT
    FOLLOWING
    FORMAT
    FUNCTIONS
    GRANT
    GRAPHVIZ
    GROUPING
    HOUR
    ICONST
    IF
    INTERVAL
    ISOLATION
    LEVEL
    LOGICAL
    MAP
    MINUTE
    MONTH
    NFC
    NFD
    NFKC
    NFKD
    NO
    NORMALIZE
    NULLIF
    NUMBER
    ONLY
    OPTION
    ORDINALITY
    OVER
    PARTITION
    PARTITIONS
    POISSONIZED
    POSITION
    PRECEDING
    PRIVILEGES
    PUBLIC
    RANGE
    READ
    RECURSIVE
    RENAME
    REPEATABLE
    REPLACE
    RESCALED
    RESET
    ROLLBACK
    ROLLUP
    ROW
    ROWS
    SCHEMAS
    SECOND
    SERIALIZABLE
    SESSION
    SETS
    SHOW
    SOME
    START
    STRATIFY
    STRING
    SUBSTRING
    SYSTEM
    TABLES
    TABLESAMPLE
    TEXT
    TIME
    TO
    TOP
    TRANSACTION
    TRY
    TRY_CAST
    TYPE
    UNBOUNDED
    UNCOMMITTED
    UNNEST
    USE
    VIEW
    WITH
    WORK
    WRITE
    YEAR
    ZONE

Grammar

Rule 0     S' -> command
Rule 1     command -> ddl
Rule 2     command -> dml
Rule 3     command -> others
Rule 4     ddl -> create_table
Rule 5     dml -> statement
Rule 6     others -> COMMIT
Rule 7     create_table -> CREATE TABLE identifier LPAREN column_list RPAREN create_table_end
Rule 8     create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end
Rule 9     create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ identifier
Rule 10    create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER
Rule 11    column_list -> column
Rule 12    column_list -> column_list COMMA column
Rule 13    column -> identifier column_type
Rule 14    column -> identifier column_type UNIQUE
Rule 15    column_type -> INT column_end
Rule 16    column_type -> INT LPAREN INTEGER RPAREN column_end
Rule 17    column_type -> FLOAT column_end
Rule 18    column_type -> BIGINT column_end
Rule 19    column_type -> BIGINT LPAREN INTEGER RPAREN column_end
Rule 20    column_type -> TINYINT LPAREN INTEGER RPAREN column_end
Rule 21    column_type -> DATETIME column_end
Rule 22    column_type -> DATETIME LPAREN INTEGER RPAREN column_end
Rule 23    column_type -> VARCHAR LPAREN INTEGER RPAREN column_end
Rule 24    column_type -> CHAR LPAREN INTEGER RPAREN column_end
Rule 25    column_type -> TIMESTAMP column_end
Rule 26    column_end -> collate NOT NULL comment_end
Rule 27    column_end -> collate NOT NULL DEFAULT SCONST comment_end
Rule 28    column_end -> collate DEFAULT NULL comment_end
Rule 29    column_end -> collate NULL DEFAULT NULL comment_end
Rule 30    column_end -> collate UNSIGNED AUTO_INCREMENT comment_end
Rule 31    column_end -> collate NOT NULL AUTO_INCREMENT comment_end
Rule 32    column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
Rule 33    column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
Rule 34    column_end -> empty
Rule 35    collate -> COLLATE identifier
Rule 36    collate -> empty
Rule 37    comment_end -> COMMENT SCONST
Rule 38    comment_end -> empty
Rule 39    primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN
Rule 40    primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list
Rule 41    index_list -> index_key identifier LPAREN index_column_list RPAREN index_end
Rule 42    index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end
Rule 43    index_key -> KEY
Rule 44    index_key -> UNIQUE KEY
Rule 45    index_column_list -> identifier
Rule 46    index_column_list -> index_column_list COMMA identifier
Rule 47    index_end -> BLOCK_SIZE INTEGER
Rule 48    index_end -> empty
Rule 49    statement -> cursor_specification
Rule 50    statement -> delete
Rule 51    statement -> update
Rule 52    statement -> insert
Rule 53    insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN
Rule 54    insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
Rule 55    insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec
Rule 56    insert -> INSERT ignore INTO table_reference query_spec
Rule 57    insert_value -> value
Rule 58    insert_value -> insert_value COMMA value
Rule 59    ignore -> IGNORE
Rule 60    ignore -> empty
Rule 61    delete -> DELETE FROM relations where_opt order_by_opt limit_opt
Rule 62    update -> UPDATE relations SET update_set_list where_opt order_by_opt limit_opt
Rule 63    update_set_list -> update_set
Rule 64    update_set_list -> update_set_list COMMA update_set
Rule 65    update_set -> comparison_predicate
Rule 66    cursor_specification -> query_expression order_by_opt limit_opt for_update_opt
Rule 67    subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN
Rule 68    for_update_opt -> FOR UPDATE
Rule 69    for_update_opt -> FOR UPDATE NOWAIT
Rule 70    for_update_opt -> FOR UPDATE WAIT INTEGER
Rule 71    for_update_opt -> LOCK IN SHARE MODE
Rule 72    for_update_opt -> empty
Rule 73    query_expression -> query_expression_body
Rule 74    query_expression_body -> nonjoin_query_expression
Rule 75    query_expression_body -> joined_table
Rule 76    order_by_opt -> ORDER BY sort_items
Rule 77    order_by_opt -> empty
Rule 78    sort_items -> sort_item
Rule 79    sort_items -> sort_items COMMA sort_item
Rule 80    sort_item -> value_expression order_opt null_ordering_opt
Rule 81    order_opt -> ASC
Rule 82    order_opt -> DESC
Rule 83    order_opt -> empty
Rule 84    null_ordering_opt -> NULLS FIRST
Rule 85    null_ordering_opt -> NULLS LAST
Rule 86    null_ordering_opt -> empty
Rule 87    limit_opt -> LIMIT INTEGER
Rule 88    limit_opt -> LIMIT INTEGER COMMA INTEGER
Rule 89    limit_opt -> LIMIT QM
Rule 90    limit_opt -> LIMIT QM COMMA QM
Rule 91    limit_opt -> LIMIT ALL
Rule 92    limit_opt -> LIMIT INTEGER OFFSET INTEGER
Rule 93    limit_opt -> empty
Rule 94    nonjoin_query_expression -> nonjoin_query_term
Rule 95    nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
Rule 96    nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
Rule 97    nonjoin_query_term -> nonjoin_query_primary
Rule 98    nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
Rule 99    nonjoin_query_primary -> simple_table
Rule 100   nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN
Rule 101   simple_table -> query_spec
Rule 102   simple_table -> explicit_table
Rule 103   simple_table -> table_value_constructor
Rule 104   explicit_table -> TABLE qualified_name
Rule 105   table_value_constructor -> VALUES values_list
Rule 106   values_list -> values_list COMMA expression
Rule 107   values_list -> expression
Rule 108   query_spec -> SELECT select_items table_expression_opt
Rule 109   where_opt -> WHERE search_condition
Rule 110   where_opt -> WHERE LPAREN search_condition RPAREN
Rule 111   where_opt -> empty
Rule 112   group_by_opt -> GROUP BY grouping_expressions
Rule 113   group_by_opt -> empty
Rule 114   grouping_expressions -> value_expression
Rule 115   grouping_expressions -> grouping_expressions COMMA value_expression
Rule 116   having_opt -> HAVING search_condition
Rule 117   having_opt -> empty
Rule 118   set_quantifier_opt -> ALL
Rule 119   set_quantifier_opt -> empty
Rule 120   select_items -> select_item
Rule 121   select_items -> select_items COMMA select_item
Rule 122   select_item -> derived_column
Rule 123   select_item -> DISTINCT LPAREN derived_column RPAREN
Rule 124   select_item -> DISTINCT derived_column
Rule 125   derived_column -> value_expression alias_opt
Rule 126   table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt
Rule 127   table_expression_opt -> empty
Rule 128   force_index -> FORCE INDEX LPAREN identifier RPAREN
Rule 129   force_index -> empty
Rule 130   relations -> relations COMMA table_reference
Rule 131   relations -> table_reference
Rule 132   table_reference -> table_primary
Rule 133   table_reference -> joined_table
Rule 134   table_primary -> aliased_relation
Rule 135   table_primary -> derived_table
Rule 136   joined_table -> cross_join
Rule 137   joined_table -> qualified_join
Rule 138   joined_table -> natural_join
Rule 139   cross_join -> table_reference CROSS JOIN table_primary
Rule 140   qualified_join -> table_reference join_type JOIN table_reference join_criteria
Rule 141   natural_join -> table_reference NATURAL join_type JOIN table_primary
Rule 142   join_type -> INNER
Rule 143   join_type -> LEFT outer_opt
Rule 144   join_type -> RIGHT outer_opt
Rule 145   join_type -> FULL outer_opt
Rule 146   join_type -> empty
Rule 147   outer_opt -> OUTER
Rule 148   outer_opt -> empty
Rule 149   join_criteria -> ON search_condition
Rule 150   join_criteria -> USING LPAREN join_columns RPAREN
Rule 151   join_criteria -> empty
Rule 152   join_columns -> identifier
Rule 153   join_columns -> join_columns COMMA identifier
Rule 154   aliased_relation -> qualified_name alias_opt
Rule 155   derived_table -> subquery alias_opt
Rule 156   alias_opt -> alias
Rule 157   alias_opt -> empty
Rule 158   alias -> as_opt identifier
Rule 159   expression -> search_condition
Rule 160   search_condition -> boolean_term
Rule 161   search_condition -> LPAREN search_condition RPAREN
Rule 162   search_condition -> search_condition OR search_condition
Rule 163   search_condition -> search_condition AND search_condition
Rule 164   boolean_term -> boolean_factor
Rule 165   boolean_term -> LPAREN boolean_term RPAREN
Rule 166   boolean_factor -> not_opt boolean_test
Rule 167   boolean_test -> boolean_primary
Rule 168   boolean_primary -> predicate
Rule 169   boolean_primary -> value_expression
Rule 170   predicate -> comparison_predicate
Rule 171   predicate -> between_predicate
Rule 172   predicate -> in_predicate
Rule 173   predicate -> like_predicate
Rule 174   predicate -> regexp_predicate
Rule 175   predicate -> null_predicate
Rule 176   predicate -> exists_predicate
Rule 177   comparison_predicate -> value_expression comparison_operator value_expression
Rule 178   between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression
Rule 179   in_predicate -> value_expression not_opt IN in_value
Rule 180   in_value -> LPAREN in_expressions RPAREN
Rule 181   in_value -> subquery
Rule 182   in_expressions -> value_expression
Rule 183   in_expressions -> in_expressions COMMA value_expression
Rule 184   like_predicate -> value_expression not_opt LIKE value_expression
Rule 185   regexp_predicate -> value_expression REGEXP value_expression
Rule 186   null_predicate -> value_expression IS not_opt NULL
Rule 187   exists_predicate -> EXISTS subquery
Rule 188   value_expression -> numeric_value_expression
Rule 189   numeric_value_expression -> numeric_value_expression PLUS term
Rule 190   numeric_value_expression -> numeric_value_expression MINUS term
Rule 191   numeric_value_expression -> term
Rule 192   term -> term ASTERISK factor
Rule 193   term -> term SLASH factor
Rule 194   term -> term PERCENT factor
Rule 195   term -> term CONCAT factor
Rule 196   term -> factor
Rule 197   factor -> sign_opt primary_expression
Rule 198   primary_expression -> parenthetic_primary_expression
Rule 199   primary_expression -> base_primary_expression
Rule 200   parenthetic_primary_expression -> LPAREN value_expression RPAREN
Rule 201   parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN
Rule 202   base_primary_expression -> value
Rule 203   base_primary_expression -> qualified_name
Rule 204   base_primary_expression -> subquery
Rule 205   base_primary_expression -> function_call
Rule 206   base_primary_expression -> date_time
Rule 207   base_primary_expression -> case_specification
Rule 208   base_primary_expression -> cast_specification
Rule 209   value -> NULL
Rule 210   value -> SCONST
Rule 211   value -> number
Rule 212   value -> boolean_value
Rule 213   value -> QUOTED_IDENTIFIER
Rule 214   value -> QM
Rule 215   function_call -> qualified_name LPAREN call_args RPAREN
Rule 216   function_call -> qualified_name LPAREN DISTINCT call_args RPAREN
Rule 217   call_args -> call_list
Rule 218   call_args -> empty_call_args
Rule 219   empty_call_args -> ASTERISK
Rule 220   empty_call_args -> empty
Rule 221   case_specification -> simple_case
Rule 222   case_specification -> searched_case
Rule 223   simple_case -> CASE value_expression when_clauses else_opt END
Rule 224   searched_case -> CASE when_clauses else_opt END
Rule 225   cast_specification -> CAST LPAREN value_expression AS data_type RPAREN
Rule 226   when_clauses -> when_clauses when_clause
Rule 227   when_clauses -> when_clause
Rule 228   when_clause -> WHEN search_condition THEN value_expression
Rule 229   else_opt -> ELSE value_expression
Rule 230   else_opt -> empty
Rule 231   call_list -> call_list COMMA expression
Rule 232   call_list -> expression
Rule 233   data_type -> base_data_type type_param_list_opt
Rule 234   type_param_list_opt -> LPAREN type_param_list RPAREN
Rule 235   type_param_list_opt -> empty
Rule 236   type_param_list -> type_param_list COMMA type_parameter
Rule 237   type_param_list -> type_parameter
Rule 238   type_parameter -> INTEGER
Rule 239   type_parameter -> base_data_type
Rule 240   base_data_type -> identifier
Rule 241   date_time -> CURRENT_DATE
Rule 242   date_time -> CURRENT_TIME integer_param_opt
Rule 243   date_time -> CURRENT_TIMESTAMP integer_param_opt
Rule 244   date_time -> LOCALTIME integer_param_opt
Rule 245   date_time -> LOCALTIMESTAMP integer_param_opt
Rule 246   comparison_operator -> EQ
Rule 247   comparison_operator -> NE
Rule 248   comparison_operator -> LT
Rule 249   comparison_operator -> LE
Rule 250   comparison_operator -> GT
Rule 251   comparison_operator -> GE
Rule 252   as_opt -> AS
Rule 253   as_opt -> empty
Rule 254   not_opt -> NOT
Rule 255   not_opt -> empty
Rule 256   boolean_value -> TRUE
Rule 257   boolean_value -> FALSE
Rule 258   sign_opt -> sign
Rule 259   sign_opt -> empty
Rule 260   sign -> PLUS
Rule 261   sign -> MINUS
Rule 262   integer_param_opt -> LPAREN INTEGER RPAREN
Rule 263   integer_param_opt -> LPAREN RPAREN
Rule 264   integer_param_opt -> empty
Rule 265   qualified_name -> qualified_name PERIOD qualified_name
Rule 266   qualified_name -> identifier
Rule 267   identifier -> IDENTIFIER
Rule 268   identifier -> quoted_identifier
Rule 269   identifier -> non_reserved
Rule 270   identifier -> DIGIT_IDENTIFIER
Rule 271   identifier -> ASTERISK
Rule 272   non_reserved -> NON_RESERVED
Rule 273   quoted_identifier -> BACKQUOTED_IDENTIFIER
Rule 274   number -> DECIMAL
Rule 275   number -> INTEGER
Rule 276   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 
ALL                  : 91 118
ALTER                : 
ANALYZE              : 
AND                  : 163 178
ANY                  : 
APPROXIMATE          : 
ARRAY                : 
AS                   : 225 252
ASC                  : 81
ASTERISK             : 192 219 271
AT                   : 
AUTO_INCREMENT       : 30 31
BACKQUOTED_IDENTIFIER : 273
BERNOULLI            : 
BETWEEN              : 178
BIGINT               : 18 19
BLOCK_SIZE           : 10 47
BY                   : 76 112
CALL                 : 
CASE                 : 223 224
CAST                 : 225
CATALOGS             : 
CHAR                 : 24
CHARSET              : 9 10
COALESCE             : 
COLLATE              : 10 35
COLUMN               : 
COLUMNS              : 
COMMA                : 8 12 40 42 46 58 64 79 88 90 106 115 121 130 153 183 231 236
COMMENT              : 37
COMMIT               : 6
COMMITTED            : 
COMPRESSION          : 10
CONCAT               : 195
CONFIDENCE           : 
CONSTRAINT           : 
CREATE               : 7 8
CROSS                : 139
CUBE                 : 
CURRENT              : 
CURRENT_DATE         : 241
CURRENT_TIME         : 242
CURRENT_TIMESTAMP    : 32 33 33 243
DATA                 : 
DATE                 : 
DATETIME             : 21 22
DAY                  : 
DECIMAL              : 274
DEFAULT              : 9 10 27 28 29 32 33
DELETE               : 61
DESC                 : 82
DESCRIBE             : 
DIGIT_IDENTIFIER     : 270
DISTINCT             : 123 124 216
DISTRIBUTED          : 
DROP                 : 
ELSE                 : 229
END                  : 223 224
ENGINE               : 9
EQ                   : 9 9 10 10 10 10 10 10 10 10 246
ESCAPE               : 
EXCEPT               : 96
EXISTS               : 187
EXPLAIN              : 
EXTRACT              : 
FALSE                : 10 257
FIRST                : 84
FLOAT                : 17
FOLLOWING            : 
FOR                  : 68 69 70
FORCE                : 128
FORMAT               : 
FROM                 : 61 126
FULL                 : 145
FUNCTIONS            : 
GE                   : 251
GRANT                : 
GRAPHVIZ             : 
GROUP                : 112
GROUPING             : 
GT                   : 250
HAVING               : 116
HOUR                 : 
ICONST               : 
IDENTIFIER           : 267
IF                   : 
IGNORE               : 59
IN                   : 71 179
INDEX                : 128
INNER                : 142
INSERT               : 53 54 55 56
INT                  : 15 16
INTEGER              : 10 10 10 10 16 19 20 22 23 24 47 70 87 88 88 92 92 238 262 275
INTERSECT            : 98
INTERVAL             : 
INTO                 : 53 54 55 56
IS                   : 186
ISOLATION            : 
JOIN                 : 139 140 141
KEY                  : 39 40 43 44
LAST                 : 85
LE                   : 249
LEFT                 : 143
LEVEL                : 
LIKE                 : 184
LIMIT                : 87 88 89 90 91 92
LOCALTIME            : 244
LOCALTIMESTAMP       : 245
LOCK                 : 71
LOGICAL              : 
LPAREN               : 7 8 16 19 20 22 23 24 39 40 41 42 53 54 54 55 67 100 110 123 128 150 161 165 180 200 201 215 216 225 234 262 263
LT                   : 248
MAP                  : 
MINUS                : 190 261
MINUTE               : 
MODE                 : 71
MONTH                : 
NATURAL              : 141
NE                   : 247
NFC                  : 
NFD                  : 
NFKC                 : 
NFKD                 : 
NO                   : 
NON_RESERVED         : 272
NORMALIZE            : 
NOT                  : 26 27 31 32 33 254
NOWAIT               : 69
NULL                 : 26 27 28 29 29 31 32 33 186 209
NULLIF               : 
NULLS                : 84 85
NUMBER               : 
OFFSET               : 92
ON                   : 33 149
ONLY                 : 
OPTION               : 
OR                   : 162
ORDER                : 76
ORDINALITY           : 
OUTER                : 147
OVER                 : 
PARTITION            : 
PARTITIONS           : 
PCTFREE              : 10
PERCENT              : 194
PERIOD               : 265
PLUS                 : 189 260
POISSONIZED          : 
POSITION             : 
PRECEDING            : 
PRIMARY              : 39 40
PRIVILEGES           : 
PUBLIC               : 
QM                   : 89 90 90 214
QUOTED_IDENTIFIER    : 213
RANGE                : 
READ                 : 
RECURSIVE            : 
REGEXP               : 185
RENAME               : 
REPEATABLE           : 
REPLACE              : 
REPLICA_NUM          : 10
RESCALED             : 
RESET                : 
RIGHT                : 144
ROLLBACK             : 
ROLLUP               : 
ROW                  : 
ROWS                 : 
RPAREN               : 7 8 16 19 20 22 23 24 39 40 41 42 53 54 54 55 67 100 110 123 128 150 161 165 180 200 201 215 216 225 234 262 263
SCHEMAS              : 
SCONST               : 10 27 37 210
SECOND               : 
SELECT               : 108
SERIALIZABLE         : 
SESSION              : 
SET                  : 62
SETS                 : 
SHARE                : 71
SHOW                 : 
SLASH                : 193
SOME                 : 
START                : 
STRATIFY             : 
STRING               : 
SUBSTRING            : 
SYSTEM               : 
TABLE                : 7 8 104
TABLES               : 
TABLESAMPLE          : 
TABLET_SIZE          : 10
TEXT                 : 
THEN                 : 228
TIME                 : 
TIMESTAMP            : 25
TINYINT              : 20
TO                   : 
TOP                  : 
TRANSACTION          : 
TRUE                 : 256
TRY                  : 
TRY_CAST             : 
TYPE                 : 
UNBOUNDED            : 
UNCOMMITTED          : 
UNION                : 95
UNIQUE               : 14 44
UNNEST               : 
UNSIGNED             : 30
UPDATE               : 33 62 68 69 70
USE                  : 
USE_BLOOM_FILTER     : 10
USING                : 150
VALUES               : 53 54 105
VARCHAR              : 23
VIEW                 : 
WAIT                 : 70
WHEN                 : 228
WHERE                : 109 110
WITH                 : 
WORK                 : 
WRITE                : 
YEAR                 : 
ZONE                 : 
error                : 

Nonterminals, with rules where they appear

alias                : 156
alias_opt            : 125 154 155
aliased_relation     : 134
as_opt               : 158
base_data_type       : 233 239
base_primary_expression : 199
between_predicate    : 171
boolean_factor       : 164
boolean_primary      : 167
boolean_term         : 160 165
boolean_test         : 166
boolean_value        : 212
call_args            : 215 216
call_list            : 217 231
case_specification   : 207
cast_specification   : 208
collate              : 26 27 28 29 30 31 32 33
column               : 11 12
column_end           : 15 16 17 18 19 20 21 22 23 24 25
column_list          : 7 8 12
column_type          : 13 14
command              : 0
comment_end          : 26 27 28 29 30 31 32 33
comparison_operator  : 177
comparison_predicate : 65 170
create_table         : 4
create_table_end     : 7 8
cross_join           : 136
cursor_specification : 49
data_type            : 225
date_time            : 206
ddl                  : 1
delete               : 50
derived_column       : 122 123 124
derived_table        : 135
dml                  : 2
else_opt             : 223 224
empty                : 34 36 38 48 60 72 77 83 86 93 111 113 117 119 127 129 146 148 151 157 220 230 235 253 255 259 264
empty_call_args      : 218
exists_predicate     : 176
explicit_table       : 102
expression           : 106 107 231 232
factor               : 192 193 194 195 196
for_update_opt       : 66 126
force_index          : 126
function_call        : 205
group_by_opt         : 126
grouping_expressions : 112 115
having_opt           : 126
identifier           : 7 8 9 9 10 10 13 14 35 41 42 45 46 128 152 153 158 240 266
ignore               : 53 54 55 56
in_expressions       : 180 183
in_predicate         : 172
in_value             : 179
index_column_list    : 39 40 41 42 46 54 55
index_end            : 41 42
index_key            : 41 42
index_list           : 40 42
insert               : 52
insert_value         : 53 54 58
integer_param_opt    : 242 243 244 245
join_columns         : 150 153
join_criteria        : 140
join_type            : 140 141
joined_table         : 75 133
like_predicate       : 173
limit_opt            : 61 62 66 67
natural_join         : 138
non_reserved         : 269
nonjoin_query_expression : 74 95 96 100
nonjoin_query_primary : 97 98
nonjoin_query_term   : 94 95 96 98
not_opt              : 166 178 179 184 186
null_ordering_opt    : 80
null_predicate       : 175
number               : 211
numeric_value_expression : 188 189 190
order_by_opt         : 61 62 66 67
order_opt            : 80
others               : 3
outer_opt            : 143 144 145
parenthetic_primary_expression : 198 201
predicate            : 168
primary_clause       : 8
primary_expression   : 197
qualified_join       : 137
qualified_name       : 104 154 203 215 216 265 265
query_expression     : 66 67
query_expression_body : 73
query_spec           : 55 56 101
quoted_identifier    : 268
regexp_predicate     : 174
relations            : 61 62 126 130
search_condition     : 109 110 116 149 159 161 162 162 163 163 228
searched_case        : 222
select_item          : 120 121
select_items         : 108 121
set_quantifier_opt   : 95 96 98
sign                 : 258
sign_opt             : 197
simple_case          : 221
simple_table         : 99
sort_item            : 78 79
sort_items           : 76 79
statement            : 5
subquery             : 155 181 187 204
table_expression_opt : 108
table_primary        : 132 139 141
table_reference      : 53 54 55 56 130 131 139 140 140 141
table_value_constructor : 103
term                 : 189 190 191 192 193 194 195
type_param_list      : 234 236
type_param_list_opt  : 233
type_parameter       : 236 237
update               : 51
update_set           : 63 64
update_set_list      : 62 64
value                : 57 58 202
value_expression     : 80 114 115 125 169 177 177 178 178 178 179 182 183 184 184 185 185 186 200 223 225 228 229
values_list          : 105 106
when_clause          : 226 227
when_clauses         : 223 224 226
where_opt            : 61 62 126

Parsing method: LALR

state 0

    (0) S' -> . command
    (1) command -> . ddl
    (2) command -> . dml
    (3) command -> . others
    (4) ddl -> . create_table
    (5) dml -> . statement
    (6) others -> . COMMIT
    (7) create_table -> . CREATE TABLE identifier LPAREN column_list RPAREN create_table_end
    (8) create_table -> . CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end
    (49) statement -> . cursor_specification
    (50) statement -> . delete
    (51) statement -> . update
    (52) statement -> . insert
    (66) cursor_specification -> . query_expression order_by_opt limit_opt for_update_opt
    (61) delete -> . DELETE FROM relations where_opt order_by_opt limit_opt
    (62) update -> . UPDATE relations SET update_set_list where_opt order_by_opt limit_opt
    (53) insert -> . INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN
    (54) insert -> . INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (55) insert -> . INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec
    (56) insert -> . INSERT ignore INTO table_reference query_spec
    (73) query_expression -> . query_expression_body
    (74) query_expression_body -> . nonjoin_query_expression
    (75) query_expression_body -> . joined_table
    (94) nonjoin_query_expression -> . nonjoin_query_term
    (95) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    COMMIT          shift and go to state 7
    CREATE          shift and go to state 8
    DELETE          shift and go to state 17
    UPDATE          shift and go to state 18
    INSERT          shift and go to state 19
    LPAREN          shift and go to state 11
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    command                        shift and go to state 1
    ddl                            shift and go to state 2
    dml                            shift and go to state 3
    others                         shift and go to state 4
    create_table                   shift and go to state 5
    statement                      shift and go to state 6
    identifier                     shift and go to state 10
    cursor_specification           shift and go to state 12
    delete                         shift and go to state 13
    update                         shift and go to state 14
    insert                         shift and go to state 15
    query_expression               shift and go to state 16
    table_reference                shift and go to state 20
    query_spec                     shift and go to state 22
    query_expression_body          shift and go to state 23
    nonjoin_query_expression       shift and go to state 24
    joined_table                   shift and go to state 25
    nonjoin_query_term             shift and go to state 26
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    nonjoin_query_primary          shift and go to state 30
    table_primary                  shift and go to state 31
    simple_table                   shift and go to state 32
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 1

    (0) S' -> command .



state 2

    (1) command -> ddl .

    $end            reduce using rule 1 (command -> ddl .)


state 3

    (2) command -> dml .

    $end            reduce using rule 2 (command -> dml .)


state 4

    (3) command -> others .

    $end            reduce using rule 3 (command -> others .)


state 5

    (4) ddl -> create_table .

    $end            reduce using rule 4 (ddl -> create_table .)


state 6

    (5) dml -> statement .

    $end            reduce using rule 5 (dml -> statement .)


state 7

    (6) others -> COMMIT .

    $end            reduce using rule 6 (others -> COMMIT .)


state 8

    (7) create_table -> CREATE . TABLE identifier LPAREN column_list RPAREN create_table_end
    (8) create_table -> CREATE . TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end

    TABLE           shift and go to state 47


state 9

    (104) explicit_table -> TABLE . qualified_name
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    qualified_name                 shift and go to state 48
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 10

    (266) qualified_name -> identifier .

    PERIOD          reduce using rule 266 (qualified_name -> identifier .)
    AS              reduce using rule 266 (qualified_name -> identifier .)
    IDENTIFIER      reduce using rule 266 (qualified_name -> identifier .)
    DIGIT_IDENTIFIER reduce using rule 266 (qualified_name -> identifier .)
    ASTERISK        reduce using rule 266 (qualified_name -> identifier .)
    BACKQUOTED_IDENTIFIER reduce using rule 266 (qualified_name -> identifier .)
    NON_RESERVED    reduce using rule 266 (qualified_name -> identifier .)
    CROSS           reduce using rule 266 (qualified_name -> identifier .)
    NATURAL         reduce using rule 266 (qualified_name -> identifier .)
    INNER           reduce using rule 266 (qualified_name -> identifier .)
    LEFT            reduce using rule 266 (qualified_name -> identifier .)
    RIGHT           reduce using rule 266 (qualified_name -> identifier .)
    FULL            reduce using rule 266 (qualified_name -> identifier .)
    JOIN            reduce using rule 266 (qualified_name -> identifier .)
    INTERSECT       reduce using rule 266 (qualified_name -> identifier .)
    UNION           reduce using rule 266 (qualified_name -> identifier .)
    EXCEPT          reduce using rule 266 (qualified_name -> identifier .)
    ORDER           reduce using rule 266 (qualified_name -> identifier .)
    LIMIT           reduce using rule 266 (qualified_name -> identifier .)
    FOR             reduce using rule 266 (qualified_name -> identifier .)
    LOCK            reduce using rule 266 (qualified_name -> identifier .)
    $end            reduce using rule 266 (qualified_name -> identifier .)
    RPAREN          reduce using rule 266 (qualified_name -> identifier .)
    SET             reduce using rule 266 (qualified_name -> identifier .)
    COMMA           reduce using rule 266 (qualified_name -> identifier .)
    WHERE           reduce using rule 266 (qualified_name -> identifier .)
    LPAREN          reduce using rule 266 (qualified_name -> identifier .)
    SLASH           reduce using rule 266 (qualified_name -> identifier .)
    PERCENT         reduce using rule 266 (qualified_name -> identifier .)
    CONCAT          reduce using rule 266 (qualified_name -> identifier .)
    PLUS            reduce using rule 266 (qualified_name -> identifier .)
    MINUS           reduce using rule 266 (qualified_name -> identifier .)
    FROM            reduce using rule 266 (qualified_name -> identifier .)
    REGEXP          reduce using rule 266 (qualified_name -> identifier .)
    IS              reduce using rule 266 (qualified_name -> identifier .)
    EQ              reduce using rule 266 (qualified_name -> identifier .)
    NE              reduce using rule 266 (qualified_name -> identifier .)
    LT              reduce using rule 266 (qualified_name -> identifier .)
    LE              reduce using rule 266 (qualified_name -> identifier .)
    GT              reduce using rule 266 (qualified_name -> identifier .)
    GE              reduce using rule 266 (qualified_name -> identifier .)
    NOT             reduce using rule 266 (qualified_name -> identifier .)
    BETWEEN         reduce using rule 266 (qualified_name -> identifier .)
    IN              reduce using rule 266 (qualified_name -> identifier .)
    LIKE            reduce using rule 266 (qualified_name -> identifier .)
    OR              reduce using rule 266 (qualified_name -> identifier .)
    AND             reduce using rule 266 (qualified_name -> identifier .)
    GROUP           reduce using rule 266 (qualified_name -> identifier .)
    HAVING          reduce using rule 266 (qualified_name -> identifier .)
    THEN            reduce using rule 266 (qualified_name -> identifier .)
    FORCE           reduce using rule 266 (qualified_name -> identifier .)
    VALUES          reduce using rule 266 (qualified_name -> identifier .)
    SELECT          reduce using rule 266 (qualified_name -> identifier .)
    ON              reduce using rule 266 (qualified_name -> identifier .)
    USING           reduce using rule 266 (qualified_name -> identifier .)
    ASC             reduce using rule 266 (qualified_name -> identifier .)
    DESC            reduce using rule 266 (qualified_name -> identifier .)
    NULLS           reduce using rule 266 (qualified_name -> identifier .)
    WHEN            reduce using rule 266 (qualified_name -> identifier .)
    END             reduce using rule 266 (qualified_name -> identifier .)
    ELSE            reduce using rule 266 (qualified_name -> identifier .)


state 11

    (100) nonjoin_query_primary -> LPAREN . nonjoin_query_expression RPAREN
    (67) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (94) nonjoin_query_expression -> . nonjoin_query_term
    (95) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (73) query_expression -> . query_expression_body
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (74) query_expression_body -> . nonjoin_query_expression
    (75) query_expression_body -> . joined_table
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 11
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    nonjoin_query_expression       shift and go to state 49
    query_expression               shift and go to state 50
    nonjoin_query_term             shift and go to state 26
    query_expression_body          shift and go to state 23
    nonjoin_query_primary          shift and go to state 30
    joined_table                   shift and go to state 25
    simple_table                   shift and go to state 32
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34
    table_reference                shift and go to state 20
    table_primary                  shift and go to state 31
    qualified_name                 shift and go to state 38
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 12

    (49) statement -> cursor_specification .

    $end            reduce using rule 49 (statement -> cursor_specification .)


state 13

    (50) statement -> delete .

    $end            reduce using rule 50 (statement -> delete .)


state 14

    (51) statement -> update .

    $end            reduce using rule 51 (statement -> update .)


state 15

    (52) statement -> insert .

    $end            reduce using rule 52 (statement -> insert .)


state 16

    (66) cursor_specification -> query_expression . order_by_opt limit_opt for_update_opt
    (76) order_by_opt -> . ORDER BY sort_items
    (77) order_by_opt -> . empty
    (276) empty -> .

    ORDER           shift and go to state 52
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)

    order_by_opt                   shift and go to state 51
    empty                          shift and go to state 53

state 17

    (61) delete -> DELETE . FROM relations where_opt order_by_opt limit_opt

    FROM            shift and go to state 54


state 18

    (62) update -> UPDATE . relations SET update_set_list where_opt order_by_opt limit_opt
    (130) relations -> . relations COMMA table_reference
    (131) relations -> . table_reference
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    relations                      shift and go to state 55
    table_reference                shift and go to state 56
    table_primary                  shift and go to state 31
    joined_table                   shift and go to state 57
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 19

    (53) insert -> INSERT . ignore INTO table_reference VALUES LPAREN insert_value RPAREN
    (54) insert -> INSERT . ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (55) insert -> INSERT . ignore INTO table_reference LPAREN index_column_list RPAREN query_spec
    (56) insert -> INSERT . ignore INTO table_reference query_spec
    (59) ignore -> . IGNORE
    (60) ignore -> . empty
    (276) empty -> .

    IGNORE          shift and go to state 60
    INTO            reduce using rule 276 (empty -> .)

    ignore                         shift and go to state 59
    empty                          shift and go to state 61

state 20

    (139) cross_join -> table_reference . CROSS JOIN table_primary
    (140) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (141) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (142) join_type -> . INNER
    (143) join_type -> . LEFT outer_opt
    (144) join_type -> . RIGHT outer_opt
    (145) join_type -> . FULL outer_opt
    (146) join_type -> . empty
    (276) empty -> .

    CROSS           shift and go to state 62
    NATURAL         shift and go to state 64
    INNER           shift and go to state 65
    LEFT            shift and go to state 66
    RIGHT           shift and go to state 67
    FULL            shift and go to state 68
    JOIN            reduce using rule 276 (empty -> .)

    join_type                      shift and go to state 63
    empty                          shift and go to state 69

state 21

    (105) table_value_constructor -> VALUES . values_list
    (106) values_list -> . values_list COMMA expression
    (107) values_list -> . expression
    (159) expression -> . search_condition
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    values_list                    shift and go to state 70
    expression                     shift and go to state 71
    search_condition               shift and go to state 72
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 22

    (101) simple_table -> query_spec .

    INTERSECT       reduce using rule 101 (simple_table -> query_spec .)
    UNION           reduce using rule 101 (simple_table -> query_spec .)
    EXCEPT          reduce using rule 101 (simple_table -> query_spec .)
    ORDER           reduce using rule 101 (simple_table -> query_spec .)
    LIMIT           reduce using rule 101 (simple_table -> query_spec .)
    FOR             reduce using rule 101 (simple_table -> query_spec .)
    LOCK            reduce using rule 101 (simple_table -> query_spec .)
    $end            reduce using rule 101 (simple_table -> query_spec .)
    RPAREN          reduce using rule 101 (simple_table -> query_spec .)


state 23

    (73) query_expression -> query_expression_body .

    ORDER           reduce using rule 73 (query_expression -> query_expression_body .)
    LIMIT           reduce using rule 73 (query_expression -> query_expression_body .)
    FOR             reduce using rule 73 (query_expression -> query_expression_body .)
    LOCK            reduce using rule 73 (query_expression -> query_expression_body .)
    $end            reduce using rule 73 (query_expression -> query_expression_body .)
    RPAREN          reduce using rule 73 (query_expression -> query_expression_body .)


state 24

    (74) query_expression_body -> nonjoin_query_expression .
    (95) nonjoin_query_expression -> nonjoin_query_expression . UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> nonjoin_query_expression . EXCEPT set_quantifier_opt nonjoin_query_term

    ORDER           reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)
    LIMIT           reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)
    FOR             reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)
    LOCK            reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)
    $end            reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)
    RPAREN          reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)
    UNION           shift and go to state 79
    EXCEPT          shift and go to state 80


state 25

    (75) query_expression_body -> joined_table .
    (133) table_reference -> joined_table .

    ORDER           reduce using rule 75 (query_expression_body -> joined_table .)
    LIMIT           reduce using rule 75 (query_expression_body -> joined_table .)
    FOR             reduce using rule 75 (query_expression_body -> joined_table .)
    LOCK            reduce using rule 75 (query_expression_body -> joined_table .)
    $end            reduce using rule 75 (query_expression_body -> joined_table .)
    RPAREN          reduce using rule 75 (query_expression_body -> joined_table .)
    CROSS           reduce using rule 133 (table_reference -> joined_table .)
    NATURAL         reduce using rule 133 (table_reference -> joined_table .)
    INNER           reduce using rule 133 (table_reference -> joined_table .)
    LEFT            reduce using rule 133 (table_reference -> joined_table .)
    RIGHT           reduce using rule 133 (table_reference -> joined_table .)
    FULL            reduce using rule 133 (table_reference -> joined_table .)
    JOIN            reduce using rule 133 (table_reference -> joined_table .)


state 26

    (94) nonjoin_query_expression -> nonjoin_query_term .
    (98) nonjoin_query_term -> nonjoin_query_term . INTERSECT set_quantifier_opt nonjoin_query_primary

    UNION           reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    EXCEPT          reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    ORDER           reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    LIMIT           reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    FOR             reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    LOCK            reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    $end            reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    RPAREN          reduce using rule 94 (nonjoin_query_expression -> nonjoin_query_term .)
    INTERSECT       shift and go to state 81


state 27

    (136) joined_table -> cross_join .

    ORDER           reduce using rule 136 (joined_table -> cross_join .)
    LIMIT           reduce using rule 136 (joined_table -> cross_join .)
    FOR             reduce using rule 136 (joined_table -> cross_join .)
    LOCK            reduce using rule 136 (joined_table -> cross_join .)
    $end            reduce using rule 136 (joined_table -> cross_join .)
    CROSS           reduce using rule 136 (joined_table -> cross_join .)
    NATURAL         reduce using rule 136 (joined_table -> cross_join .)
    INNER           reduce using rule 136 (joined_table -> cross_join .)
    LEFT            reduce using rule 136 (joined_table -> cross_join .)
    RIGHT           reduce using rule 136 (joined_table -> cross_join .)
    FULL            reduce using rule 136 (joined_table -> cross_join .)
    JOIN            reduce using rule 136 (joined_table -> cross_join .)
    RPAREN          reduce using rule 136 (joined_table -> cross_join .)
    SET             reduce using rule 136 (joined_table -> cross_join .)
    COMMA           reduce using rule 136 (joined_table -> cross_join .)
    WHERE           reduce using rule 136 (joined_table -> cross_join .)
    FORCE           reduce using rule 136 (joined_table -> cross_join .)
    GROUP           reduce using rule 136 (joined_table -> cross_join .)
    HAVING          reduce using rule 136 (joined_table -> cross_join .)
    INTERSECT       reduce using rule 136 (joined_table -> cross_join .)
    UNION           reduce using rule 136 (joined_table -> cross_join .)
    EXCEPT          reduce using rule 136 (joined_table -> cross_join .)
    VALUES          reduce using rule 136 (joined_table -> cross_join .)
    LPAREN          reduce using rule 136 (joined_table -> cross_join .)
    SELECT          reduce using rule 136 (joined_table -> cross_join .)
    ON              reduce using rule 136 (joined_table -> cross_join .)
    USING           reduce using rule 136 (joined_table -> cross_join .)


state 28

    (137) joined_table -> qualified_join .

    ORDER           reduce using rule 137 (joined_table -> qualified_join .)
    LIMIT           reduce using rule 137 (joined_table -> qualified_join .)
    FOR             reduce using rule 137 (joined_table -> qualified_join .)
    LOCK            reduce using rule 137 (joined_table -> qualified_join .)
    $end            reduce using rule 137 (joined_table -> qualified_join .)
    CROSS           reduce using rule 137 (joined_table -> qualified_join .)
    NATURAL         reduce using rule 137 (joined_table -> qualified_join .)
    INNER           reduce using rule 137 (joined_table -> qualified_join .)
    LEFT            reduce using rule 137 (joined_table -> qualified_join .)
    RIGHT           reduce using rule 137 (joined_table -> qualified_join .)
    FULL            reduce using rule 137 (joined_table -> qualified_join .)
    JOIN            reduce using rule 137 (joined_table -> qualified_join .)
    RPAREN          reduce using rule 137 (joined_table -> qualified_join .)
    SET             reduce using rule 137 (joined_table -> qualified_join .)
    COMMA           reduce using rule 137 (joined_table -> qualified_join .)
    WHERE           reduce using rule 137 (joined_table -> qualified_join .)
    FORCE           reduce using rule 137 (joined_table -> qualified_join .)
    GROUP           reduce using rule 137 (joined_table -> qualified_join .)
    HAVING          reduce using rule 137 (joined_table -> qualified_join .)
    INTERSECT       reduce using rule 137 (joined_table -> qualified_join .)
    UNION           reduce using rule 137 (joined_table -> qualified_join .)
    EXCEPT          reduce using rule 137 (joined_table -> qualified_join .)
    VALUES          reduce using rule 137 (joined_table -> qualified_join .)
    LPAREN          reduce using rule 137 (joined_table -> qualified_join .)
    SELECT          reduce using rule 137 (joined_table -> qualified_join .)
    ON              reduce using rule 137 (joined_table -> qualified_join .)
    USING           reduce using rule 137 (joined_table -> qualified_join .)


state 29

    (138) joined_table -> natural_join .

    ORDER           reduce using rule 138 (joined_table -> natural_join .)
    LIMIT           reduce using rule 138 (joined_table -> natural_join .)
    FOR             reduce using rule 138 (joined_table -> natural_join .)
    LOCK            reduce using rule 138 (joined_table -> natural_join .)
    $end            reduce using rule 138 (joined_table -> natural_join .)
    CROSS           reduce using rule 138 (joined_table -> natural_join .)
    NATURAL         reduce using rule 138 (joined_table -> natural_join .)
    INNER           reduce using rule 138 (joined_table -> natural_join .)
    LEFT            reduce using rule 138 (joined_table -> natural_join .)
    RIGHT           reduce using rule 138 (joined_table -> natural_join .)
    FULL            reduce using rule 138 (joined_table -> natural_join .)
    JOIN            reduce using rule 138 (joined_table -> natural_join .)
    RPAREN          reduce using rule 138 (joined_table -> natural_join .)
    SET             reduce using rule 138 (joined_table -> natural_join .)
    COMMA           reduce using rule 138 (joined_table -> natural_join .)
    WHERE           reduce using rule 138 (joined_table -> natural_join .)
    FORCE           reduce using rule 138 (joined_table -> natural_join .)
    GROUP           reduce using rule 138 (joined_table -> natural_join .)
    HAVING          reduce using rule 138 (joined_table -> natural_join .)
    INTERSECT       reduce using rule 138 (joined_table -> natural_join .)
    UNION           reduce using rule 138 (joined_table -> natural_join .)
    EXCEPT          reduce using rule 138 (joined_table -> natural_join .)
    VALUES          reduce using rule 138 (joined_table -> natural_join .)
    LPAREN          reduce using rule 138 (joined_table -> natural_join .)
    SELECT          reduce using rule 138 (joined_table -> natural_join .)
    ON              reduce using rule 138 (joined_table -> natural_join .)
    USING           reduce using rule 138 (joined_table -> natural_join .)


state 30

    (97) nonjoin_query_term -> nonjoin_query_primary .

    INTERSECT       reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    UNION           reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    EXCEPT          reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    ORDER           reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    LIMIT           reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    FOR             reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    LOCK            reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    $end            reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)
    RPAREN          reduce using rule 97 (nonjoin_query_term -> nonjoin_query_primary .)


state 31

    (132) table_reference -> table_primary .

    CROSS           reduce using rule 132 (table_reference -> table_primary .)
    NATURAL         reduce using rule 132 (table_reference -> table_primary .)
    INNER           reduce using rule 132 (table_reference -> table_primary .)
    LEFT            reduce using rule 132 (table_reference -> table_primary .)
    RIGHT           reduce using rule 132 (table_reference -> table_primary .)
    FULL            reduce using rule 132 (table_reference -> table_primary .)
    JOIN            reduce using rule 132 (table_reference -> table_primary .)
    SET             reduce using rule 132 (table_reference -> table_primary .)
    COMMA           reduce using rule 132 (table_reference -> table_primary .)
    WHERE           reduce using rule 132 (table_reference -> table_primary .)
    ORDER           reduce using rule 132 (table_reference -> table_primary .)
    LIMIT           reduce using rule 132 (table_reference -> table_primary .)
    $end            reduce using rule 132 (table_reference -> table_primary .)
    FORCE           reduce using rule 132 (table_reference -> table_primary .)
    GROUP           reduce using rule 132 (table_reference -> table_primary .)
    HAVING          reduce using rule 132 (table_reference -> table_primary .)
    FOR             reduce using rule 132 (table_reference -> table_primary .)
    LOCK            reduce using rule 132 (table_reference -> table_primary .)
    INTERSECT       reduce using rule 132 (table_reference -> table_primary .)
    UNION           reduce using rule 132 (table_reference -> table_primary .)
    EXCEPT          reduce using rule 132 (table_reference -> table_primary .)
    RPAREN          reduce using rule 132 (table_reference -> table_primary .)
    VALUES          reduce using rule 132 (table_reference -> table_primary .)
    LPAREN          reduce using rule 132 (table_reference -> table_primary .)
    SELECT          reduce using rule 132 (table_reference -> table_primary .)
    ON              reduce using rule 132 (table_reference -> table_primary .)
    USING           reduce using rule 132 (table_reference -> table_primary .)


state 32

    (99) nonjoin_query_primary -> simple_table .

    INTERSECT       reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    UNION           reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    EXCEPT          reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    ORDER           reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    LIMIT           reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    FOR             reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    LOCK            reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    $end            reduce using rule 99 (nonjoin_query_primary -> simple_table .)
    RPAREN          reduce using rule 99 (nonjoin_query_primary -> simple_table .)


state 33

    (102) simple_table -> explicit_table .

    INTERSECT       reduce using rule 102 (simple_table -> explicit_table .)
    UNION           reduce using rule 102 (simple_table -> explicit_table .)
    EXCEPT          reduce using rule 102 (simple_table -> explicit_table .)
    ORDER           reduce using rule 102 (simple_table -> explicit_table .)
    LIMIT           reduce using rule 102 (simple_table -> explicit_table .)
    FOR             reduce using rule 102 (simple_table -> explicit_table .)
    LOCK            reduce using rule 102 (simple_table -> explicit_table .)
    $end            reduce using rule 102 (simple_table -> explicit_table .)
    RPAREN          reduce using rule 102 (simple_table -> explicit_table .)


state 34

    (103) simple_table -> table_value_constructor .

    INTERSECT       reduce using rule 103 (simple_table -> table_value_constructor .)
    UNION           reduce using rule 103 (simple_table -> table_value_constructor .)
    EXCEPT          reduce using rule 103 (simple_table -> table_value_constructor .)
    ORDER           reduce using rule 103 (simple_table -> table_value_constructor .)
    LIMIT           reduce using rule 103 (simple_table -> table_value_constructor .)
    FOR             reduce using rule 103 (simple_table -> table_value_constructor .)
    LOCK            reduce using rule 103 (simple_table -> table_value_constructor .)
    $end            reduce using rule 103 (simple_table -> table_value_constructor .)
    RPAREN          reduce using rule 103 (simple_table -> table_value_constructor .)


state 35

    (134) table_primary -> aliased_relation .

    CROSS           reduce using rule 134 (table_primary -> aliased_relation .)
    NATURAL         reduce using rule 134 (table_primary -> aliased_relation .)
    INNER           reduce using rule 134 (table_primary -> aliased_relation .)
    LEFT            reduce using rule 134 (table_primary -> aliased_relation .)
    RIGHT           reduce using rule 134 (table_primary -> aliased_relation .)
    FULL            reduce using rule 134 (table_primary -> aliased_relation .)
    JOIN            reduce using rule 134 (table_primary -> aliased_relation .)
    SET             reduce using rule 134 (table_primary -> aliased_relation .)
    COMMA           reduce using rule 134 (table_primary -> aliased_relation .)
    WHERE           reduce using rule 134 (table_primary -> aliased_relation .)
    ORDER           reduce using rule 134 (table_primary -> aliased_relation .)
    LIMIT           reduce using rule 134 (table_primary -> aliased_relation .)
    $end            reduce using rule 134 (table_primary -> aliased_relation .)
    FORCE           reduce using rule 134 (table_primary -> aliased_relation .)
    GROUP           reduce using rule 134 (table_primary -> aliased_relation .)
    HAVING          reduce using rule 134 (table_primary -> aliased_relation .)
    FOR             reduce using rule 134 (table_primary -> aliased_relation .)
    LOCK            reduce using rule 134 (table_primary -> aliased_relation .)
    INTERSECT       reduce using rule 134 (table_primary -> aliased_relation .)
    UNION           reduce using rule 134 (table_primary -> aliased_relation .)
    EXCEPT          reduce using rule 134 (table_primary -> aliased_relation .)
    RPAREN          reduce using rule 134 (table_primary -> aliased_relation .)
    VALUES          reduce using rule 134 (table_primary -> aliased_relation .)
    LPAREN          reduce using rule 134 (table_primary -> aliased_relation .)
    SELECT          reduce using rule 134 (table_primary -> aliased_relation .)
    ON              reduce using rule 134 (table_primary -> aliased_relation .)
    USING           reduce using rule 134 (table_primary -> aliased_relation .)


state 36

    (135) table_primary -> derived_table .

    CROSS           reduce using rule 135 (table_primary -> derived_table .)
    NATURAL         reduce using rule 135 (table_primary -> derived_table .)
    INNER           reduce using rule 135 (table_primary -> derived_table .)
    LEFT            reduce using rule 135 (table_primary -> derived_table .)
    RIGHT           reduce using rule 135 (table_primary -> derived_table .)
    FULL            reduce using rule 135 (table_primary -> derived_table .)
    JOIN            reduce using rule 135 (table_primary -> derived_table .)
    SET             reduce using rule 135 (table_primary -> derived_table .)
    COMMA           reduce using rule 135 (table_primary -> derived_table .)
    WHERE           reduce using rule 135 (table_primary -> derived_table .)
    ORDER           reduce using rule 135 (table_primary -> derived_table .)
    LIMIT           reduce using rule 135 (table_primary -> derived_table .)
    $end            reduce using rule 135 (table_primary -> derived_table .)
    FORCE           reduce using rule 135 (table_primary -> derived_table .)
    GROUP           reduce using rule 135 (table_primary -> derived_table .)
    HAVING          reduce using rule 135 (table_primary -> derived_table .)
    FOR             reduce using rule 135 (table_primary -> derived_table .)
    LOCK            reduce using rule 135 (table_primary -> derived_table .)
    INTERSECT       reduce using rule 135 (table_primary -> derived_table .)
    UNION           reduce using rule 135 (table_primary -> derived_table .)
    EXCEPT          reduce using rule 135 (table_primary -> derived_table .)
    RPAREN          reduce using rule 135 (table_primary -> derived_table .)
    VALUES          reduce using rule 135 (table_primary -> derived_table .)
    LPAREN          reduce using rule 135 (table_primary -> derived_table .)
    SELECT          reduce using rule 135 (table_primary -> derived_table .)
    ON              reduce using rule 135 (table_primary -> derived_table .)
    USING           reduce using rule 135 (table_primary -> derived_table .)


state 37

    (108) query_spec -> SELECT . select_items table_expression_opt
    (120) select_items -> . select_item
    (121) select_items -> . select_items COMMA select_item
    (122) select_item -> . derived_column
    (123) select_item -> . DISTINCT LPAREN derived_column RPAREN
    (124) select_item -> . DISTINCT derived_column
    (125) derived_column -> . value_expression alias_opt
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    DISTINCT        shift and go to state 85
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    select_items                   shift and go to state 82
    select_item                    shift and go to state 83
    derived_column                 shift and go to state 84
    value_expression               shift and go to state 86
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 38

    (154) aliased_relation -> qualified_name . alias_opt
    (265) qualified_name -> qualified_name . PERIOD qualified_name
    (156) alias_opt -> . alias
    (157) alias_opt -> . empty
    (158) alias -> . as_opt identifier
    (276) empty -> .
    (252) as_opt -> . AS
    (253) as_opt -> . empty

    PERIOD          shift and go to state 96
    CROSS           reduce using rule 276 (empty -> .)
    NATURAL         reduce using rule 276 (empty -> .)
    INNER           reduce using rule 276 (empty -> .)
    LEFT            reduce using rule 276 (empty -> .)
    RIGHT           reduce using rule 276 (empty -> .)
    FULL            reduce using rule 276 (empty -> .)
    JOIN            reduce using rule 276 (empty -> .)
    SET             reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    WHERE           reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    FORCE           reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)
    LPAREN          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    ON              reduce using rule 276 (empty -> .)
    USING           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    AS              shift and go to state 100

    alias_opt                      shift and go to state 95
    alias                          shift and go to state 97
    empty                          shift and go to state 98
    as_opt                         shift and go to state 99

state 39

    (155) derived_table -> subquery . alias_opt
    (156) alias_opt -> . alias
    (157) alias_opt -> . empty
    (158) alias -> . as_opt identifier
    (276) empty -> .
    (252) as_opt -> . AS
    (253) as_opt -> . empty

    CROSS           reduce using rule 276 (empty -> .)
    NATURAL         reduce using rule 276 (empty -> .)
    INNER           reduce using rule 276 (empty -> .)
    LEFT            reduce using rule 276 (empty -> .)
    RIGHT           reduce using rule 276 (empty -> .)
    FULL            reduce using rule 276 (empty -> .)
    JOIN            reduce using rule 276 (empty -> .)
    SET             reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    WHERE           reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    FORCE           reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)
    LPAREN          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    ON              reduce using rule 276 (empty -> .)
    USING           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    AS              shift and go to state 100

    alias_opt                      shift and go to state 101
    alias                          shift and go to state 97
    empty                          shift and go to state 98
    as_opt                         shift and go to state 99

state 40

    (267) identifier -> IDENTIFIER .

    PERIOD          reduce using rule 267 (identifier -> IDENTIFIER .)
    AS              reduce using rule 267 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 267 (identifier -> IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 267 (identifier -> IDENTIFIER .)
    ASTERISK        reduce using rule 267 (identifier -> IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 267 (identifier -> IDENTIFIER .)
    NON_RESERVED    reduce using rule 267 (identifier -> IDENTIFIER .)
    CROSS           reduce using rule 267 (identifier -> IDENTIFIER .)
    NATURAL         reduce using rule 267 (identifier -> IDENTIFIER .)
    INNER           reduce using rule 267 (identifier -> IDENTIFIER .)
    LEFT            reduce using rule 267 (identifier -> IDENTIFIER .)
    RIGHT           reduce using rule 267 (identifier -> IDENTIFIER .)
    FULL            reduce using rule 267 (identifier -> IDENTIFIER .)
    JOIN            reduce using rule 267 (identifier -> IDENTIFIER .)
    INTERSECT       reduce using rule 267 (identifier -> IDENTIFIER .)
    UNION           reduce using rule 267 (identifier -> IDENTIFIER .)
    EXCEPT          reduce using rule 267 (identifier -> IDENTIFIER .)
    ORDER           reduce using rule 267 (identifier -> IDENTIFIER .)
    LIMIT           reduce using rule 267 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 267 (identifier -> IDENTIFIER .)
    LOCK            reduce using rule 267 (identifier -> IDENTIFIER .)
    $end            reduce using rule 267 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 267 (identifier -> IDENTIFIER .)
    SET             reduce using rule 267 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 267 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 267 (identifier -> IDENTIFIER .)
    WHERE           reduce using rule 267 (identifier -> IDENTIFIER .)
    SLASH           reduce using rule 267 (identifier -> IDENTIFIER .)
    PERCENT         reduce using rule 267 (identifier -> IDENTIFIER .)
    CONCAT          reduce using rule 267 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 267 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 267 (identifier -> IDENTIFIER .)
    FROM            reduce using rule 267 (identifier -> IDENTIFIER .)
    REGEXP          reduce using rule 267 (identifier -> IDENTIFIER .)
    IS              reduce using rule 267 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 267 (identifier -> IDENTIFIER .)
    NE              reduce using rule 267 (identifier -> IDENTIFIER .)
    LT              reduce using rule 267 (identifier -> IDENTIFIER .)
    LE              reduce using rule 267 (identifier -> IDENTIFIER .)
    GT              reduce using rule 267 (identifier -> IDENTIFIER .)
    GE              reduce using rule 267 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 267 (identifier -> IDENTIFIER .)
    BETWEEN         reduce using rule 267 (identifier -> IDENTIFIER .)
    IN              reduce using rule 267 (identifier -> IDENTIFIER .)
    LIKE            reduce using rule 267 (identifier -> IDENTIFIER .)
    OR              reduce using rule 267 (identifier -> IDENTIFIER .)
    AND             reduce using rule 267 (identifier -> IDENTIFIER .)
    GROUP           reduce using rule 267 (identifier -> IDENTIFIER .)
    HAVING          reduce using rule 267 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 267 (identifier -> IDENTIFIER .)
    FORCE           reduce using rule 267 (identifier -> IDENTIFIER .)
    VALUES          reduce using rule 267 (identifier -> IDENTIFIER .)
    SELECT          reduce using rule 267 (identifier -> IDENTIFIER .)
    ON              reduce using rule 267 (identifier -> IDENTIFIER .)
    USING           reduce using rule 267 (identifier -> IDENTIFIER .)
    ASC             reduce using rule 267 (identifier -> IDENTIFIER .)
    DESC            reduce using rule 267 (identifier -> IDENTIFIER .)
    NULLS           reduce using rule 267 (identifier -> IDENTIFIER .)
    WHEN            reduce using rule 267 (identifier -> IDENTIFIER .)
    END             reduce using rule 267 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 267 (identifier -> IDENTIFIER .)
    INT             reduce using rule 267 (identifier -> IDENTIFIER .)
    FLOAT           reduce using rule 267 (identifier -> IDENTIFIER .)
    BIGINT          reduce using rule 267 (identifier -> IDENTIFIER .)
    TINYINT         reduce using rule 267 (identifier -> IDENTIFIER .)
    DATETIME        reduce using rule 267 (identifier -> IDENTIFIER .)
    VARCHAR         reduce using rule 267 (identifier -> IDENTIFIER .)
    CHAR            reduce using rule 267 (identifier -> IDENTIFIER .)
    TIMESTAMP       reduce using rule 267 (identifier -> IDENTIFIER .)
    DEFAULT         reduce using rule 267 (identifier -> IDENTIFIER .)
    NULL            reduce using rule 267 (identifier -> IDENTIFIER .)
    UNSIGNED        reduce using rule 267 (identifier -> IDENTIFIER .)
    COLLATE         reduce using rule 267 (identifier -> IDENTIFIER .)
    COMPRESSION     reduce using rule 267 (identifier -> IDENTIFIER .)


state 41

    (268) identifier -> quoted_identifier .

    PERIOD          reduce using rule 268 (identifier -> quoted_identifier .)
    AS              reduce using rule 268 (identifier -> quoted_identifier .)
    IDENTIFIER      reduce using rule 268 (identifier -> quoted_identifier .)
    DIGIT_IDENTIFIER reduce using rule 268 (identifier -> quoted_identifier .)
    ASTERISK        reduce using rule 268 (identifier -> quoted_identifier .)
    BACKQUOTED_IDENTIFIER reduce using rule 268 (identifier -> quoted_identifier .)
    NON_RESERVED    reduce using rule 268 (identifier -> quoted_identifier .)
    CROSS           reduce using rule 268 (identifier -> quoted_identifier .)
    NATURAL         reduce using rule 268 (identifier -> quoted_identifier .)
    INNER           reduce using rule 268 (identifier -> quoted_identifier .)
    LEFT            reduce using rule 268 (identifier -> quoted_identifier .)
    RIGHT           reduce using rule 268 (identifier -> quoted_identifier .)
    FULL            reduce using rule 268 (identifier -> quoted_identifier .)
    JOIN            reduce using rule 268 (identifier -> quoted_identifier .)
    INTERSECT       reduce using rule 268 (identifier -> quoted_identifier .)
    UNION           reduce using rule 268 (identifier -> quoted_identifier .)
    EXCEPT          reduce using rule 268 (identifier -> quoted_identifier .)
    ORDER           reduce using rule 268 (identifier -> quoted_identifier .)
    LIMIT           reduce using rule 268 (identifier -> quoted_identifier .)
    FOR             reduce using rule 268 (identifier -> quoted_identifier .)
    LOCK            reduce using rule 268 (identifier -> quoted_identifier .)
    $end            reduce using rule 268 (identifier -> quoted_identifier .)
    RPAREN          reduce using rule 268 (identifier -> quoted_identifier .)
    SET             reduce using rule 268 (identifier -> quoted_identifier .)
    COMMA           reduce using rule 268 (identifier -> quoted_identifier .)
    LPAREN          reduce using rule 268 (identifier -> quoted_identifier .)
    WHERE           reduce using rule 268 (identifier -> quoted_identifier .)
    SLASH           reduce using rule 268 (identifier -> quoted_identifier .)
    PERCENT         reduce using rule 268 (identifier -> quoted_identifier .)
    CONCAT          reduce using rule 268 (identifier -> quoted_identifier .)
    PLUS            reduce using rule 268 (identifier -> quoted_identifier .)
    MINUS           reduce using rule 268 (identifier -> quoted_identifier .)
    FROM            reduce using rule 268 (identifier -> quoted_identifier .)
    REGEXP          reduce using rule 268 (identifier -> quoted_identifier .)
    IS              reduce using rule 268 (identifier -> quoted_identifier .)
    EQ              reduce using rule 268 (identifier -> quoted_identifier .)
    NE              reduce using rule 268 (identifier -> quoted_identifier .)
    LT              reduce using rule 268 (identifier -> quoted_identifier .)
    LE              reduce using rule 268 (identifier -> quoted_identifier .)
    GT              reduce using rule 268 (identifier -> quoted_identifier .)
    GE              reduce using rule 268 (identifier -> quoted_identifier .)
    NOT             reduce using rule 268 (identifier -> quoted_identifier .)
    BETWEEN         reduce using rule 268 (identifier -> quoted_identifier .)
    IN              reduce using rule 268 (identifier -> quoted_identifier .)
    LIKE            reduce using rule 268 (identifier -> quoted_identifier .)
    OR              reduce using rule 268 (identifier -> quoted_identifier .)
    AND             reduce using rule 268 (identifier -> quoted_identifier .)
    GROUP           reduce using rule 268 (identifier -> quoted_identifier .)
    HAVING          reduce using rule 268 (identifier -> quoted_identifier .)
    THEN            reduce using rule 268 (identifier -> quoted_identifier .)
    FORCE           reduce using rule 268 (identifier -> quoted_identifier .)
    VALUES          reduce using rule 268 (identifier -> quoted_identifier .)
    SELECT          reduce using rule 268 (identifier -> quoted_identifier .)
    ON              reduce using rule 268 (identifier -> quoted_identifier .)
    USING           reduce using rule 268 (identifier -> quoted_identifier .)
    ASC             reduce using rule 268 (identifier -> quoted_identifier .)
    DESC            reduce using rule 268 (identifier -> quoted_identifier .)
    NULLS           reduce using rule 268 (identifier -> quoted_identifier .)
    WHEN            reduce using rule 268 (identifier -> quoted_identifier .)
    END             reduce using rule 268 (identifier -> quoted_identifier .)
    ELSE            reduce using rule 268 (identifier -> quoted_identifier .)
    INT             reduce using rule 268 (identifier -> quoted_identifier .)
    FLOAT           reduce using rule 268 (identifier -> quoted_identifier .)
    BIGINT          reduce using rule 268 (identifier -> quoted_identifier .)
    TINYINT         reduce using rule 268 (identifier -> quoted_identifier .)
    DATETIME        reduce using rule 268 (identifier -> quoted_identifier .)
    VARCHAR         reduce using rule 268 (identifier -> quoted_identifier .)
    CHAR            reduce using rule 268 (identifier -> quoted_identifier .)
    TIMESTAMP       reduce using rule 268 (identifier -> quoted_identifier .)
    DEFAULT         reduce using rule 268 (identifier -> quoted_identifier .)
    NULL            reduce using rule 268 (identifier -> quoted_identifier .)
    UNSIGNED        reduce using rule 268 (identifier -> quoted_identifier .)
    COLLATE         reduce using rule 268 (identifier -> quoted_identifier .)
    COMPRESSION     reduce using rule 268 (identifier -> quoted_identifier .)


state 42

    (269) identifier -> non_reserved .

    PERIOD          reduce using rule 269 (identifier -> non_reserved .)
    AS              reduce using rule 269 (identifier -> non_reserved .)
    IDENTIFIER      reduce using rule 269 (identifier -> non_reserved .)
    DIGIT_IDENTIFIER reduce using rule 269 (identifier -> non_reserved .)
    ASTERISK        reduce using rule 269 (identifier -> non_reserved .)
    BACKQUOTED_IDENTIFIER reduce using rule 269 (identifier -> non_reserved .)
    NON_RESERVED    reduce using rule 269 (identifier -> non_reserved .)
    CROSS           reduce using rule 269 (identifier -> non_reserved .)
    NATURAL         reduce using rule 269 (identifier -> non_reserved .)
    INNER           reduce using rule 269 (identifier -> non_reserved .)
    LEFT            reduce using rule 269 (identifier -> non_reserved .)
    RIGHT           reduce using rule 269 (identifier -> non_reserved .)
    FULL            reduce using rule 269 (identifier -> non_reserved .)
    JOIN            reduce using rule 269 (identifier -> non_reserved .)
    INTERSECT       reduce using rule 269 (identifier -> non_reserved .)
    UNION           reduce using rule 269 (identifier -> non_reserved .)
    EXCEPT          reduce using rule 269 (identifier -> non_reserved .)
    ORDER           reduce using rule 269 (identifier -> non_reserved .)
    LIMIT           reduce using rule 269 (identifier -> non_reserved .)
    FOR             reduce using rule 269 (identifier -> non_reserved .)
    LOCK            reduce using rule 269 (identifier -> non_reserved .)
    $end            reduce using rule 269 (identifier -> non_reserved .)
    RPAREN          reduce using rule 269 (identifier -> non_reserved .)
    SET             reduce using rule 269 (identifier -> non_reserved .)
    COMMA           reduce using rule 269 (identifier -> non_reserved .)
    LPAREN          reduce using rule 269 (identifier -> non_reserved .)
    WHERE           reduce using rule 269 (identifier -> non_reserved .)
    SLASH           reduce using rule 269 (identifier -> non_reserved .)
    PERCENT         reduce using rule 269 (identifier -> non_reserved .)
    CONCAT          reduce using rule 269 (identifier -> non_reserved .)
    PLUS            reduce using rule 269 (identifier -> non_reserved .)
    MINUS           reduce using rule 269 (identifier -> non_reserved .)
    FROM            reduce using rule 269 (identifier -> non_reserved .)
    REGEXP          reduce using rule 269 (identifier -> non_reserved .)
    IS              reduce using rule 269 (identifier -> non_reserved .)
    EQ              reduce using rule 269 (identifier -> non_reserved .)
    NE              reduce using rule 269 (identifier -> non_reserved .)
    LT              reduce using rule 269 (identifier -> non_reserved .)
    LE              reduce using rule 269 (identifier -> non_reserved .)
    GT              reduce using rule 269 (identifier -> non_reserved .)
    GE              reduce using rule 269 (identifier -> non_reserved .)
    NOT             reduce using rule 269 (identifier -> non_reserved .)
    BETWEEN         reduce using rule 269 (identifier -> non_reserved .)
    IN              reduce using rule 269 (identifier -> non_reserved .)
    LIKE            reduce using rule 269 (identifier -> non_reserved .)
    OR              reduce using rule 269 (identifier -> non_reserved .)
    AND             reduce using rule 269 (identifier -> non_reserved .)
    GROUP           reduce using rule 269 (identifier -> non_reserved .)
    HAVING          reduce using rule 269 (identifier -> non_reserved .)
    THEN            reduce using rule 269 (identifier -> non_reserved .)
    FORCE           reduce using rule 269 (identifier -> non_reserved .)
    VALUES          reduce using rule 269 (identifier -> non_reserved .)
    SELECT          reduce using rule 269 (identifier -> non_reserved .)
    ON              reduce using rule 269 (identifier -> non_reserved .)
    USING           reduce using rule 269 (identifier -> non_reserved .)
    ASC             reduce using rule 269 (identifier -> non_reserved .)
    DESC            reduce using rule 269 (identifier -> non_reserved .)
    NULLS           reduce using rule 269 (identifier -> non_reserved .)
    WHEN            reduce using rule 269 (identifier -> non_reserved .)
    END             reduce using rule 269 (identifier -> non_reserved .)
    ELSE            reduce using rule 269 (identifier -> non_reserved .)
    INT             reduce using rule 269 (identifier -> non_reserved .)
    FLOAT           reduce using rule 269 (identifier -> non_reserved .)
    BIGINT          reduce using rule 269 (identifier -> non_reserved .)
    TINYINT         reduce using rule 269 (identifier -> non_reserved .)
    DATETIME        reduce using rule 269 (identifier -> non_reserved .)
    VARCHAR         reduce using rule 269 (identifier -> non_reserved .)
    CHAR            reduce using rule 269 (identifier -> non_reserved .)
    TIMESTAMP       reduce using rule 269 (identifier -> non_reserved .)
    DEFAULT         reduce using rule 269 (identifier -> non_reserved .)
    NULL            reduce using rule 269 (identifier -> non_reserved .)
    UNSIGNED        reduce using rule 269 (identifier -> non_reserved .)
    COLLATE         reduce using rule 269 (identifier -> non_reserved .)
    COMPRESSION     reduce using rule 269 (identifier -> non_reserved .)


state 43

    (270) identifier -> DIGIT_IDENTIFIER .

    PERIOD          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    AS              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    IDENTIFIER      reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    ASTERISK        reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    NON_RESERVED    reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    CROSS           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    NATURAL         reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    INNER           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    LEFT            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    RIGHT           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    FULL            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    JOIN            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    INTERSECT       reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    UNION           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    EXCEPT          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    ORDER           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    LIMIT           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    FOR             reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    LOCK            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    $end            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    RPAREN          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    SET             reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    COMMA           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    LPAREN          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    WHERE           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    SLASH           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    PERCENT         reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    CONCAT          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    PLUS            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    MINUS           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    FROM            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    REGEXP          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    IS              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    EQ              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    NE              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    LT              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    LE              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    GT              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    GE              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    NOT             reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    BETWEEN         reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    IN              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    LIKE            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    OR              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    AND             reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    GROUP           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    HAVING          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    THEN            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    FORCE           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    VALUES          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    SELECT          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    ON              reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    USING           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    ASC             reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    DESC            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    NULLS           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    WHEN            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    END             reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    ELSE            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    INT             reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    FLOAT           reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    BIGINT          reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    TINYINT         reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    DATETIME        reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    VARCHAR         reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    CHAR            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    TIMESTAMP       reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    DEFAULT         reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    NULL            reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    UNSIGNED        reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    COLLATE         reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)
    COMPRESSION     reduce using rule 270 (identifier -> DIGIT_IDENTIFIER .)


state 44

    (271) identifier -> ASTERISK .

    PERIOD          reduce using rule 271 (identifier -> ASTERISK .)
    AS              reduce using rule 271 (identifier -> ASTERISK .)
    IDENTIFIER      reduce using rule 271 (identifier -> ASTERISK .)
    DIGIT_IDENTIFIER reduce using rule 271 (identifier -> ASTERISK .)
    ASTERISK        reduce using rule 271 (identifier -> ASTERISK .)
    BACKQUOTED_IDENTIFIER reduce using rule 271 (identifier -> ASTERISK .)
    NON_RESERVED    reduce using rule 271 (identifier -> ASTERISK .)
    CROSS           reduce using rule 271 (identifier -> ASTERISK .)
    NATURAL         reduce using rule 271 (identifier -> ASTERISK .)
    INNER           reduce using rule 271 (identifier -> ASTERISK .)
    LEFT            reduce using rule 271 (identifier -> ASTERISK .)
    RIGHT           reduce using rule 271 (identifier -> ASTERISK .)
    FULL            reduce using rule 271 (identifier -> ASTERISK .)
    JOIN            reduce using rule 271 (identifier -> ASTERISK .)
    INTERSECT       reduce using rule 271 (identifier -> ASTERISK .)
    UNION           reduce using rule 271 (identifier -> ASTERISK .)
    EXCEPT          reduce using rule 271 (identifier -> ASTERISK .)
    ORDER           reduce using rule 271 (identifier -> ASTERISK .)
    LIMIT           reduce using rule 271 (identifier -> ASTERISK .)
    FOR             reduce using rule 271 (identifier -> ASTERISK .)
    LOCK            reduce using rule 271 (identifier -> ASTERISK .)
    $end            reduce using rule 271 (identifier -> ASTERISK .)
    RPAREN          reduce using rule 271 (identifier -> ASTERISK .)
    SET             reduce using rule 271 (identifier -> ASTERISK .)
    COMMA           reduce using rule 271 (identifier -> ASTERISK .)
    LPAREN          reduce using rule 271 (identifier -> ASTERISK .)
    WHERE           reduce using rule 271 (identifier -> ASTERISK .)
    SLASH           reduce using rule 271 (identifier -> ASTERISK .)
    PERCENT         reduce using rule 271 (identifier -> ASTERISK .)
    CONCAT          reduce using rule 271 (identifier -> ASTERISK .)
    PLUS            reduce using rule 271 (identifier -> ASTERISK .)
    MINUS           reduce using rule 271 (identifier -> ASTERISK .)
    FROM            reduce using rule 271 (identifier -> ASTERISK .)
    REGEXP          reduce using rule 271 (identifier -> ASTERISK .)
    IS              reduce using rule 271 (identifier -> ASTERISK .)
    EQ              reduce using rule 271 (identifier -> ASTERISK .)
    NE              reduce using rule 271 (identifier -> ASTERISK .)
    LT              reduce using rule 271 (identifier -> ASTERISK .)
    LE              reduce using rule 271 (identifier -> ASTERISK .)
    GT              reduce using rule 271 (identifier -> ASTERISK .)
    GE              reduce using rule 271 (identifier -> ASTERISK .)
    NOT             reduce using rule 271 (identifier -> ASTERISK .)
    BETWEEN         reduce using rule 271 (identifier -> ASTERISK .)
    IN              reduce using rule 271 (identifier -> ASTERISK .)
    LIKE            reduce using rule 271 (identifier -> ASTERISK .)
    OR              reduce using rule 271 (identifier -> ASTERISK .)
    AND             reduce using rule 271 (identifier -> ASTERISK .)
    GROUP           reduce using rule 271 (identifier -> ASTERISK .)
    HAVING          reduce using rule 271 (identifier -> ASTERISK .)
    THEN            reduce using rule 271 (identifier -> ASTERISK .)
    FORCE           reduce using rule 271 (identifier -> ASTERISK .)
    VALUES          reduce using rule 271 (identifier -> ASTERISK .)
    SELECT          reduce using rule 271 (identifier -> ASTERISK .)
    ON              reduce using rule 271 (identifier -> ASTERISK .)
    USING           reduce using rule 271 (identifier -> ASTERISK .)
    ASC             reduce using rule 271 (identifier -> ASTERISK .)
    DESC            reduce using rule 271 (identifier -> ASTERISK .)
    NULLS           reduce using rule 271 (identifier -> ASTERISK .)
    WHEN            reduce using rule 271 (identifier -> ASTERISK .)
    END             reduce using rule 271 (identifier -> ASTERISK .)
    ELSE            reduce using rule 271 (identifier -> ASTERISK .)
    INT             reduce using rule 271 (identifier -> ASTERISK .)
    FLOAT           reduce using rule 271 (identifier -> ASTERISK .)
    BIGINT          reduce using rule 271 (identifier -> ASTERISK .)
    TINYINT         reduce using rule 271 (identifier -> ASTERISK .)
    DATETIME        reduce using rule 271 (identifier -> ASTERISK .)
    VARCHAR         reduce using rule 271 (identifier -> ASTERISK .)
    CHAR            reduce using rule 271 (identifier -> ASTERISK .)
    TIMESTAMP       reduce using rule 271 (identifier -> ASTERISK .)
    DEFAULT         reduce using rule 271 (identifier -> ASTERISK .)
    NULL            reduce using rule 271 (identifier -> ASTERISK .)
    UNSIGNED        reduce using rule 271 (identifier -> ASTERISK .)
    COLLATE         reduce using rule 271 (identifier -> ASTERISK .)
    COMPRESSION     reduce using rule 271 (identifier -> ASTERISK .)


state 45

    (273) quoted_identifier -> BACKQUOTED_IDENTIFIER .

    PERIOD          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    AS              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    IDENTIFIER      reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ASTERISK        reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NON_RESERVED    reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    CROSS           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NATURAL         reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    INNER           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LEFT            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    RIGHT           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FULL            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    JOIN            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    INTERSECT       reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    UNION           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    EXCEPT          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ORDER           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LIMIT           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FOR             reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LOCK            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    $end            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    RPAREN          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    SET             reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    COMMA           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LPAREN          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    WHERE           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    SLASH           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    PERCENT         reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    CONCAT          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    PLUS            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    MINUS           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FROM            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    REGEXP          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    IS              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    EQ              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NE              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LT              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LE              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    GT              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    GE              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NOT             reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    BETWEEN         reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    IN              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    LIKE            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    OR              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    AND             reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    GROUP           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    HAVING          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    THEN            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FORCE           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    VALUES          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    SELECT          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ON              reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    USING           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ASC             reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DESC            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NULLS           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    WHEN            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    END             reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    ELSE            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    INT             reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    FLOAT           reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    BIGINT          reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    TINYINT         reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DATETIME        reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    VARCHAR         reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    CHAR            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    TIMESTAMP       reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    DEFAULT         reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    NULL            reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    UNSIGNED        reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    COLLATE         reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)
    COMPRESSION     reduce using rule 273 (quoted_identifier -> BACKQUOTED_IDENTIFIER .)


state 46

    (272) non_reserved -> NON_RESERVED .

    PERIOD          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    AS              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    IDENTIFIER      reduce using rule 272 (non_reserved -> NON_RESERVED .)
    DIGIT_IDENTIFIER reduce using rule 272 (non_reserved -> NON_RESERVED .)
    ASTERISK        reduce using rule 272 (non_reserved -> NON_RESERVED .)
    BACKQUOTED_IDENTIFIER reduce using rule 272 (non_reserved -> NON_RESERVED .)
    NON_RESERVED    reduce using rule 272 (non_reserved -> NON_RESERVED .)
    CROSS           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    NATURAL         reduce using rule 272 (non_reserved -> NON_RESERVED .)
    INNER           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    LEFT            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    RIGHT           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    FULL            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    JOIN            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    INTERSECT       reduce using rule 272 (non_reserved -> NON_RESERVED .)
    UNION           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    EXCEPT          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    ORDER           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    LIMIT           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    FOR             reduce using rule 272 (non_reserved -> NON_RESERVED .)
    LOCK            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    $end            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    RPAREN          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    SET             reduce using rule 272 (non_reserved -> NON_RESERVED .)
    COMMA           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    LPAREN          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    WHERE           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    SLASH           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    PERCENT         reduce using rule 272 (non_reserved -> NON_RESERVED .)
    CONCAT          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    PLUS            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    MINUS           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    FROM            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    REGEXP          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    IS              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    EQ              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    NE              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    LT              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    LE              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    GT              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    GE              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    NOT             reduce using rule 272 (non_reserved -> NON_RESERVED .)
    BETWEEN         reduce using rule 272 (non_reserved -> NON_RESERVED .)
    IN              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    LIKE            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    OR              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    AND             reduce using rule 272 (non_reserved -> NON_RESERVED .)
    GROUP           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    HAVING          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    THEN            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    FORCE           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    VALUES          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    SELECT          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    ON              reduce using rule 272 (non_reserved -> NON_RESERVED .)
    USING           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    ASC             reduce using rule 272 (non_reserved -> NON_RESERVED .)
    DESC            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    NULLS           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    WHEN            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    END             reduce using rule 272 (non_reserved -> NON_RESERVED .)
    ELSE            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    INT             reduce using rule 272 (non_reserved -> NON_RESERVED .)
    FLOAT           reduce using rule 272 (non_reserved -> NON_RESERVED .)
    BIGINT          reduce using rule 272 (non_reserved -> NON_RESERVED .)
    TINYINT         reduce using rule 272 (non_reserved -> NON_RESERVED .)
    DATETIME        reduce using rule 272 (non_reserved -> NON_RESERVED .)
    VARCHAR         reduce using rule 272 (non_reserved -> NON_RESERVED .)
    CHAR            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    TIMESTAMP       reduce using rule 272 (non_reserved -> NON_RESERVED .)
    DEFAULT         reduce using rule 272 (non_reserved -> NON_RESERVED .)
    NULL            reduce using rule 272 (non_reserved -> NON_RESERVED .)
    UNSIGNED        reduce using rule 272 (non_reserved -> NON_RESERVED .)
    COLLATE         reduce using rule 272 (non_reserved -> NON_RESERVED .)
    COMPRESSION     reduce using rule 272 (non_reserved -> NON_RESERVED .)


state 47

    (7) create_table -> CREATE TABLE . identifier LPAREN column_list RPAREN create_table_end
    (8) create_table -> CREATE TABLE . identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 102
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 48

    (104) explicit_table -> TABLE qualified_name .
    (265) qualified_name -> qualified_name . PERIOD qualified_name

    INTERSECT       reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    UNION           reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    EXCEPT          reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    ORDER           reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    LIMIT           reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    FOR             reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    LOCK            reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    $end            reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    RPAREN          reduce using rule 104 (explicit_table -> TABLE qualified_name .)
    PERIOD          shift and go to state 96


state 49

    (100) nonjoin_query_primary -> LPAREN nonjoin_query_expression . RPAREN
    (95) nonjoin_query_expression -> nonjoin_query_expression . UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> nonjoin_query_expression . EXCEPT set_quantifier_opt nonjoin_query_term
    (74) query_expression_body -> nonjoin_query_expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 103
    UNION           shift and go to state 79
    EXCEPT          shift and go to state 80
    ORDER           reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)
    LIMIT           reduce using rule 74 (query_expression_body -> nonjoin_query_expression .)

  ! RPAREN          [ reduce using rule 74 (query_expression_body -> nonjoin_query_expression .) ]


state 50

    (67) subquery -> LPAREN query_expression . order_by_opt limit_opt RPAREN
    (76) order_by_opt -> . ORDER BY sort_items
    (77) order_by_opt -> . empty
    (276) empty -> .

    ORDER           shift and go to state 52
    LIMIT           reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    order_by_opt                   shift and go to state 104
    empty                          shift and go to state 53

state 51

    (66) cursor_specification -> query_expression order_by_opt . limit_opt for_update_opt
    (87) limit_opt -> . LIMIT INTEGER
    (88) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (89) limit_opt -> . LIMIT QM
    (90) limit_opt -> . LIMIT QM COMMA QM
    (91) limit_opt -> . LIMIT ALL
    (92) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (93) limit_opt -> . empty
    (276) empty -> .

    LIMIT           shift and go to state 106
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)

    limit_opt                      shift and go to state 105
    empty                          shift and go to state 107

state 52

    (76) order_by_opt -> ORDER . BY sort_items

    BY              shift and go to state 108


state 53

    (77) order_by_opt -> empty .

    LIMIT           reduce using rule 77 (order_by_opt -> empty .)
    FOR             reduce using rule 77 (order_by_opt -> empty .)
    LOCK            reduce using rule 77 (order_by_opt -> empty .)
    $end            reduce using rule 77 (order_by_opt -> empty .)
    RPAREN          reduce using rule 77 (order_by_opt -> empty .)


state 54

    (61) delete -> DELETE FROM . relations where_opt order_by_opt limit_opt
    (130) relations -> . relations COMMA table_reference
    (131) relations -> . table_reference
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    relations                      shift and go to state 109
    table_reference                shift and go to state 56
    table_primary                  shift and go to state 31
    joined_table                   shift and go to state 57
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 55

    (62) update -> UPDATE relations . SET update_set_list where_opt order_by_opt limit_opt
    (130) relations -> relations . COMMA table_reference

    SET             shift and go to state 110
    COMMA           shift and go to state 111


state 56

    (131) relations -> table_reference .
    (139) cross_join -> table_reference . CROSS JOIN table_primary
    (140) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (141) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (142) join_type -> . INNER
    (143) join_type -> . LEFT outer_opt
    (144) join_type -> . RIGHT outer_opt
    (145) join_type -> . FULL outer_opt
    (146) join_type -> . empty
    (276) empty -> .

    SET             reduce using rule 131 (relations -> table_reference .)
    COMMA           reduce using rule 131 (relations -> table_reference .)
    WHERE           reduce using rule 131 (relations -> table_reference .)
    ORDER           reduce using rule 131 (relations -> table_reference .)
    LIMIT           reduce using rule 131 (relations -> table_reference .)
    $end            reduce using rule 131 (relations -> table_reference .)
    FORCE           reduce using rule 131 (relations -> table_reference .)
    GROUP           reduce using rule 131 (relations -> table_reference .)
    HAVING          reduce using rule 131 (relations -> table_reference .)
    FOR             reduce using rule 131 (relations -> table_reference .)
    LOCK            reduce using rule 131 (relations -> table_reference .)
    INTERSECT       reduce using rule 131 (relations -> table_reference .)
    UNION           reduce using rule 131 (relations -> table_reference .)
    EXCEPT          reduce using rule 131 (relations -> table_reference .)
    RPAREN          reduce using rule 131 (relations -> table_reference .)
    CROSS           shift and go to state 62
    NATURAL         shift and go to state 64
    INNER           shift and go to state 65
    LEFT            shift and go to state 66
    RIGHT           shift and go to state 67
    FULL            shift and go to state 68
    JOIN            reduce using rule 276 (empty -> .)

    join_type                      shift and go to state 63
    empty                          shift and go to state 69

state 57

    (133) table_reference -> joined_table .

    CROSS           reduce using rule 133 (table_reference -> joined_table .)
    NATURAL         reduce using rule 133 (table_reference -> joined_table .)
    INNER           reduce using rule 133 (table_reference -> joined_table .)
    LEFT            reduce using rule 133 (table_reference -> joined_table .)
    RIGHT           reduce using rule 133 (table_reference -> joined_table .)
    FULL            reduce using rule 133 (table_reference -> joined_table .)
    JOIN            reduce using rule 133 (table_reference -> joined_table .)
    SET             reduce using rule 133 (table_reference -> joined_table .)
    COMMA           reduce using rule 133 (table_reference -> joined_table .)
    WHERE           reduce using rule 133 (table_reference -> joined_table .)
    ORDER           reduce using rule 133 (table_reference -> joined_table .)
    LIMIT           reduce using rule 133 (table_reference -> joined_table .)
    $end            reduce using rule 133 (table_reference -> joined_table .)
    FORCE           reduce using rule 133 (table_reference -> joined_table .)
    GROUP           reduce using rule 133 (table_reference -> joined_table .)
    HAVING          reduce using rule 133 (table_reference -> joined_table .)
    FOR             reduce using rule 133 (table_reference -> joined_table .)
    LOCK            reduce using rule 133 (table_reference -> joined_table .)
    INTERSECT       reduce using rule 133 (table_reference -> joined_table .)
    UNION           reduce using rule 133 (table_reference -> joined_table .)
    EXCEPT          reduce using rule 133 (table_reference -> joined_table .)
    RPAREN          reduce using rule 133 (table_reference -> joined_table .)
    VALUES          reduce using rule 133 (table_reference -> joined_table .)
    LPAREN          reduce using rule 133 (table_reference -> joined_table .)
    SELECT          reduce using rule 133 (table_reference -> joined_table .)
    ON              reduce using rule 133 (table_reference -> joined_table .)
    USING           reduce using rule 133 (table_reference -> joined_table .)


state 58

    (67) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (73) query_expression -> . query_expression_body
    (74) query_expression_body -> . nonjoin_query_expression
    (75) query_expression_body -> . joined_table
    (94) nonjoin_query_expression -> . nonjoin_query_term
    (95) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 11
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    query_expression               shift and go to state 50
    query_expression_body          shift and go to state 23
    nonjoin_query_expression       shift and go to state 24
    joined_table                   shift and go to state 25
    nonjoin_query_term             shift and go to state 26
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    nonjoin_query_primary          shift and go to state 30
    table_reference                shift and go to state 20
    table_primary                  shift and go to state 31
    simple_table                   shift and go to state 32
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 59

    (53) insert -> INSERT ignore . INTO table_reference VALUES LPAREN insert_value RPAREN
    (54) insert -> INSERT ignore . INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (55) insert -> INSERT ignore . INTO table_reference LPAREN index_column_list RPAREN query_spec
    (56) insert -> INSERT ignore . INTO table_reference query_spec

    INTO            shift and go to state 112


state 60

    (59) ignore -> IGNORE .

    INTO            reduce using rule 59 (ignore -> IGNORE .)


state 61

    (60) ignore -> empty .

    INTO            reduce using rule 60 (ignore -> empty .)


state 62

    (139) cross_join -> table_reference CROSS . JOIN table_primary

    JOIN            shift and go to state 113


state 63

    (140) qualified_join -> table_reference join_type . JOIN table_reference join_criteria

    JOIN            shift and go to state 114


state 64

    (141) natural_join -> table_reference NATURAL . join_type JOIN table_primary
    (142) join_type -> . INNER
    (143) join_type -> . LEFT outer_opt
    (144) join_type -> . RIGHT outer_opt
    (145) join_type -> . FULL outer_opt
    (146) join_type -> . empty
    (276) empty -> .

    INNER           shift and go to state 65
    LEFT            shift and go to state 66
    RIGHT           shift and go to state 67
    FULL            shift and go to state 68
    JOIN            reduce using rule 276 (empty -> .)

    join_type                      shift and go to state 115
    empty                          shift and go to state 69

state 65

    (142) join_type -> INNER .

    JOIN            reduce using rule 142 (join_type -> INNER .)


state 66

    (143) join_type -> LEFT . outer_opt
    (147) outer_opt -> . OUTER
    (148) outer_opt -> . empty
    (276) empty -> .

    OUTER           shift and go to state 117
    JOIN            reduce using rule 276 (empty -> .)

    outer_opt                      shift and go to state 116
    empty                          shift and go to state 118

state 67

    (144) join_type -> RIGHT . outer_opt
    (147) outer_opt -> . OUTER
    (148) outer_opt -> . empty
    (276) empty -> .

    OUTER           shift and go to state 117
    JOIN            reduce using rule 276 (empty -> .)

    outer_opt                      shift and go to state 119
    empty                          shift and go to state 118

state 68

    (145) join_type -> FULL . outer_opt
    (147) outer_opt -> . OUTER
    (148) outer_opt -> . empty
    (276) empty -> .

    OUTER           shift and go to state 117
    JOIN            reduce using rule 276 (empty -> .)

    outer_opt                      shift and go to state 120
    empty                          shift and go to state 118

state 69

    (146) join_type -> empty .

    JOIN            reduce using rule 146 (join_type -> empty .)


state 70

    (105) table_value_constructor -> VALUES values_list .
    (106) values_list -> values_list . COMMA expression

    INTERSECT       reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    UNION           reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    EXCEPT          reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    ORDER           reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    LIMIT           reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    FOR             reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    LOCK            reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    $end            reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    RPAREN          reduce using rule 105 (table_value_constructor -> VALUES values_list .)
    COMMA           shift and go to state 121


state 71

    (107) values_list -> expression .

    COMMA           reduce using rule 107 (values_list -> expression .)
    INTERSECT       reduce using rule 107 (values_list -> expression .)
    UNION           reduce using rule 107 (values_list -> expression .)
    EXCEPT          reduce using rule 107 (values_list -> expression .)
    ORDER           reduce using rule 107 (values_list -> expression .)
    LIMIT           reduce using rule 107 (values_list -> expression .)
    FOR             reduce using rule 107 (values_list -> expression .)
    LOCK            reduce using rule 107 (values_list -> expression .)
    $end            reduce using rule 107 (values_list -> expression .)
    RPAREN          reduce using rule 107 (values_list -> expression .)


state 72

    (159) expression -> search_condition .
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

    COMMA           reduce using rule 159 (expression -> search_condition .)
    INTERSECT       reduce using rule 159 (expression -> search_condition .)
    UNION           reduce using rule 159 (expression -> search_condition .)
    EXCEPT          reduce using rule 159 (expression -> search_condition .)
    ORDER           reduce using rule 159 (expression -> search_condition .)
    LIMIT           reduce using rule 159 (expression -> search_condition .)
    FOR             reduce using rule 159 (expression -> search_condition .)
    LOCK            reduce using rule 159 (expression -> search_condition .)
    $end            reduce using rule 159 (expression -> search_condition .)
    RPAREN          reduce using rule 159 (expression -> search_condition .)
    OR              shift and go to state 122
    AND             shift and go to state 123


state 73

    (160) search_condition -> boolean_term .

    OR              reduce using rule 160 (search_condition -> boolean_term .)
    AND             reduce using rule 160 (search_condition -> boolean_term .)
    COMMA           reduce using rule 160 (search_condition -> boolean_term .)
    INTERSECT       reduce using rule 160 (search_condition -> boolean_term .)
    UNION           reduce using rule 160 (search_condition -> boolean_term .)
    EXCEPT          reduce using rule 160 (search_condition -> boolean_term .)
    ORDER           reduce using rule 160 (search_condition -> boolean_term .)
    LIMIT           reduce using rule 160 (search_condition -> boolean_term .)
    FOR             reduce using rule 160 (search_condition -> boolean_term .)
    LOCK            reduce using rule 160 (search_condition -> boolean_term .)
    $end            reduce using rule 160 (search_condition -> boolean_term .)
    RPAREN          reduce using rule 160 (search_condition -> boolean_term .)
    GROUP           reduce using rule 160 (search_condition -> boolean_term .)
    HAVING          reduce using rule 160 (search_condition -> boolean_term .)
    THEN            reduce using rule 160 (search_condition -> boolean_term .)
    CROSS           reduce using rule 160 (search_condition -> boolean_term .)
    NATURAL         reduce using rule 160 (search_condition -> boolean_term .)
    INNER           reduce using rule 160 (search_condition -> boolean_term .)
    LEFT            reduce using rule 160 (search_condition -> boolean_term .)
    RIGHT           reduce using rule 160 (search_condition -> boolean_term .)
    FULL            reduce using rule 160 (search_condition -> boolean_term .)
    JOIN            reduce using rule 160 (search_condition -> boolean_term .)
    SET             reduce using rule 160 (search_condition -> boolean_term .)
    WHERE           reduce using rule 160 (search_condition -> boolean_term .)
    FORCE           reduce using rule 160 (search_condition -> boolean_term .)
    VALUES          reduce using rule 160 (search_condition -> boolean_term .)
    LPAREN          reduce using rule 160 (search_condition -> boolean_term .)
    SELECT          reduce using rule 160 (search_condition -> boolean_term .)
    ON              reduce using rule 160 (search_condition -> boolean_term .)
    USING           reduce using rule 160 (search_condition -> boolean_term .)


state 74

    (161) search_condition -> LPAREN . search_condition RPAREN
    (165) boolean_term -> LPAREN . boolean_term RPAREN
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 124
    boolean_term                   shift and go to state 125
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 75

    (164) boolean_term -> boolean_factor .

    OR              reduce using rule 164 (boolean_term -> boolean_factor .)
    AND             reduce using rule 164 (boolean_term -> boolean_factor .)
    COMMA           reduce using rule 164 (boolean_term -> boolean_factor .)
    INTERSECT       reduce using rule 164 (boolean_term -> boolean_factor .)
    UNION           reduce using rule 164 (boolean_term -> boolean_factor .)
    EXCEPT          reduce using rule 164 (boolean_term -> boolean_factor .)
    ORDER           reduce using rule 164 (boolean_term -> boolean_factor .)
    LIMIT           reduce using rule 164 (boolean_term -> boolean_factor .)
    FOR             reduce using rule 164 (boolean_term -> boolean_factor .)
    LOCK            reduce using rule 164 (boolean_term -> boolean_factor .)
    $end            reduce using rule 164 (boolean_term -> boolean_factor .)
    RPAREN          reduce using rule 164 (boolean_term -> boolean_factor .)
    GROUP           reduce using rule 164 (boolean_term -> boolean_factor .)
    HAVING          reduce using rule 164 (boolean_term -> boolean_factor .)
    THEN            reduce using rule 164 (boolean_term -> boolean_factor .)
    CROSS           reduce using rule 164 (boolean_term -> boolean_factor .)
    NATURAL         reduce using rule 164 (boolean_term -> boolean_factor .)
    INNER           reduce using rule 164 (boolean_term -> boolean_factor .)
    LEFT            reduce using rule 164 (boolean_term -> boolean_factor .)
    RIGHT           reduce using rule 164 (boolean_term -> boolean_factor .)
    FULL            reduce using rule 164 (boolean_term -> boolean_factor .)
    JOIN            reduce using rule 164 (boolean_term -> boolean_factor .)
    SET             reduce using rule 164 (boolean_term -> boolean_factor .)
    WHERE           reduce using rule 164 (boolean_term -> boolean_factor .)
    FORCE           reduce using rule 164 (boolean_term -> boolean_factor .)
    VALUES          reduce using rule 164 (boolean_term -> boolean_factor .)
    LPAREN          reduce using rule 164 (boolean_term -> boolean_factor .)
    SELECT          reduce using rule 164 (boolean_term -> boolean_factor .)
    ON              reduce using rule 164 (boolean_term -> boolean_factor .)
    USING           reduce using rule 164 (boolean_term -> boolean_factor .)


state 76

    (166) boolean_factor -> not_opt . boolean_test
    (167) boolean_test -> . boolean_primary
    (168) boolean_primary -> . predicate
    (169) boolean_primary -> . value_expression
    (170) predicate -> . comparison_predicate
    (171) predicate -> . between_predicate
    (172) predicate -> . in_predicate
    (173) predicate -> . like_predicate
    (174) predicate -> . regexp_predicate
    (175) predicate -> . null_predicate
    (176) predicate -> . exists_predicate
    (188) value_expression -> . numeric_value_expression
    (177) comparison_predicate -> . value_expression comparison_operator value_expression
    (178) between_predicate -> . value_expression not_opt BETWEEN value_expression AND value_expression
    (179) in_predicate -> . value_expression not_opt IN in_value
    (184) like_predicate -> . value_expression not_opt LIKE value_expression
    (185) regexp_predicate -> . value_expression REGEXP value_expression
    (186) null_predicate -> . value_expression IS not_opt NULL
    (187) exists_predicate -> . EXISTS subquery
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    EXISTS          shift and go to state 137
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    boolean_test                   shift and go to state 126
    boolean_primary                shift and go to state 127
    predicate                      shift and go to state 128
    value_expression               shift and go to state 129
    comparison_predicate           shift and go to state 130
    between_predicate              shift and go to state 131
    in_predicate                   shift and go to state 132
    like_predicate                 shift and go to state 133
    regexp_predicate               shift and go to state 134
    null_predicate                 shift and go to state 135
    exists_predicate               shift and go to state 136
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 77

    (254) not_opt -> NOT .

    EXISTS          reduce using rule 254 (not_opt -> NOT .)
    PLUS            reduce using rule 254 (not_opt -> NOT .)
    MINUS           reduce using rule 254 (not_opt -> NOT .)
    LPAREN          reduce using rule 254 (not_opt -> NOT .)
    NULL            reduce using rule 254 (not_opt -> NOT .)
    SCONST          reduce using rule 254 (not_opt -> NOT .)
    QUOTED_IDENTIFIER reduce using rule 254 (not_opt -> NOT .)
    QM              reduce using rule 254 (not_opt -> NOT .)
    CURRENT_DATE    reduce using rule 254 (not_opt -> NOT .)
    CURRENT_TIME    reduce using rule 254 (not_opt -> NOT .)
    CURRENT_TIMESTAMP reduce using rule 254 (not_opt -> NOT .)
    LOCALTIME       reduce using rule 254 (not_opt -> NOT .)
    LOCALTIMESTAMP  reduce using rule 254 (not_opt -> NOT .)
    CAST            reduce using rule 254 (not_opt -> NOT .)
    DECIMAL         reduce using rule 254 (not_opt -> NOT .)
    INTEGER         reduce using rule 254 (not_opt -> NOT .)
    TRUE            reduce using rule 254 (not_opt -> NOT .)
    FALSE           reduce using rule 254 (not_opt -> NOT .)
    IDENTIFIER      reduce using rule 254 (not_opt -> NOT .)
    DIGIT_IDENTIFIER reduce using rule 254 (not_opt -> NOT .)
    ASTERISK        reduce using rule 254 (not_opt -> NOT .)
    CASE            reduce using rule 254 (not_opt -> NOT .)
    BACKQUOTED_IDENTIFIER reduce using rule 254 (not_opt -> NOT .)
    NON_RESERVED    reduce using rule 254 (not_opt -> NOT .)
    BETWEEN         reduce using rule 254 (not_opt -> NOT .)
    IN              reduce using rule 254 (not_opt -> NOT .)
    LIKE            reduce using rule 254 (not_opt -> NOT .)


state 78

    (255) not_opt -> empty .

    EXISTS          reduce using rule 255 (not_opt -> empty .)
    PLUS            reduce using rule 255 (not_opt -> empty .)
    MINUS           reduce using rule 255 (not_opt -> empty .)
    LPAREN          reduce using rule 255 (not_opt -> empty .)
    NULL            reduce using rule 255 (not_opt -> empty .)
    SCONST          reduce using rule 255 (not_opt -> empty .)
    QUOTED_IDENTIFIER reduce using rule 255 (not_opt -> empty .)
    QM              reduce using rule 255 (not_opt -> empty .)
    CURRENT_DATE    reduce using rule 255 (not_opt -> empty .)
    CURRENT_TIME    reduce using rule 255 (not_opt -> empty .)
    CURRENT_TIMESTAMP reduce using rule 255 (not_opt -> empty .)
    LOCALTIME       reduce using rule 255 (not_opt -> empty .)
    LOCALTIMESTAMP  reduce using rule 255 (not_opt -> empty .)
    CAST            reduce using rule 255 (not_opt -> empty .)
    DECIMAL         reduce using rule 255 (not_opt -> empty .)
    INTEGER         reduce using rule 255 (not_opt -> empty .)
    TRUE            reduce using rule 255 (not_opt -> empty .)
    FALSE           reduce using rule 255 (not_opt -> empty .)
    IDENTIFIER      reduce using rule 255 (not_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 255 (not_opt -> empty .)
    ASTERISK        reduce using rule 255 (not_opt -> empty .)
    CASE            reduce using rule 255 (not_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 255 (not_opt -> empty .)
    NON_RESERVED    reduce using rule 255 (not_opt -> empty .)
    BETWEEN         reduce using rule 255 (not_opt -> empty .)
    IN              reduce using rule 255 (not_opt -> empty .)
    LIKE            reduce using rule 255 (not_opt -> empty .)


state 79

    (95) nonjoin_query_expression -> nonjoin_query_expression UNION . set_quantifier_opt nonjoin_query_term
    (118) set_quantifier_opt -> . ALL
    (119) set_quantifier_opt -> . empty
    (276) empty -> .

    ALL             shift and go to state 139
    LPAREN          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    TABLE           reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)

    set_quantifier_opt             shift and go to state 138
    empty                          shift and go to state 140

state 80

    (96) nonjoin_query_expression -> nonjoin_query_expression EXCEPT . set_quantifier_opt nonjoin_query_term
    (118) set_quantifier_opt -> . ALL
    (119) set_quantifier_opt -> . empty
    (276) empty -> .

    ALL             shift and go to state 139
    LPAREN          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    TABLE           reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)

    set_quantifier_opt             shift and go to state 141
    empty                          shift and go to state 140

state 81

    (98) nonjoin_query_term -> nonjoin_query_term INTERSECT . set_quantifier_opt nonjoin_query_primary
    (118) set_quantifier_opt -> . ALL
    (119) set_quantifier_opt -> . empty
    (276) empty -> .

    ALL             shift and go to state 139
    LPAREN          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    TABLE           reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)

    set_quantifier_opt             shift and go to state 142
    empty                          shift and go to state 140

state 82

    (108) query_spec -> SELECT select_items . table_expression_opt
    (121) select_items -> select_items . COMMA select_item
    (126) table_expression_opt -> . FROM relations force_index where_opt group_by_opt having_opt for_update_opt
    (127) table_expression_opt -> . empty
    (276) empty -> .

    COMMA           shift and go to state 144
    FROM            shift and go to state 145
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    table_expression_opt           shift and go to state 143
    empty                          shift and go to state 146

state 83

    (120) select_items -> select_item .

    COMMA           reduce using rule 120 (select_items -> select_item .)
    FROM            reduce using rule 120 (select_items -> select_item .)
    INTERSECT       reduce using rule 120 (select_items -> select_item .)
    UNION           reduce using rule 120 (select_items -> select_item .)
    EXCEPT          reduce using rule 120 (select_items -> select_item .)
    ORDER           reduce using rule 120 (select_items -> select_item .)
    LIMIT           reduce using rule 120 (select_items -> select_item .)
    FOR             reduce using rule 120 (select_items -> select_item .)
    LOCK            reduce using rule 120 (select_items -> select_item .)
    $end            reduce using rule 120 (select_items -> select_item .)
    RPAREN          reduce using rule 120 (select_items -> select_item .)


state 84

    (122) select_item -> derived_column .

    COMMA           reduce using rule 122 (select_item -> derived_column .)
    FROM            reduce using rule 122 (select_item -> derived_column .)
    INTERSECT       reduce using rule 122 (select_item -> derived_column .)
    UNION           reduce using rule 122 (select_item -> derived_column .)
    EXCEPT          reduce using rule 122 (select_item -> derived_column .)
    ORDER           reduce using rule 122 (select_item -> derived_column .)
    LIMIT           reduce using rule 122 (select_item -> derived_column .)
    FOR             reduce using rule 122 (select_item -> derived_column .)
    LOCK            reduce using rule 122 (select_item -> derived_column .)
    $end            reduce using rule 122 (select_item -> derived_column .)
    RPAREN          reduce using rule 122 (select_item -> derived_column .)


state 85

    (123) select_item -> DISTINCT . LPAREN derived_column RPAREN
    (124) select_item -> DISTINCT . derived_column
    (125) derived_column -> . value_expression alias_opt
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 147
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    derived_column                 shift and go to state 148
    value_expression               shift and go to state 86
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 86

    (125) derived_column -> value_expression . alias_opt
    (156) alias_opt -> . alias
    (157) alias_opt -> . empty
    (158) alias -> . as_opt identifier
    (276) empty -> .
    (252) as_opt -> . AS
    (253) as_opt -> . empty

    COMMA           reduce using rule 276 (empty -> .)
    FROM            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    AS              shift and go to state 100

    alias_opt                      shift and go to state 149
    alias                          shift and go to state 97
    empty                          shift and go to state 98
    as_opt                         shift and go to state 99

state 87

    (188) value_expression -> numeric_value_expression .
    (189) numeric_value_expression -> numeric_value_expression . PLUS term
    (190) numeric_value_expression -> numeric_value_expression . MINUS term

    AS              reduce using rule 188 (value_expression -> numeric_value_expression .)
    IDENTIFIER      reduce using rule 188 (value_expression -> numeric_value_expression .)
    DIGIT_IDENTIFIER reduce using rule 188 (value_expression -> numeric_value_expression .)
    ASTERISK        reduce using rule 188 (value_expression -> numeric_value_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 188 (value_expression -> numeric_value_expression .)
    NON_RESERVED    reduce using rule 188 (value_expression -> numeric_value_expression .)
    COMMA           reduce using rule 188 (value_expression -> numeric_value_expression .)
    FROM            reduce using rule 188 (value_expression -> numeric_value_expression .)
    INTERSECT       reduce using rule 188 (value_expression -> numeric_value_expression .)
    UNION           reduce using rule 188 (value_expression -> numeric_value_expression .)
    EXCEPT          reduce using rule 188 (value_expression -> numeric_value_expression .)
    ORDER           reduce using rule 188 (value_expression -> numeric_value_expression .)
    LIMIT           reduce using rule 188 (value_expression -> numeric_value_expression .)
    FOR             reduce using rule 188 (value_expression -> numeric_value_expression .)
    LOCK            reduce using rule 188 (value_expression -> numeric_value_expression .)
    $end            reduce using rule 188 (value_expression -> numeric_value_expression .)
    RPAREN          reduce using rule 188 (value_expression -> numeric_value_expression .)
    REGEXP          reduce using rule 188 (value_expression -> numeric_value_expression .)
    IS              reduce using rule 188 (value_expression -> numeric_value_expression .)
    EQ              reduce using rule 188 (value_expression -> numeric_value_expression .)
    NE              reduce using rule 188 (value_expression -> numeric_value_expression .)
    LT              reduce using rule 188 (value_expression -> numeric_value_expression .)
    LE              reduce using rule 188 (value_expression -> numeric_value_expression .)
    GT              reduce using rule 188 (value_expression -> numeric_value_expression .)
    GE              reduce using rule 188 (value_expression -> numeric_value_expression .)
    NOT             reduce using rule 188 (value_expression -> numeric_value_expression .)
    BETWEEN         reduce using rule 188 (value_expression -> numeric_value_expression .)
    IN              reduce using rule 188 (value_expression -> numeric_value_expression .)
    LIKE            reduce using rule 188 (value_expression -> numeric_value_expression .)
    OR              reduce using rule 188 (value_expression -> numeric_value_expression .)
    AND             reduce using rule 188 (value_expression -> numeric_value_expression .)
    GROUP           reduce using rule 188 (value_expression -> numeric_value_expression .)
    HAVING          reduce using rule 188 (value_expression -> numeric_value_expression .)
    THEN            reduce using rule 188 (value_expression -> numeric_value_expression .)
    CROSS           reduce using rule 188 (value_expression -> numeric_value_expression .)
    NATURAL         reduce using rule 188 (value_expression -> numeric_value_expression .)
    INNER           reduce using rule 188 (value_expression -> numeric_value_expression .)
    LEFT            reduce using rule 188 (value_expression -> numeric_value_expression .)
    RIGHT           reduce using rule 188 (value_expression -> numeric_value_expression .)
    FULL            reduce using rule 188 (value_expression -> numeric_value_expression .)
    JOIN            reduce using rule 188 (value_expression -> numeric_value_expression .)
    SET             reduce using rule 188 (value_expression -> numeric_value_expression .)
    WHERE           reduce using rule 188 (value_expression -> numeric_value_expression .)
    FORCE           reduce using rule 188 (value_expression -> numeric_value_expression .)
    VALUES          reduce using rule 188 (value_expression -> numeric_value_expression .)
    LPAREN          reduce using rule 188 (value_expression -> numeric_value_expression .)
    SELECT          reduce using rule 188 (value_expression -> numeric_value_expression .)
    ON              reduce using rule 188 (value_expression -> numeric_value_expression .)
    USING           reduce using rule 188 (value_expression -> numeric_value_expression .)
    ASC             reduce using rule 188 (value_expression -> numeric_value_expression .)
    DESC            reduce using rule 188 (value_expression -> numeric_value_expression .)
    NULLS           reduce using rule 188 (value_expression -> numeric_value_expression .)
    WHEN            reduce using rule 188 (value_expression -> numeric_value_expression .)
    END             reduce using rule 188 (value_expression -> numeric_value_expression .)
    ELSE            reduce using rule 188 (value_expression -> numeric_value_expression .)
    PLUS            shift and go to state 150
    MINUS           shift and go to state 151


state 88

    (260) sign -> PLUS .

    LPAREN          reduce using rule 260 (sign -> PLUS .)
    NULL            reduce using rule 260 (sign -> PLUS .)
    SCONST          reduce using rule 260 (sign -> PLUS .)
    QUOTED_IDENTIFIER reduce using rule 260 (sign -> PLUS .)
    QM              reduce using rule 260 (sign -> PLUS .)
    CURRENT_DATE    reduce using rule 260 (sign -> PLUS .)
    CURRENT_TIME    reduce using rule 260 (sign -> PLUS .)
    CURRENT_TIMESTAMP reduce using rule 260 (sign -> PLUS .)
    LOCALTIME       reduce using rule 260 (sign -> PLUS .)
    LOCALTIMESTAMP  reduce using rule 260 (sign -> PLUS .)
    CAST            reduce using rule 260 (sign -> PLUS .)
    DECIMAL         reduce using rule 260 (sign -> PLUS .)
    INTEGER         reduce using rule 260 (sign -> PLUS .)
    TRUE            reduce using rule 260 (sign -> PLUS .)
    FALSE           reduce using rule 260 (sign -> PLUS .)
    IDENTIFIER      reduce using rule 260 (sign -> PLUS .)
    DIGIT_IDENTIFIER reduce using rule 260 (sign -> PLUS .)
    ASTERISK        reduce using rule 260 (sign -> PLUS .)
    CASE            reduce using rule 260 (sign -> PLUS .)
    BACKQUOTED_IDENTIFIER reduce using rule 260 (sign -> PLUS .)
    NON_RESERVED    reduce using rule 260 (sign -> PLUS .)


state 89

    (191) numeric_value_expression -> term .
    (192) term -> term . ASTERISK factor
    (193) term -> term . SLASH factor
    (194) term -> term . PERCENT factor
    (195) term -> term . CONCAT factor

  ! shift/reduce conflict for ASTERISK resolved as shift
    PLUS            reduce using rule 191 (numeric_value_expression -> term .)
    MINUS           reduce using rule 191 (numeric_value_expression -> term .)
    AS              reduce using rule 191 (numeric_value_expression -> term .)
    IDENTIFIER      reduce using rule 191 (numeric_value_expression -> term .)
    DIGIT_IDENTIFIER reduce using rule 191 (numeric_value_expression -> term .)
    BACKQUOTED_IDENTIFIER reduce using rule 191 (numeric_value_expression -> term .)
    NON_RESERVED    reduce using rule 191 (numeric_value_expression -> term .)
    COMMA           reduce using rule 191 (numeric_value_expression -> term .)
    FROM            reduce using rule 191 (numeric_value_expression -> term .)
    INTERSECT       reduce using rule 191 (numeric_value_expression -> term .)
    UNION           reduce using rule 191 (numeric_value_expression -> term .)
    EXCEPT          reduce using rule 191 (numeric_value_expression -> term .)
    ORDER           reduce using rule 191 (numeric_value_expression -> term .)
    LIMIT           reduce using rule 191 (numeric_value_expression -> term .)
    FOR             reduce using rule 191 (numeric_value_expression -> term .)
    LOCK            reduce using rule 191 (numeric_value_expression -> term .)
    $end            reduce using rule 191 (numeric_value_expression -> term .)
    RPAREN          reduce using rule 191 (numeric_value_expression -> term .)
    REGEXP          reduce using rule 191 (numeric_value_expression -> term .)
    IS              reduce using rule 191 (numeric_value_expression -> term .)
    EQ              reduce using rule 191 (numeric_value_expression -> term .)
    NE              reduce using rule 191 (numeric_value_expression -> term .)
    LT              reduce using rule 191 (numeric_value_expression -> term .)
    LE              reduce using rule 191 (numeric_value_expression -> term .)
    GT              reduce using rule 191 (numeric_value_expression -> term .)
    GE              reduce using rule 191 (numeric_value_expression -> term .)
    NOT             reduce using rule 191 (numeric_value_expression -> term .)
    BETWEEN         reduce using rule 191 (numeric_value_expression -> term .)
    IN              reduce using rule 191 (numeric_value_expression -> term .)
    LIKE            reduce using rule 191 (numeric_value_expression -> term .)
    OR              reduce using rule 191 (numeric_value_expression -> term .)
    AND             reduce using rule 191 (numeric_value_expression -> term .)
    GROUP           reduce using rule 191 (numeric_value_expression -> term .)
    HAVING          reduce using rule 191 (numeric_value_expression -> term .)
    THEN            reduce using rule 191 (numeric_value_expression -> term .)
    CROSS           reduce using rule 191 (numeric_value_expression -> term .)
    NATURAL         reduce using rule 191 (numeric_value_expression -> term .)
    INNER           reduce using rule 191 (numeric_value_expression -> term .)
    LEFT            reduce using rule 191 (numeric_value_expression -> term .)
    RIGHT           reduce using rule 191 (numeric_value_expression -> term .)
    FULL            reduce using rule 191 (numeric_value_expression -> term .)
    JOIN            reduce using rule 191 (numeric_value_expression -> term .)
    SET             reduce using rule 191 (numeric_value_expression -> term .)
    WHERE           reduce using rule 191 (numeric_value_expression -> term .)
    FORCE           reduce using rule 191 (numeric_value_expression -> term .)
    VALUES          reduce using rule 191 (numeric_value_expression -> term .)
    LPAREN          reduce using rule 191 (numeric_value_expression -> term .)
    SELECT          reduce using rule 191 (numeric_value_expression -> term .)
    ON              reduce using rule 191 (numeric_value_expression -> term .)
    USING           reduce using rule 191 (numeric_value_expression -> term .)
    ASC             reduce using rule 191 (numeric_value_expression -> term .)
    DESC            reduce using rule 191 (numeric_value_expression -> term .)
    NULLS           reduce using rule 191 (numeric_value_expression -> term .)
    WHEN            reduce using rule 191 (numeric_value_expression -> term .)
    END             reduce using rule 191 (numeric_value_expression -> term .)
    ELSE            reduce using rule 191 (numeric_value_expression -> term .)
    ASTERISK        shift and go to state 152
    SLASH           shift and go to state 153
    PERCENT         shift and go to state 154
    CONCAT          shift and go to state 155

  ! ASTERISK        [ reduce using rule 191 (numeric_value_expression -> term .) ]


state 90

    (261) sign -> MINUS .

    LPAREN          reduce using rule 261 (sign -> MINUS .)
    NULL            reduce using rule 261 (sign -> MINUS .)
    SCONST          reduce using rule 261 (sign -> MINUS .)
    QUOTED_IDENTIFIER reduce using rule 261 (sign -> MINUS .)
    QM              reduce using rule 261 (sign -> MINUS .)
    CURRENT_DATE    reduce using rule 261 (sign -> MINUS .)
    CURRENT_TIME    reduce using rule 261 (sign -> MINUS .)
    CURRENT_TIMESTAMP reduce using rule 261 (sign -> MINUS .)
    LOCALTIME       reduce using rule 261 (sign -> MINUS .)
    LOCALTIMESTAMP  reduce using rule 261 (sign -> MINUS .)
    CAST            reduce using rule 261 (sign -> MINUS .)
    DECIMAL         reduce using rule 261 (sign -> MINUS .)
    INTEGER         reduce using rule 261 (sign -> MINUS .)
    TRUE            reduce using rule 261 (sign -> MINUS .)
    FALSE           reduce using rule 261 (sign -> MINUS .)
    IDENTIFIER      reduce using rule 261 (sign -> MINUS .)
    DIGIT_IDENTIFIER reduce using rule 261 (sign -> MINUS .)
    ASTERISK        reduce using rule 261 (sign -> MINUS .)
    CASE            reduce using rule 261 (sign -> MINUS .)
    BACKQUOTED_IDENTIFIER reduce using rule 261 (sign -> MINUS .)
    NON_RESERVED    reduce using rule 261 (sign -> MINUS .)


state 91

    (196) term -> factor .

    ASTERISK        reduce using rule 196 (term -> factor .)
    SLASH           reduce using rule 196 (term -> factor .)
    PERCENT         reduce using rule 196 (term -> factor .)
    CONCAT          reduce using rule 196 (term -> factor .)
    PLUS            reduce using rule 196 (term -> factor .)
    MINUS           reduce using rule 196 (term -> factor .)
    AS              reduce using rule 196 (term -> factor .)
    IDENTIFIER      reduce using rule 196 (term -> factor .)
    DIGIT_IDENTIFIER reduce using rule 196 (term -> factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 196 (term -> factor .)
    NON_RESERVED    reduce using rule 196 (term -> factor .)
    COMMA           reduce using rule 196 (term -> factor .)
    FROM            reduce using rule 196 (term -> factor .)
    INTERSECT       reduce using rule 196 (term -> factor .)
    UNION           reduce using rule 196 (term -> factor .)
    EXCEPT          reduce using rule 196 (term -> factor .)
    ORDER           reduce using rule 196 (term -> factor .)
    LIMIT           reduce using rule 196 (term -> factor .)
    FOR             reduce using rule 196 (term -> factor .)
    LOCK            reduce using rule 196 (term -> factor .)
    $end            reduce using rule 196 (term -> factor .)
    RPAREN          reduce using rule 196 (term -> factor .)
    REGEXP          reduce using rule 196 (term -> factor .)
    IS              reduce using rule 196 (term -> factor .)
    EQ              reduce using rule 196 (term -> factor .)
    NE              reduce using rule 196 (term -> factor .)
    LT              reduce using rule 196 (term -> factor .)
    LE              reduce using rule 196 (term -> factor .)
    GT              reduce using rule 196 (term -> factor .)
    GE              reduce using rule 196 (term -> factor .)
    NOT             reduce using rule 196 (term -> factor .)
    BETWEEN         reduce using rule 196 (term -> factor .)
    IN              reduce using rule 196 (term -> factor .)
    LIKE            reduce using rule 196 (term -> factor .)
    OR              reduce using rule 196 (term -> factor .)
    AND             reduce using rule 196 (term -> factor .)
    GROUP           reduce using rule 196 (term -> factor .)
    HAVING          reduce using rule 196 (term -> factor .)
    THEN            reduce using rule 196 (term -> factor .)
    CROSS           reduce using rule 196 (term -> factor .)
    NATURAL         reduce using rule 196 (term -> factor .)
    INNER           reduce using rule 196 (term -> factor .)
    LEFT            reduce using rule 196 (term -> factor .)
    RIGHT           reduce using rule 196 (term -> factor .)
    FULL            reduce using rule 196 (term -> factor .)
    JOIN            reduce using rule 196 (term -> factor .)
    SET             reduce using rule 196 (term -> factor .)
    WHERE           reduce using rule 196 (term -> factor .)
    FORCE           reduce using rule 196 (term -> factor .)
    VALUES          reduce using rule 196 (term -> factor .)
    LPAREN          reduce using rule 196 (term -> factor .)
    SELECT          reduce using rule 196 (term -> factor .)
    ON              reduce using rule 196 (term -> factor .)
    USING           reduce using rule 196 (term -> factor .)
    ASC             reduce using rule 196 (term -> factor .)
    DESC            reduce using rule 196 (term -> factor .)
    NULLS           reduce using rule 196 (term -> factor .)
    WHEN            reduce using rule 196 (term -> factor .)
    END             reduce using rule 196 (term -> factor .)
    ELSE            reduce using rule 196 (term -> factor .)


state 92

    (197) factor -> sign_opt . primary_expression
    (198) primary_expression -> . parenthetic_primary_expression
    (199) primary_expression -> . base_primary_expression
    (200) parenthetic_primary_expression -> . LPAREN value_expression RPAREN
    (201) parenthetic_primary_expression -> . LPAREN parenthetic_primary_expression RPAREN
    (202) base_primary_expression -> . value
    (203) base_primary_expression -> . qualified_name
    (204) base_primary_expression -> . subquery
    (205) base_primary_expression -> . function_call
    (206) base_primary_expression -> . date_time
    (207) base_primary_expression -> . case_specification
    (208) base_primary_expression -> . cast_specification
    (209) value -> . NULL
    (210) value -> . SCONST
    (211) value -> . number
    (212) value -> . boolean_value
    (213) value -> . QUOTED_IDENTIFIER
    (214) value -> . QM
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (215) function_call -> . qualified_name LPAREN call_args RPAREN
    (216) function_call -> . qualified_name LPAREN DISTINCT call_args RPAREN
    (241) date_time -> . CURRENT_DATE
    (242) date_time -> . CURRENT_TIME integer_param_opt
    (243) date_time -> . CURRENT_TIMESTAMP integer_param_opt
    (244) date_time -> . LOCALTIME integer_param_opt
    (245) date_time -> . LOCALTIMESTAMP integer_param_opt
    (221) case_specification -> . simple_case
    (222) case_specification -> . searched_case
    (225) cast_specification -> . CAST LPAREN value_expression AS data_type RPAREN
    (274) number -> . DECIMAL
    (275) number -> . INTEGER
    (256) boolean_value -> . TRUE
    (257) boolean_value -> . FALSE
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (223) simple_case -> . CASE value_expression when_clauses else_opt END
    (224) searched_case -> . CASE when_clauses else_opt END
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 159
    NULL            shift and go to state 167
    SCONST          shift and go to state 168
    QUOTED_IDENTIFIER shift and go to state 171
    QM              shift and go to state 172
    CURRENT_DATE    shift and go to state 173
    CURRENT_TIME    shift and go to state 174
    CURRENT_TIMESTAMP shift and go to state 175
    LOCALTIME       shift and go to state 176
    LOCALTIMESTAMP  shift and go to state 177
    CAST            shift and go to state 180
    DECIMAL         shift and go to state 181
    INTEGER         shift and go to state 182
    TRUE            shift and go to state 183
    FALSE           shift and go to state 184
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    CASE            shift and go to state 185
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    primary_expression             shift and go to state 156
    parenthetic_primary_expression shift and go to state 157
    base_primary_expression        shift and go to state 158
    value                          shift and go to state 160
    qualified_name                 shift and go to state 161
    subquery                       shift and go to state 162
    function_call                  shift and go to state 163
    date_time                      shift and go to state 164
    case_specification             shift and go to state 165
    cast_specification             shift and go to state 166
    number                         shift and go to state 169
    boolean_value                  shift and go to state 170
    identifier                     shift and go to state 10
    simple_case                    shift and go to state 178
    searched_case                  shift and go to state 179
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 93

    (258) sign_opt -> sign .

    LPAREN          reduce using rule 258 (sign_opt -> sign .)
    NULL            reduce using rule 258 (sign_opt -> sign .)
    SCONST          reduce using rule 258 (sign_opt -> sign .)
    QUOTED_IDENTIFIER reduce using rule 258 (sign_opt -> sign .)
    QM              reduce using rule 258 (sign_opt -> sign .)
    CURRENT_DATE    reduce using rule 258 (sign_opt -> sign .)
    CURRENT_TIME    reduce using rule 258 (sign_opt -> sign .)
    CURRENT_TIMESTAMP reduce using rule 258 (sign_opt -> sign .)
    LOCALTIME       reduce using rule 258 (sign_opt -> sign .)
    LOCALTIMESTAMP  reduce using rule 258 (sign_opt -> sign .)
    CAST            reduce using rule 258 (sign_opt -> sign .)
    DECIMAL         reduce using rule 258 (sign_opt -> sign .)
    INTEGER         reduce using rule 258 (sign_opt -> sign .)
    TRUE            reduce using rule 258 (sign_opt -> sign .)
    FALSE           reduce using rule 258 (sign_opt -> sign .)
    IDENTIFIER      reduce using rule 258 (sign_opt -> sign .)
    DIGIT_IDENTIFIER reduce using rule 258 (sign_opt -> sign .)
    ASTERISK        reduce using rule 258 (sign_opt -> sign .)
    CASE            reduce using rule 258 (sign_opt -> sign .)
    BACKQUOTED_IDENTIFIER reduce using rule 258 (sign_opt -> sign .)
    NON_RESERVED    reduce using rule 258 (sign_opt -> sign .)


state 94

    (259) sign_opt -> empty .

    LPAREN          reduce using rule 259 (sign_opt -> empty .)
    NULL            reduce using rule 259 (sign_opt -> empty .)
    SCONST          reduce using rule 259 (sign_opt -> empty .)
    QUOTED_IDENTIFIER reduce using rule 259 (sign_opt -> empty .)
    QM              reduce using rule 259 (sign_opt -> empty .)
    CURRENT_DATE    reduce using rule 259 (sign_opt -> empty .)
    CURRENT_TIME    reduce using rule 259 (sign_opt -> empty .)
    CURRENT_TIMESTAMP reduce using rule 259 (sign_opt -> empty .)
    LOCALTIME       reduce using rule 259 (sign_opt -> empty .)
    LOCALTIMESTAMP  reduce using rule 259 (sign_opt -> empty .)
    CAST            reduce using rule 259 (sign_opt -> empty .)
    DECIMAL         reduce using rule 259 (sign_opt -> empty .)
    INTEGER         reduce using rule 259 (sign_opt -> empty .)
    TRUE            reduce using rule 259 (sign_opt -> empty .)
    FALSE           reduce using rule 259 (sign_opt -> empty .)
    IDENTIFIER      reduce using rule 259 (sign_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 259 (sign_opt -> empty .)
    ASTERISK        reduce using rule 259 (sign_opt -> empty .)
    CASE            reduce using rule 259 (sign_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 259 (sign_opt -> empty .)
    NON_RESERVED    reduce using rule 259 (sign_opt -> empty .)


state 95

    (154) aliased_relation -> qualified_name alias_opt .

    CROSS           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    NATURAL         reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    INNER           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    LEFT            reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    RIGHT           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    FULL            reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    JOIN            reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    SET             reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    COMMA           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    WHERE           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    ORDER           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    LIMIT           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    $end            reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    FORCE           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    GROUP           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    HAVING          reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    FOR             reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    LOCK            reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    INTERSECT       reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    UNION           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    EXCEPT          reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    RPAREN          reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    VALUES          reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    LPAREN          reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    SELECT          reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    ON              reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)
    USING           reduce using rule 154 (aliased_relation -> qualified_name alias_opt .)


state 96

    (265) qualified_name -> qualified_name PERIOD . qualified_name
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    qualified_name                 shift and go to state 186
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 97

    (156) alias_opt -> alias .

    CROSS           reduce using rule 156 (alias_opt -> alias .)
    NATURAL         reduce using rule 156 (alias_opt -> alias .)
    INNER           reduce using rule 156 (alias_opt -> alias .)
    LEFT            reduce using rule 156 (alias_opt -> alias .)
    RIGHT           reduce using rule 156 (alias_opt -> alias .)
    FULL            reduce using rule 156 (alias_opt -> alias .)
    JOIN            reduce using rule 156 (alias_opt -> alias .)
    SET             reduce using rule 156 (alias_opt -> alias .)
    COMMA           reduce using rule 156 (alias_opt -> alias .)
    WHERE           reduce using rule 156 (alias_opt -> alias .)
    ORDER           reduce using rule 156 (alias_opt -> alias .)
    LIMIT           reduce using rule 156 (alias_opt -> alias .)
    $end            reduce using rule 156 (alias_opt -> alias .)
    FORCE           reduce using rule 156 (alias_opt -> alias .)
    GROUP           reduce using rule 156 (alias_opt -> alias .)
    HAVING          reduce using rule 156 (alias_opt -> alias .)
    FOR             reduce using rule 156 (alias_opt -> alias .)
    LOCK            reduce using rule 156 (alias_opt -> alias .)
    INTERSECT       reduce using rule 156 (alias_opt -> alias .)
    UNION           reduce using rule 156 (alias_opt -> alias .)
    EXCEPT          reduce using rule 156 (alias_opt -> alias .)
    RPAREN          reduce using rule 156 (alias_opt -> alias .)
    VALUES          reduce using rule 156 (alias_opt -> alias .)
    LPAREN          reduce using rule 156 (alias_opt -> alias .)
    SELECT          reduce using rule 156 (alias_opt -> alias .)
    ON              reduce using rule 156 (alias_opt -> alias .)
    USING           reduce using rule 156 (alias_opt -> alias .)
    FROM            reduce using rule 156 (alias_opt -> alias .)


state 98

    (157) alias_opt -> empty .
    (253) as_opt -> empty .

    CROSS           reduce using rule 157 (alias_opt -> empty .)
    NATURAL         reduce using rule 157 (alias_opt -> empty .)
    INNER           reduce using rule 157 (alias_opt -> empty .)
    LEFT            reduce using rule 157 (alias_opt -> empty .)
    RIGHT           reduce using rule 157 (alias_opt -> empty .)
    FULL            reduce using rule 157 (alias_opt -> empty .)
    JOIN            reduce using rule 157 (alias_opt -> empty .)
    SET             reduce using rule 157 (alias_opt -> empty .)
    COMMA           reduce using rule 157 (alias_opt -> empty .)
    WHERE           reduce using rule 157 (alias_opt -> empty .)
    ORDER           reduce using rule 157 (alias_opt -> empty .)
    LIMIT           reduce using rule 157 (alias_opt -> empty .)
    $end            reduce using rule 157 (alias_opt -> empty .)
    FORCE           reduce using rule 157 (alias_opt -> empty .)
    GROUP           reduce using rule 157 (alias_opt -> empty .)
    HAVING          reduce using rule 157 (alias_opt -> empty .)
    FOR             reduce using rule 157 (alias_opt -> empty .)
    LOCK            reduce using rule 157 (alias_opt -> empty .)
    INTERSECT       reduce using rule 157 (alias_opt -> empty .)
    UNION           reduce using rule 157 (alias_opt -> empty .)
    EXCEPT          reduce using rule 157 (alias_opt -> empty .)
    RPAREN          reduce using rule 157 (alias_opt -> empty .)
    VALUES          reduce using rule 157 (alias_opt -> empty .)
    LPAREN          reduce using rule 157 (alias_opt -> empty .)
    SELECT          reduce using rule 157 (alias_opt -> empty .)
    ON              reduce using rule 157 (alias_opt -> empty .)
    USING           reduce using rule 157 (alias_opt -> empty .)
    FROM            reduce using rule 157 (alias_opt -> empty .)
    IDENTIFIER      reduce using rule 253 (as_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 253 (as_opt -> empty .)
    ASTERISK        reduce using rule 253 (as_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 253 (as_opt -> empty .)
    NON_RESERVED    reduce using rule 253 (as_opt -> empty .)


state 99

    (158) alias -> as_opt . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 187
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 100

    (252) as_opt -> AS .

    IDENTIFIER      reduce using rule 252 (as_opt -> AS .)
    DIGIT_IDENTIFIER reduce using rule 252 (as_opt -> AS .)
    ASTERISK        reduce using rule 252 (as_opt -> AS .)
    BACKQUOTED_IDENTIFIER reduce using rule 252 (as_opt -> AS .)
    NON_RESERVED    reduce using rule 252 (as_opt -> AS .)


state 101

    (155) derived_table -> subquery alias_opt .

    CROSS           reduce using rule 155 (derived_table -> subquery alias_opt .)
    NATURAL         reduce using rule 155 (derived_table -> subquery alias_opt .)
    INNER           reduce using rule 155 (derived_table -> subquery alias_opt .)
    LEFT            reduce using rule 155 (derived_table -> subquery alias_opt .)
    RIGHT           reduce using rule 155 (derived_table -> subquery alias_opt .)
    FULL            reduce using rule 155 (derived_table -> subquery alias_opt .)
    JOIN            reduce using rule 155 (derived_table -> subquery alias_opt .)
    SET             reduce using rule 155 (derived_table -> subquery alias_opt .)
    COMMA           reduce using rule 155 (derived_table -> subquery alias_opt .)
    WHERE           reduce using rule 155 (derived_table -> subquery alias_opt .)
    ORDER           reduce using rule 155 (derived_table -> subquery alias_opt .)
    LIMIT           reduce using rule 155 (derived_table -> subquery alias_opt .)
    $end            reduce using rule 155 (derived_table -> subquery alias_opt .)
    FORCE           reduce using rule 155 (derived_table -> subquery alias_opt .)
    GROUP           reduce using rule 155 (derived_table -> subquery alias_opt .)
    HAVING          reduce using rule 155 (derived_table -> subquery alias_opt .)
    FOR             reduce using rule 155 (derived_table -> subquery alias_opt .)
    LOCK            reduce using rule 155 (derived_table -> subquery alias_opt .)
    INTERSECT       reduce using rule 155 (derived_table -> subquery alias_opt .)
    UNION           reduce using rule 155 (derived_table -> subquery alias_opt .)
    EXCEPT          reduce using rule 155 (derived_table -> subquery alias_opt .)
    RPAREN          reduce using rule 155 (derived_table -> subquery alias_opt .)
    VALUES          reduce using rule 155 (derived_table -> subquery alias_opt .)
    LPAREN          reduce using rule 155 (derived_table -> subquery alias_opt .)
    SELECT          reduce using rule 155 (derived_table -> subquery alias_opt .)
    ON              reduce using rule 155 (derived_table -> subquery alias_opt .)
    USING           reduce using rule 155 (derived_table -> subquery alias_opt .)


state 102

    (7) create_table -> CREATE TABLE identifier . LPAREN column_list RPAREN create_table_end
    (8) create_table -> CREATE TABLE identifier . LPAREN column_list COMMA primary_clause RPAREN create_table_end

    LPAREN          shift and go to state 188


state 103

    (100) nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .

    INTERSECT       reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    UNION           reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    EXCEPT          reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    ORDER           reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    LIMIT           reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    FOR             reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    LOCK            reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    $end            reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)
    RPAREN          reduce using rule 100 (nonjoin_query_primary -> LPAREN nonjoin_query_expression RPAREN .)


state 104

    (67) subquery -> LPAREN query_expression order_by_opt . limit_opt RPAREN
    (87) limit_opt -> . LIMIT INTEGER
    (88) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (89) limit_opt -> . LIMIT QM
    (90) limit_opt -> . LIMIT QM COMMA QM
    (91) limit_opt -> . LIMIT ALL
    (92) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (93) limit_opt -> . empty
    (276) empty -> .

    LIMIT           shift and go to state 106
    RPAREN          reduce using rule 276 (empty -> .)

    limit_opt                      shift and go to state 189
    empty                          shift and go to state 107

state 105

    (66) cursor_specification -> query_expression order_by_opt limit_opt . for_update_opt
    (68) for_update_opt -> . FOR UPDATE
    (69) for_update_opt -> . FOR UPDATE NOWAIT
    (70) for_update_opt -> . FOR UPDATE WAIT INTEGER
    (71) for_update_opt -> . LOCK IN SHARE MODE
    (72) for_update_opt -> . empty
    (276) empty -> .

    FOR             shift and go to state 191
    LOCK            shift and go to state 192
    $end            reduce using rule 276 (empty -> .)

    for_update_opt                 shift and go to state 190
    empty                          shift and go to state 193

state 106

    (87) limit_opt -> LIMIT . INTEGER
    (88) limit_opt -> LIMIT . INTEGER COMMA INTEGER
    (89) limit_opt -> LIMIT . QM
    (90) limit_opt -> LIMIT . QM COMMA QM
    (91) limit_opt -> LIMIT . ALL
    (92) limit_opt -> LIMIT . INTEGER OFFSET INTEGER

    INTEGER         shift and go to state 194
    QM              shift and go to state 195
    ALL             shift and go to state 196


state 107

    (93) limit_opt -> empty .

    FOR             reduce using rule 93 (limit_opt -> empty .)
    LOCK            reduce using rule 93 (limit_opt -> empty .)
    $end            reduce using rule 93 (limit_opt -> empty .)
    RPAREN          reduce using rule 93 (limit_opt -> empty .)


state 108

    (76) order_by_opt -> ORDER BY . sort_items
    (78) sort_items -> . sort_item
    (79) sort_items -> . sort_items COMMA sort_item
    (80) sort_item -> . value_expression order_opt null_ordering_opt
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    sort_items                     shift and go to state 197
    sort_item                      shift and go to state 198
    value_expression               shift and go to state 199
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 109

    (61) delete -> DELETE FROM relations . where_opt order_by_opt limit_opt
    (130) relations -> relations . COMMA table_reference
    (109) where_opt -> . WHERE search_condition
    (110) where_opt -> . WHERE LPAREN search_condition RPAREN
    (111) where_opt -> . empty
    (276) empty -> .

    COMMA           shift and go to state 111
    WHERE           shift and go to state 201
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)

    where_opt                      shift and go to state 200
    empty                          shift and go to state 202

state 110

    (62) update -> UPDATE relations SET . update_set_list where_opt order_by_opt limit_opt
    (63) update_set_list -> . update_set
    (64) update_set_list -> . update_set_list COMMA update_set
    (65) update_set -> . comparison_predicate
    (177) comparison_predicate -> . value_expression comparison_operator value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    update_set_list                shift and go to state 203
    update_set                     shift and go to state 204
    comparison_predicate           shift and go to state 205
    value_expression               shift and go to state 206
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 111

    (130) relations -> relations COMMA . table_reference
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    table_reference                shift and go to state 207
    table_primary                  shift and go to state 31
    joined_table                   shift and go to state 57
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 112

    (53) insert -> INSERT ignore INTO . table_reference VALUES LPAREN insert_value RPAREN
    (54) insert -> INSERT ignore INTO . table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (55) insert -> INSERT ignore INTO . table_reference LPAREN index_column_list RPAREN query_spec
    (56) insert -> INSERT ignore INTO . table_reference query_spec
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    table_reference                shift and go to state 208
    table_primary                  shift and go to state 31
    joined_table                   shift and go to state 57
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 113

    (139) cross_join -> table_reference CROSS JOIN . table_primary
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    table_primary                  shift and go to state 209
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 114

    (140) qualified_join -> table_reference join_type JOIN . table_reference join_criteria
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    table_reference                shift and go to state 210
    table_primary                  shift and go to state 31
    joined_table                   shift and go to state 57
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 115

    (141) natural_join -> table_reference NATURAL join_type . JOIN table_primary

    JOIN            shift and go to state 211


state 116

    (143) join_type -> LEFT outer_opt .

    JOIN            reduce using rule 143 (join_type -> LEFT outer_opt .)


state 117

    (147) outer_opt -> OUTER .

    JOIN            reduce using rule 147 (outer_opt -> OUTER .)


state 118

    (148) outer_opt -> empty .

    JOIN            reduce using rule 148 (outer_opt -> empty .)


state 119

    (144) join_type -> RIGHT outer_opt .

    JOIN            reduce using rule 144 (join_type -> RIGHT outer_opt .)


state 120

    (145) join_type -> FULL outer_opt .

    JOIN            reduce using rule 145 (join_type -> FULL outer_opt .)


state 121

    (106) values_list -> values_list COMMA . expression
    (159) expression -> . search_condition
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    expression                     shift and go to state 212
    search_condition               shift and go to state 72
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 122

    (162) search_condition -> search_condition OR . search_condition
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 213
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 123

    (163) search_condition -> search_condition AND . search_condition
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 214
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 124

    (161) search_condition -> LPAREN search_condition . RPAREN
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

    RPAREN          shift and go to state 215
    OR              shift and go to state 122
    AND             shift and go to state 123


state 125

    (165) boolean_term -> LPAREN boolean_term . RPAREN
    (160) search_condition -> boolean_term .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 216
    OR              reduce using rule 160 (search_condition -> boolean_term .)
    AND             reduce using rule 160 (search_condition -> boolean_term .)

  ! RPAREN          [ reduce using rule 160 (search_condition -> boolean_term .) ]


state 126

    (166) boolean_factor -> not_opt boolean_test .

    OR              reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    AND             reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    COMMA           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    INTERSECT       reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    UNION           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    EXCEPT          reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    ORDER           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    LIMIT           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    FOR             reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    LOCK            reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    $end            reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    RPAREN          reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    GROUP           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    HAVING          reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    THEN            reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    CROSS           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    NATURAL         reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    INNER           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    LEFT            reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    RIGHT           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    FULL            reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    JOIN            reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    SET             reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    WHERE           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    FORCE           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    VALUES          reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    LPAREN          reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    SELECT          reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    ON              reduce using rule 166 (boolean_factor -> not_opt boolean_test .)
    USING           reduce using rule 166 (boolean_factor -> not_opt boolean_test .)


state 127

    (167) boolean_test -> boolean_primary .

    OR              reduce using rule 167 (boolean_test -> boolean_primary .)
    AND             reduce using rule 167 (boolean_test -> boolean_primary .)
    COMMA           reduce using rule 167 (boolean_test -> boolean_primary .)
    INTERSECT       reduce using rule 167 (boolean_test -> boolean_primary .)
    UNION           reduce using rule 167 (boolean_test -> boolean_primary .)
    EXCEPT          reduce using rule 167 (boolean_test -> boolean_primary .)
    ORDER           reduce using rule 167 (boolean_test -> boolean_primary .)
    LIMIT           reduce using rule 167 (boolean_test -> boolean_primary .)
    FOR             reduce using rule 167 (boolean_test -> boolean_primary .)
    LOCK            reduce using rule 167 (boolean_test -> boolean_primary .)
    $end            reduce using rule 167 (boolean_test -> boolean_primary .)
    RPAREN          reduce using rule 167 (boolean_test -> boolean_primary .)
    GROUP           reduce using rule 167 (boolean_test -> boolean_primary .)
    HAVING          reduce using rule 167 (boolean_test -> boolean_primary .)
    THEN            reduce using rule 167 (boolean_test -> boolean_primary .)
    CROSS           reduce using rule 167 (boolean_test -> boolean_primary .)
    NATURAL         reduce using rule 167 (boolean_test -> boolean_primary .)
    INNER           reduce using rule 167 (boolean_test -> boolean_primary .)
    LEFT            reduce using rule 167 (boolean_test -> boolean_primary .)
    RIGHT           reduce using rule 167 (boolean_test -> boolean_primary .)
    FULL            reduce using rule 167 (boolean_test -> boolean_primary .)
    JOIN            reduce using rule 167 (boolean_test -> boolean_primary .)
    SET             reduce using rule 167 (boolean_test -> boolean_primary .)
    WHERE           reduce using rule 167 (boolean_test -> boolean_primary .)
    FORCE           reduce using rule 167 (boolean_test -> boolean_primary .)
    VALUES          reduce using rule 167 (boolean_test -> boolean_primary .)
    LPAREN          reduce using rule 167 (boolean_test -> boolean_primary .)
    SELECT          reduce using rule 167 (boolean_test -> boolean_primary .)
    ON              reduce using rule 167 (boolean_test -> boolean_primary .)
    USING           reduce using rule 167 (boolean_test -> boolean_primary .)


state 128

    (168) boolean_primary -> predicate .

    OR              reduce using rule 168 (boolean_primary -> predicate .)
    AND             reduce using rule 168 (boolean_primary -> predicate .)
    COMMA           reduce using rule 168 (boolean_primary -> predicate .)
    INTERSECT       reduce using rule 168 (boolean_primary -> predicate .)
    UNION           reduce using rule 168 (boolean_primary -> predicate .)
    EXCEPT          reduce using rule 168 (boolean_primary -> predicate .)
    ORDER           reduce using rule 168 (boolean_primary -> predicate .)
    LIMIT           reduce using rule 168 (boolean_primary -> predicate .)
    FOR             reduce using rule 168 (boolean_primary -> predicate .)
    LOCK            reduce using rule 168 (boolean_primary -> predicate .)
    $end            reduce using rule 168 (boolean_primary -> predicate .)
    RPAREN          reduce using rule 168 (boolean_primary -> predicate .)
    GROUP           reduce using rule 168 (boolean_primary -> predicate .)
    HAVING          reduce using rule 168 (boolean_primary -> predicate .)
    THEN            reduce using rule 168 (boolean_primary -> predicate .)
    CROSS           reduce using rule 168 (boolean_primary -> predicate .)
    NATURAL         reduce using rule 168 (boolean_primary -> predicate .)
    INNER           reduce using rule 168 (boolean_primary -> predicate .)
    LEFT            reduce using rule 168 (boolean_primary -> predicate .)
    RIGHT           reduce using rule 168 (boolean_primary -> predicate .)
    FULL            reduce using rule 168 (boolean_primary -> predicate .)
    JOIN            reduce using rule 168 (boolean_primary -> predicate .)
    SET             reduce using rule 168 (boolean_primary -> predicate .)
    WHERE           reduce using rule 168 (boolean_primary -> predicate .)
    FORCE           reduce using rule 168 (boolean_primary -> predicate .)
    VALUES          reduce using rule 168 (boolean_primary -> predicate .)
    LPAREN          reduce using rule 168 (boolean_primary -> predicate .)
    SELECT          reduce using rule 168 (boolean_primary -> predicate .)
    ON              reduce using rule 168 (boolean_primary -> predicate .)
    USING           reduce using rule 168 (boolean_primary -> predicate .)


state 129

    (169) boolean_primary -> value_expression .
    (177) comparison_predicate -> value_expression . comparison_operator value_expression
    (178) between_predicate -> value_expression . not_opt BETWEEN value_expression AND value_expression
    (179) in_predicate -> value_expression . not_opt IN in_value
    (184) like_predicate -> value_expression . not_opt LIKE value_expression
    (185) regexp_predicate -> value_expression . REGEXP value_expression
    (186) null_predicate -> value_expression . IS not_opt NULL
    (246) comparison_operator -> . EQ
    (247) comparison_operator -> . NE
    (248) comparison_operator -> . LT
    (249) comparison_operator -> . LE
    (250) comparison_operator -> . GT
    (251) comparison_operator -> . GE
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

    OR              reduce using rule 169 (boolean_primary -> value_expression .)
    AND             reduce using rule 169 (boolean_primary -> value_expression .)
    COMMA           reduce using rule 169 (boolean_primary -> value_expression .)
    INTERSECT       reduce using rule 169 (boolean_primary -> value_expression .)
    UNION           reduce using rule 169 (boolean_primary -> value_expression .)
    EXCEPT          reduce using rule 169 (boolean_primary -> value_expression .)
    ORDER           reduce using rule 169 (boolean_primary -> value_expression .)
    LIMIT           reduce using rule 169 (boolean_primary -> value_expression .)
    FOR             reduce using rule 169 (boolean_primary -> value_expression .)
    LOCK            reduce using rule 169 (boolean_primary -> value_expression .)
    $end            reduce using rule 169 (boolean_primary -> value_expression .)
    RPAREN          reduce using rule 169 (boolean_primary -> value_expression .)
    GROUP           reduce using rule 169 (boolean_primary -> value_expression .)
    HAVING          reduce using rule 169 (boolean_primary -> value_expression .)
    THEN            reduce using rule 169 (boolean_primary -> value_expression .)
    CROSS           reduce using rule 169 (boolean_primary -> value_expression .)
    NATURAL         reduce using rule 169 (boolean_primary -> value_expression .)
    INNER           reduce using rule 169 (boolean_primary -> value_expression .)
    LEFT            reduce using rule 169 (boolean_primary -> value_expression .)
    RIGHT           reduce using rule 169 (boolean_primary -> value_expression .)
    FULL            reduce using rule 169 (boolean_primary -> value_expression .)
    JOIN            reduce using rule 169 (boolean_primary -> value_expression .)
    SET             reduce using rule 169 (boolean_primary -> value_expression .)
    WHERE           reduce using rule 169 (boolean_primary -> value_expression .)
    FORCE           reduce using rule 169 (boolean_primary -> value_expression .)
    VALUES          reduce using rule 169 (boolean_primary -> value_expression .)
    LPAREN          reduce using rule 169 (boolean_primary -> value_expression .)
    SELECT          reduce using rule 169 (boolean_primary -> value_expression .)
    ON              reduce using rule 169 (boolean_primary -> value_expression .)
    USING           reduce using rule 169 (boolean_primary -> value_expression .)
    REGEXP          shift and go to state 219
    IS              shift and go to state 220
    EQ              shift and go to state 221
    NE              shift and go to state 222
    LT              shift and go to state 223
    LE              shift and go to state 224
    GT              shift and go to state 225
    GE              shift and go to state 226
    NOT             shift and go to state 77
    BETWEEN         reduce using rule 276 (empty -> .)
    IN              reduce using rule 276 (empty -> .)
    LIKE            reduce using rule 276 (empty -> .)

    comparison_operator            shift and go to state 217
    not_opt                        shift and go to state 218
    empty                          shift and go to state 78

state 130

    (170) predicate -> comparison_predicate .

    OR              reduce using rule 170 (predicate -> comparison_predicate .)
    AND             reduce using rule 170 (predicate -> comparison_predicate .)
    COMMA           reduce using rule 170 (predicate -> comparison_predicate .)
    INTERSECT       reduce using rule 170 (predicate -> comparison_predicate .)
    UNION           reduce using rule 170 (predicate -> comparison_predicate .)
    EXCEPT          reduce using rule 170 (predicate -> comparison_predicate .)
    ORDER           reduce using rule 170 (predicate -> comparison_predicate .)
    LIMIT           reduce using rule 170 (predicate -> comparison_predicate .)
    FOR             reduce using rule 170 (predicate -> comparison_predicate .)
    LOCK            reduce using rule 170 (predicate -> comparison_predicate .)
    $end            reduce using rule 170 (predicate -> comparison_predicate .)
    RPAREN          reduce using rule 170 (predicate -> comparison_predicate .)
    GROUP           reduce using rule 170 (predicate -> comparison_predicate .)
    HAVING          reduce using rule 170 (predicate -> comparison_predicate .)
    THEN            reduce using rule 170 (predicate -> comparison_predicate .)
    CROSS           reduce using rule 170 (predicate -> comparison_predicate .)
    NATURAL         reduce using rule 170 (predicate -> comparison_predicate .)
    INNER           reduce using rule 170 (predicate -> comparison_predicate .)
    LEFT            reduce using rule 170 (predicate -> comparison_predicate .)
    RIGHT           reduce using rule 170 (predicate -> comparison_predicate .)
    FULL            reduce using rule 170 (predicate -> comparison_predicate .)
    JOIN            reduce using rule 170 (predicate -> comparison_predicate .)
    SET             reduce using rule 170 (predicate -> comparison_predicate .)
    WHERE           reduce using rule 170 (predicate -> comparison_predicate .)
    FORCE           reduce using rule 170 (predicate -> comparison_predicate .)
    VALUES          reduce using rule 170 (predicate -> comparison_predicate .)
    LPAREN          reduce using rule 170 (predicate -> comparison_predicate .)
    SELECT          reduce using rule 170 (predicate -> comparison_predicate .)
    ON              reduce using rule 170 (predicate -> comparison_predicate .)
    USING           reduce using rule 170 (predicate -> comparison_predicate .)


state 131

    (171) predicate -> between_predicate .

    OR              reduce using rule 171 (predicate -> between_predicate .)
    AND             reduce using rule 171 (predicate -> between_predicate .)
    COMMA           reduce using rule 171 (predicate -> between_predicate .)
    INTERSECT       reduce using rule 171 (predicate -> between_predicate .)
    UNION           reduce using rule 171 (predicate -> between_predicate .)
    EXCEPT          reduce using rule 171 (predicate -> between_predicate .)
    ORDER           reduce using rule 171 (predicate -> between_predicate .)
    LIMIT           reduce using rule 171 (predicate -> between_predicate .)
    FOR             reduce using rule 171 (predicate -> between_predicate .)
    LOCK            reduce using rule 171 (predicate -> between_predicate .)
    $end            reduce using rule 171 (predicate -> between_predicate .)
    RPAREN          reduce using rule 171 (predicate -> between_predicate .)
    GROUP           reduce using rule 171 (predicate -> between_predicate .)
    HAVING          reduce using rule 171 (predicate -> between_predicate .)
    THEN            reduce using rule 171 (predicate -> between_predicate .)
    CROSS           reduce using rule 171 (predicate -> between_predicate .)
    NATURAL         reduce using rule 171 (predicate -> between_predicate .)
    INNER           reduce using rule 171 (predicate -> between_predicate .)
    LEFT            reduce using rule 171 (predicate -> between_predicate .)
    RIGHT           reduce using rule 171 (predicate -> between_predicate .)
    FULL            reduce using rule 171 (predicate -> between_predicate .)
    JOIN            reduce using rule 171 (predicate -> between_predicate .)
    SET             reduce using rule 171 (predicate -> between_predicate .)
    WHERE           reduce using rule 171 (predicate -> between_predicate .)
    FORCE           reduce using rule 171 (predicate -> between_predicate .)
    VALUES          reduce using rule 171 (predicate -> between_predicate .)
    LPAREN          reduce using rule 171 (predicate -> between_predicate .)
    SELECT          reduce using rule 171 (predicate -> between_predicate .)
    ON              reduce using rule 171 (predicate -> between_predicate .)
    USING           reduce using rule 171 (predicate -> between_predicate .)


state 132

    (172) predicate -> in_predicate .

    OR              reduce using rule 172 (predicate -> in_predicate .)
    AND             reduce using rule 172 (predicate -> in_predicate .)
    COMMA           reduce using rule 172 (predicate -> in_predicate .)
    INTERSECT       reduce using rule 172 (predicate -> in_predicate .)
    UNION           reduce using rule 172 (predicate -> in_predicate .)
    EXCEPT          reduce using rule 172 (predicate -> in_predicate .)
    ORDER           reduce using rule 172 (predicate -> in_predicate .)
    LIMIT           reduce using rule 172 (predicate -> in_predicate .)
    FOR             reduce using rule 172 (predicate -> in_predicate .)
    LOCK            reduce using rule 172 (predicate -> in_predicate .)
    $end            reduce using rule 172 (predicate -> in_predicate .)
    RPAREN          reduce using rule 172 (predicate -> in_predicate .)
    GROUP           reduce using rule 172 (predicate -> in_predicate .)
    HAVING          reduce using rule 172 (predicate -> in_predicate .)
    THEN            reduce using rule 172 (predicate -> in_predicate .)
    CROSS           reduce using rule 172 (predicate -> in_predicate .)
    NATURAL         reduce using rule 172 (predicate -> in_predicate .)
    INNER           reduce using rule 172 (predicate -> in_predicate .)
    LEFT            reduce using rule 172 (predicate -> in_predicate .)
    RIGHT           reduce using rule 172 (predicate -> in_predicate .)
    FULL            reduce using rule 172 (predicate -> in_predicate .)
    JOIN            reduce using rule 172 (predicate -> in_predicate .)
    SET             reduce using rule 172 (predicate -> in_predicate .)
    WHERE           reduce using rule 172 (predicate -> in_predicate .)
    FORCE           reduce using rule 172 (predicate -> in_predicate .)
    VALUES          reduce using rule 172 (predicate -> in_predicate .)
    LPAREN          reduce using rule 172 (predicate -> in_predicate .)
    SELECT          reduce using rule 172 (predicate -> in_predicate .)
    ON              reduce using rule 172 (predicate -> in_predicate .)
    USING           reduce using rule 172 (predicate -> in_predicate .)


state 133

    (173) predicate -> like_predicate .

    OR              reduce using rule 173 (predicate -> like_predicate .)
    AND             reduce using rule 173 (predicate -> like_predicate .)
    COMMA           reduce using rule 173 (predicate -> like_predicate .)
    INTERSECT       reduce using rule 173 (predicate -> like_predicate .)
    UNION           reduce using rule 173 (predicate -> like_predicate .)
    EXCEPT          reduce using rule 173 (predicate -> like_predicate .)
    ORDER           reduce using rule 173 (predicate -> like_predicate .)
    LIMIT           reduce using rule 173 (predicate -> like_predicate .)
    FOR             reduce using rule 173 (predicate -> like_predicate .)
    LOCK            reduce using rule 173 (predicate -> like_predicate .)
    $end            reduce using rule 173 (predicate -> like_predicate .)
    RPAREN          reduce using rule 173 (predicate -> like_predicate .)
    GROUP           reduce using rule 173 (predicate -> like_predicate .)
    HAVING          reduce using rule 173 (predicate -> like_predicate .)
    THEN            reduce using rule 173 (predicate -> like_predicate .)
    CROSS           reduce using rule 173 (predicate -> like_predicate .)
    NATURAL         reduce using rule 173 (predicate -> like_predicate .)
    INNER           reduce using rule 173 (predicate -> like_predicate .)
    LEFT            reduce using rule 173 (predicate -> like_predicate .)
    RIGHT           reduce using rule 173 (predicate -> like_predicate .)
    FULL            reduce using rule 173 (predicate -> like_predicate .)
    JOIN            reduce using rule 173 (predicate -> like_predicate .)
    SET             reduce using rule 173 (predicate -> like_predicate .)
    WHERE           reduce using rule 173 (predicate -> like_predicate .)
    FORCE           reduce using rule 173 (predicate -> like_predicate .)
    VALUES          reduce using rule 173 (predicate -> like_predicate .)
    LPAREN          reduce using rule 173 (predicate -> like_predicate .)
    SELECT          reduce using rule 173 (predicate -> like_predicate .)
    ON              reduce using rule 173 (predicate -> like_predicate .)
    USING           reduce using rule 173 (predicate -> like_predicate .)


state 134

    (174) predicate -> regexp_predicate .

    OR              reduce using rule 174 (predicate -> regexp_predicate .)
    AND             reduce using rule 174 (predicate -> regexp_predicate .)
    COMMA           reduce using rule 174 (predicate -> regexp_predicate .)
    INTERSECT       reduce using rule 174 (predicate -> regexp_predicate .)
    UNION           reduce using rule 174 (predicate -> regexp_predicate .)
    EXCEPT          reduce using rule 174 (predicate -> regexp_predicate .)
    ORDER           reduce using rule 174 (predicate -> regexp_predicate .)
    LIMIT           reduce using rule 174 (predicate -> regexp_predicate .)
    FOR             reduce using rule 174 (predicate -> regexp_predicate .)
    LOCK            reduce using rule 174 (predicate -> regexp_predicate .)
    $end            reduce using rule 174 (predicate -> regexp_predicate .)
    RPAREN          reduce using rule 174 (predicate -> regexp_predicate .)
    GROUP           reduce using rule 174 (predicate -> regexp_predicate .)
    HAVING          reduce using rule 174 (predicate -> regexp_predicate .)
    THEN            reduce using rule 174 (predicate -> regexp_predicate .)
    CROSS           reduce using rule 174 (predicate -> regexp_predicate .)
    NATURAL         reduce using rule 174 (predicate -> regexp_predicate .)
    INNER           reduce using rule 174 (predicate -> regexp_predicate .)
    LEFT            reduce using rule 174 (predicate -> regexp_predicate .)
    RIGHT           reduce using rule 174 (predicate -> regexp_predicate .)
    FULL            reduce using rule 174 (predicate -> regexp_predicate .)
    JOIN            reduce using rule 174 (predicate -> regexp_predicate .)
    SET             reduce using rule 174 (predicate -> regexp_predicate .)
    WHERE           reduce using rule 174 (predicate -> regexp_predicate .)
    FORCE           reduce using rule 174 (predicate -> regexp_predicate .)
    VALUES          reduce using rule 174 (predicate -> regexp_predicate .)
    LPAREN          reduce using rule 174 (predicate -> regexp_predicate .)
    SELECT          reduce using rule 174 (predicate -> regexp_predicate .)
    ON              reduce using rule 174 (predicate -> regexp_predicate .)
    USING           reduce using rule 174 (predicate -> regexp_predicate .)


state 135

    (175) predicate -> null_predicate .

    OR              reduce using rule 175 (predicate -> null_predicate .)
    AND             reduce using rule 175 (predicate -> null_predicate .)
    COMMA           reduce using rule 175 (predicate -> null_predicate .)
    INTERSECT       reduce using rule 175 (predicate -> null_predicate .)
    UNION           reduce using rule 175 (predicate -> null_predicate .)
    EXCEPT          reduce using rule 175 (predicate -> null_predicate .)
    ORDER           reduce using rule 175 (predicate -> null_predicate .)
    LIMIT           reduce using rule 175 (predicate -> null_predicate .)
    FOR             reduce using rule 175 (predicate -> null_predicate .)
    LOCK            reduce using rule 175 (predicate -> null_predicate .)
    $end            reduce using rule 175 (predicate -> null_predicate .)
    RPAREN          reduce using rule 175 (predicate -> null_predicate .)
    GROUP           reduce using rule 175 (predicate -> null_predicate .)
    HAVING          reduce using rule 175 (predicate -> null_predicate .)
    THEN            reduce using rule 175 (predicate -> null_predicate .)
    CROSS           reduce using rule 175 (predicate -> null_predicate .)
    NATURAL         reduce using rule 175 (predicate -> null_predicate .)
    INNER           reduce using rule 175 (predicate -> null_predicate .)
    LEFT            reduce using rule 175 (predicate -> null_predicate .)
    RIGHT           reduce using rule 175 (predicate -> null_predicate .)
    FULL            reduce using rule 175 (predicate -> null_predicate .)
    JOIN            reduce using rule 175 (predicate -> null_predicate .)
    SET             reduce using rule 175 (predicate -> null_predicate .)
    WHERE           reduce using rule 175 (predicate -> null_predicate .)
    FORCE           reduce using rule 175 (predicate -> null_predicate .)
    VALUES          reduce using rule 175 (predicate -> null_predicate .)
    LPAREN          reduce using rule 175 (predicate -> null_predicate .)
    SELECT          reduce using rule 175 (predicate -> null_predicate .)
    ON              reduce using rule 175 (predicate -> null_predicate .)
    USING           reduce using rule 175 (predicate -> null_predicate .)


state 136

    (176) predicate -> exists_predicate .

    OR              reduce using rule 176 (predicate -> exists_predicate .)
    AND             reduce using rule 176 (predicate -> exists_predicate .)
    COMMA           reduce using rule 176 (predicate -> exists_predicate .)
    INTERSECT       reduce using rule 176 (predicate -> exists_predicate .)
    UNION           reduce using rule 176 (predicate -> exists_predicate .)
    EXCEPT          reduce using rule 176 (predicate -> exists_predicate .)
    ORDER           reduce using rule 176 (predicate -> exists_predicate .)
    LIMIT           reduce using rule 176 (predicate -> exists_predicate .)
    FOR             reduce using rule 176 (predicate -> exists_predicate .)
    LOCK            reduce using rule 176 (predicate -> exists_predicate .)
    $end            reduce using rule 176 (predicate -> exists_predicate .)
    RPAREN          reduce using rule 176 (predicate -> exists_predicate .)
    GROUP           reduce using rule 176 (predicate -> exists_predicate .)
    HAVING          reduce using rule 176 (predicate -> exists_predicate .)
    THEN            reduce using rule 176 (predicate -> exists_predicate .)
    CROSS           reduce using rule 176 (predicate -> exists_predicate .)
    NATURAL         reduce using rule 176 (predicate -> exists_predicate .)
    INNER           reduce using rule 176 (predicate -> exists_predicate .)
    LEFT            reduce using rule 176 (predicate -> exists_predicate .)
    RIGHT           reduce using rule 176 (predicate -> exists_predicate .)
    FULL            reduce using rule 176 (predicate -> exists_predicate .)
    JOIN            reduce using rule 176 (predicate -> exists_predicate .)
    SET             reduce using rule 176 (predicate -> exists_predicate .)
    WHERE           reduce using rule 176 (predicate -> exists_predicate .)
    FORCE           reduce using rule 176 (predicate -> exists_predicate .)
    VALUES          reduce using rule 176 (predicate -> exists_predicate .)
    LPAREN          reduce using rule 176 (predicate -> exists_predicate .)
    SELECT          reduce using rule 176 (predicate -> exists_predicate .)
    ON              reduce using rule 176 (predicate -> exists_predicate .)
    USING           reduce using rule 176 (predicate -> exists_predicate .)


state 137

    (187) exists_predicate -> EXISTS . subquery
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN

    LPAREN          shift and go to state 58

    subquery                       shift and go to state 227

state 138

    (95) nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt . nonjoin_query_term
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 229
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21

    nonjoin_query_term             shift and go to state 228
    nonjoin_query_primary          shift and go to state 30
    simple_table                   shift and go to state 32
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34

state 139

    (118) set_quantifier_opt -> ALL .

    LPAREN          reduce using rule 118 (set_quantifier_opt -> ALL .)
    SELECT          reduce using rule 118 (set_quantifier_opt -> ALL .)
    TABLE           reduce using rule 118 (set_quantifier_opt -> ALL .)
    VALUES          reduce using rule 118 (set_quantifier_opt -> ALL .)


state 140

    (119) set_quantifier_opt -> empty .

    LPAREN          reduce using rule 119 (set_quantifier_opt -> empty .)
    SELECT          reduce using rule 119 (set_quantifier_opt -> empty .)
    TABLE           reduce using rule 119 (set_quantifier_opt -> empty .)
    VALUES          reduce using rule 119 (set_quantifier_opt -> empty .)


state 141

    (96) nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt . nonjoin_query_term
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 229
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21

    nonjoin_query_term             shift and go to state 230
    nonjoin_query_primary          shift and go to state 30
    simple_table                   shift and go to state 32
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34

state 142

    (98) nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt . nonjoin_query_primary
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 229
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21

    nonjoin_query_primary          shift and go to state 231
    simple_table                   shift and go to state 32
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34

state 143

    (108) query_spec -> SELECT select_items table_expression_opt .

    INTERSECT       reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    UNION           reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    EXCEPT          reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    ORDER           reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    LIMIT           reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    FOR             reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    LOCK            reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    $end            reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)
    RPAREN          reduce using rule 108 (query_spec -> SELECT select_items table_expression_opt .)


state 144

    (121) select_items -> select_items COMMA . select_item
    (122) select_item -> . derived_column
    (123) select_item -> . DISTINCT LPAREN derived_column RPAREN
    (124) select_item -> . DISTINCT derived_column
    (125) derived_column -> . value_expression alias_opt
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    DISTINCT        shift and go to state 85
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    select_item                    shift and go to state 232
    derived_column                 shift and go to state 84
    value_expression               shift and go to state 86
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 145

    (126) table_expression_opt -> FROM . relations force_index where_opt group_by_opt having_opt for_update_opt
    (130) relations -> . relations COMMA table_reference
    (131) relations -> . table_reference
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    relations                      shift and go to state 233
    table_reference                shift and go to state 56
    table_primary                  shift and go to state 31
    joined_table                   shift and go to state 57
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 146

    (127) table_expression_opt -> empty .

    INTERSECT       reduce using rule 127 (table_expression_opt -> empty .)
    UNION           reduce using rule 127 (table_expression_opt -> empty .)
    EXCEPT          reduce using rule 127 (table_expression_opt -> empty .)
    ORDER           reduce using rule 127 (table_expression_opt -> empty .)
    LIMIT           reduce using rule 127 (table_expression_opt -> empty .)
    FOR             reduce using rule 127 (table_expression_opt -> empty .)
    LOCK            reduce using rule 127 (table_expression_opt -> empty .)
    $end            reduce using rule 127 (table_expression_opt -> empty .)
    RPAREN          reduce using rule 127 (table_expression_opt -> empty .)


state 147

    (123) select_item -> DISTINCT LPAREN . derived_column RPAREN
    (125) derived_column -> . value_expression alias_opt
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    derived_column                 shift and go to state 234
    value_expression               shift and go to state 86
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 148

    (124) select_item -> DISTINCT derived_column .

    COMMA           reduce using rule 124 (select_item -> DISTINCT derived_column .)
    FROM            reduce using rule 124 (select_item -> DISTINCT derived_column .)
    INTERSECT       reduce using rule 124 (select_item -> DISTINCT derived_column .)
    UNION           reduce using rule 124 (select_item -> DISTINCT derived_column .)
    EXCEPT          reduce using rule 124 (select_item -> DISTINCT derived_column .)
    ORDER           reduce using rule 124 (select_item -> DISTINCT derived_column .)
    LIMIT           reduce using rule 124 (select_item -> DISTINCT derived_column .)
    FOR             reduce using rule 124 (select_item -> DISTINCT derived_column .)
    LOCK            reduce using rule 124 (select_item -> DISTINCT derived_column .)
    $end            reduce using rule 124 (select_item -> DISTINCT derived_column .)
    RPAREN          reduce using rule 124 (select_item -> DISTINCT derived_column .)


state 149

    (125) derived_column -> value_expression alias_opt .

    COMMA           reduce using rule 125 (derived_column -> value_expression alias_opt .)
    FROM            reduce using rule 125 (derived_column -> value_expression alias_opt .)
    INTERSECT       reduce using rule 125 (derived_column -> value_expression alias_opt .)
    UNION           reduce using rule 125 (derived_column -> value_expression alias_opt .)
    EXCEPT          reduce using rule 125 (derived_column -> value_expression alias_opt .)
    ORDER           reduce using rule 125 (derived_column -> value_expression alias_opt .)
    LIMIT           reduce using rule 125 (derived_column -> value_expression alias_opt .)
    FOR             reduce using rule 125 (derived_column -> value_expression alias_opt .)
    LOCK            reduce using rule 125 (derived_column -> value_expression alias_opt .)
    $end            reduce using rule 125 (derived_column -> value_expression alias_opt .)
    RPAREN          reduce using rule 125 (derived_column -> value_expression alias_opt .)


state 150

    (189) numeric_value_expression -> numeric_value_expression PLUS . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    term                           shift and go to state 235
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 151

    (190) numeric_value_expression -> numeric_value_expression MINUS . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    term                           shift and go to state 236
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 152

    (192) term -> term ASTERISK . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    factor                         shift and go to state 237
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 153

    (193) term -> term SLASH . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    factor                         shift and go to state 238
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 154

    (194) term -> term PERCENT . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    factor                         shift and go to state 239
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 155

    (195) term -> term CONCAT . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    factor                         shift and go to state 240
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 156

    (197) factor -> sign_opt primary_expression .

    ASTERISK        reduce using rule 197 (factor -> sign_opt primary_expression .)
    SLASH           reduce using rule 197 (factor -> sign_opt primary_expression .)
    PERCENT         reduce using rule 197 (factor -> sign_opt primary_expression .)
    CONCAT          reduce using rule 197 (factor -> sign_opt primary_expression .)
    PLUS            reduce using rule 197 (factor -> sign_opt primary_expression .)
    MINUS           reduce using rule 197 (factor -> sign_opt primary_expression .)
    AS              reduce using rule 197 (factor -> sign_opt primary_expression .)
    IDENTIFIER      reduce using rule 197 (factor -> sign_opt primary_expression .)
    DIGIT_IDENTIFIER reduce using rule 197 (factor -> sign_opt primary_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 197 (factor -> sign_opt primary_expression .)
    NON_RESERVED    reduce using rule 197 (factor -> sign_opt primary_expression .)
    COMMA           reduce using rule 197 (factor -> sign_opt primary_expression .)
    FROM            reduce using rule 197 (factor -> sign_opt primary_expression .)
    INTERSECT       reduce using rule 197 (factor -> sign_opt primary_expression .)
    UNION           reduce using rule 197 (factor -> sign_opt primary_expression .)
    EXCEPT          reduce using rule 197 (factor -> sign_opt primary_expression .)
    ORDER           reduce using rule 197 (factor -> sign_opt primary_expression .)
    LIMIT           reduce using rule 197 (factor -> sign_opt primary_expression .)
    FOR             reduce using rule 197 (factor -> sign_opt primary_expression .)
    LOCK            reduce using rule 197 (factor -> sign_opt primary_expression .)
    $end            reduce using rule 197 (factor -> sign_opt primary_expression .)
    RPAREN          reduce using rule 197 (factor -> sign_opt primary_expression .)
    REGEXP          reduce using rule 197 (factor -> sign_opt primary_expression .)
    IS              reduce using rule 197 (factor -> sign_opt primary_expression .)
    EQ              reduce using rule 197 (factor -> sign_opt primary_expression .)
    NE              reduce using rule 197 (factor -> sign_opt primary_expression .)
    LT              reduce using rule 197 (factor -> sign_opt primary_expression .)
    LE              reduce using rule 197 (factor -> sign_opt primary_expression .)
    GT              reduce using rule 197 (factor -> sign_opt primary_expression .)
    GE              reduce using rule 197 (factor -> sign_opt primary_expression .)
    NOT             reduce using rule 197 (factor -> sign_opt primary_expression .)
    BETWEEN         reduce using rule 197 (factor -> sign_opt primary_expression .)
    IN              reduce using rule 197 (factor -> sign_opt primary_expression .)
    LIKE            reduce using rule 197 (factor -> sign_opt primary_expression .)
    OR              reduce using rule 197 (factor -> sign_opt primary_expression .)
    AND             reduce using rule 197 (factor -> sign_opt primary_expression .)
    GROUP           reduce using rule 197 (factor -> sign_opt primary_expression .)
    HAVING          reduce using rule 197 (factor -> sign_opt primary_expression .)
    THEN            reduce using rule 197 (factor -> sign_opt primary_expression .)
    CROSS           reduce using rule 197 (factor -> sign_opt primary_expression .)
    NATURAL         reduce using rule 197 (factor -> sign_opt primary_expression .)
    INNER           reduce using rule 197 (factor -> sign_opt primary_expression .)
    LEFT            reduce using rule 197 (factor -> sign_opt primary_expression .)
    RIGHT           reduce using rule 197 (factor -> sign_opt primary_expression .)
    FULL            reduce using rule 197 (factor -> sign_opt primary_expression .)
    JOIN            reduce using rule 197 (factor -> sign_opt primary_expression .)
    SET             reduce using rule 197 (factor -> sign_opt primary_expression .)
    WHERE           reduce using rule 197 (factor -> sign_opt primary_expression .)
    FORCE           reduce using rule 197 (factor -> sign_opt primary_expression .)
    VALUES          reduce using rule 197 (factor -> sign_opt primary_expression .)
    LPAREN          reduce using rule 197 (factor -> sign_opt primary_expression .)
    SELECT          reduce using rule 197 (factor -> sign_opt primary_expression .)
    ON              reduce using rule 197 (factor -> sign_opt primary_expression .)
    USING           reduce using rule 197 (factor -> sign_opt primary_expression .)
    ASC             reduce using rule 197 (factor -> sign_opt primary_expression .)
    DESC            reduce using rule 197 (factor -> sign_opt primary_expression .)
    NULLS           reduce using rule 197 (factor -> sign_opt primary_expression .)
    WHEN            reduce using rule 197 (factor -> sign_opt primary_expression .)
    END             reduce using rule 197 (factor -> sign_opt primary_expression .)
    ELSE            reduce using rule 197 (factor -> sign_opt primary_expression .)


state 157

    (198) primary_expression -> parenthetic_primary_expression .

    ASTERISK        reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    SLASH           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    PERCENT         reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    CONCAT          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    PLUS            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    MINUS           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    AS              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    IDENTIFIER      reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    DIGIT_IDENTIFIER reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    NON_RESERVED    reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    COMMA           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    FROM            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    INTERSECT       reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    UNION           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    EXCEPT          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    ORDER           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    LIMIT           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    FOR             reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    LOCK            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    $end            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    RPAREN          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    REGEXP          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    IS              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    EQ              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    NE              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    LT              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    LE              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    GT              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    GE              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    NOT             reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    BETWEEN         reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    IN              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    LIKE            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    OR              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    AND             reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    GROUP           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    HAVING          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    THEN            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    CROSS           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    NATURAL         reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    INNER           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    LEFT            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    RIGHT           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    FULL            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    JOIN            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    SET             reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    WHERE           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    FORCE           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    VALUES          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    LPAREN          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    SELECT          reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    ON              reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    USING           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    ASC             reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    DESC            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    NULLS           reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    WHEN            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    END             reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)
    ELSE            reduce using rule 198 (primary_expression -> parenthetic_primary_expression .)


state 158

    (199) primary_expression -> base_primary_expression .

    ASTERISK        reduce using rule 199 (primary_expression -> base_primary_expression .)
    SLASH           reduce using rule 199 (primary_expression -> base_primary_expression .)
    PERCENT         reduce using rule 199 (primary_expression -> base_primary_expression .)
    CONCAT          reduce using rule 199 (primary_expression -> base_primary_expression .)
    PLUS            reduce using rule 199 (primary_expression -> base_primary_expression .)
    MINUS           reduce using rule 199 (primary_expression -> base_primary_expression .)
    AS              reduce using rule 199 (primary_expression -> base_primary_expression .)
    IDENTIFIER      reduce using rule 199 (primary_expression -> base_primary_expression .)
    DIGIT_IDENTIFIER reduce using rule 199 (primary_expression -> base_primary_expression .)
    BACKQUOTED_IDENTIFIER reduce using rule 199 (primary_expression -> base_primary_expression .)
    NON_RESERVED    reduce using rule 199 (primary_expression -> base_primary_expression .)
    COMMA           reduce using rule 199 (primary_expression -> base_primary_expression .)
    FROM            reduce using rule 199 (primary_expression -> base_primary_expression .)
    INTERSECT       reduce using rule 199 (primary_expression -> base_primary_expression .)
    UNION           reduce using rule 199 (primary_expression -> base_primary_expression .)
    EXCEPT          reduce using rule 199 (primary_expression -> base_primary_expression .)
    ORDER           reduce using rule 199 (primary_expression -> base_primary_expression .)
    LIMIT           reduce using rule 199 (primary_expression -> base_primary_expression .)
    FOR             reduce using rule 199 (primary_expression -> base_primary_expression .)
    LOCK            reduce using rule 199 (primary_expression -> base_primary_expression .)
    $end            reduce using rule 199 (primary_expression -> base_primary_expression .)
    RPAREN          reduce using rule 199 (primary_expression -> base_primary_expression .)
    REGEXP          reduce using rule 199 (primary_expression -> base_primary_expression .)
    IS              reduce using rule 199 (primary_expression -> base_primary_expression .)
    EQ              reduce using rule 199 (primary_expression -> base_primary_expression .)
    NE              reduce using rule 199 (primary_expression -> base_primary_expression .)
    LT              reduce using rule 199 (primary_expression -> base_primary_expression .)
    LE              reduce using rule 199 (primary_expression -> base_primary_expression .)
    GT              reduce using rule 199 (primary_expression -> base_primary_expression .)
    GE              reduce using rule 199 (primary_expression -> base_primary_expression .)
    NOT             reduce using rule 199 (primary_expression -> base_primary_expression .)
    BETWEEN         reduce using rule 199 (primary_expression -> base_primary_expression .)
    IN              reduce using rule 199 (primary_expression -> base_primary_expression .)
    LIKE            reduce using rule 199 (primary_expression -> base_primary_expression .)
    OR              reduce using rule 199 (primary_expression -> base_primary_expression .)
    AND             reduce using rule 199 (primary_expression -> base_primary_expression .)
    GROUP           reduce using rule 199 (primary_expression -> base_primary_expression .)
    HAVING          reduce using rule 199 (primary_expression -> base_primary_expression .)
    THEN            reduce using rule 199 (primary_expression -> base_primary_expression .)
    CROSS           reduce using rule 199 (primary_expression -> base_primary_expression .)
    NATURAL         reduce using rule 199 (primary_expression -> base_primary_expression .)
    INNER           reduce using rule 199 (primary_expression -> base_primary_expression .)
    LEFT            reduce using rule 199 (primary_expression -> base_primary_expression .)
    RIGHT           reduce using rule 199 (primary_expression -> base_primary_expression .)
    FULL            reduce using rule 199 (primary_expression -> base_primary_expression .)
    JOIN            reduce using rule 199 (primary_expression -> base_primary_expression .)
    SET             reduce using rule 199 (primary_expression -> base_primary_expression .)
    WHERE           reduce using rule 199 (primary_expression -> base_primary_expression .)
    FORCE           reduce using rule 199 (primary_expression -> base_primary_expression .)
    VALUES          reduce using rule 199 (primary_expression -> base_primary_expression .)
    LPAREN          reduce using rule 199 (primary_expression -> base_primary_expression .)
    SELECT          reduce using rule 199 (primary_expression -> base_primary_expression .)
    ON              reduce using rule 199 (primary_expression -> base_primary_expression .)
    USING           reduce using rule 199 (primary_expression -> base_primary_expression .)
    ASC             reduce using rule 199 (primary_expression -> base_primary_expression .)
    DESC            reduce using rule 199 (primary_expression -> base_primary_expression .)
    NULLS           reduce using rule 199 (primary_expression -> base_primary_expression .)
    WHEN            reduce using rule 199 (primary_expression -> base_primary_expression .)
    END             reduce using rule 199 (primary_expression -> base_primary_expression .)
    ELSE            reduce using rule 199 (primary_expression -> base_primary_expression .)


state 159

    (200) parenthetic_primary_expression -> LPAREN . value_expression RPAREN
    (201) parenthetic_primary_expression -> LPAREN . parenthetic_primary_expression RPAREN
    (67) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (188) value_expression -> . numeric_value_expression
    (200) parenthetic_primary_expression -> . LPAREN value_expression RPAREN
    (201) parenthetic_primary_expression -> . LPAREN parenthetic_primary_expression RPAREN
    (73) query_expression -> . query_expression_body
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (74) query_expression_body -> . nonjoin_query_expression
    (75) query_expression_body -> . joined_table
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (94) nonjoin_query_expression -> . nonjoin_query_term
    (95) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (197) factor -> . sign_opt primary_expression
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DIGIT_IDENTIFIER resolved as shift
  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for BACKQUOTED_IDENTIFIER resolved as shift
  ! shift/reduce conflict for NON_RESERVED resolved as shift
    LPAREN          shift and go to state 241
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 276 (empty -> .) ]
  ! DIGIT_IDENTIFIER [ reduce using rule 276 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 276 (empty -> .) ]
  ! BACKQUOTED_IDENTIFIER [ reduce using rule 276 (empty -> .) ]
  ! NON_RESERVED    [ reduce using rule 276 (empty -> .) ]

    value_expression               shift and go to state 242
    parenthetic_primary_expression shift and go to state 243
    query_expression               shift and go to state 50
    numeric_value_expression       shift and go to state 87
    query_expression_body          shift and go to state 23
    term                           shift and go to state 89
    nonjoin_query_expression       shift and go to state 24
    joined_table                   shift and go to state 25
    factor                         shift and go to state 91
    nonjoin_query_term             shift and go to state 26
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    sign_opt                       shift and go to state 92
    nonjoin_query_primary          shift and go to state 30
    table_reference                shift and go to state 20
    table_primary                  shift and go to state 31
    sign                           shift and go to state 93
    empty                          shift and go to state 94
    simple_table                   shift and go to state 32
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 160

    (202) base_primary_expression -> value .

    ASTERISK        reduce using rule 202 (base_primary_expression -> value .)
    SLASH           reduce using rule 202 (base_primary_expression -> value .)
    PERCENT         reduce using rule 202 (base_primary_expression -> value .)
    CONCAT          reduce using rule 202 (base_primary_expression -> value .)
    PLUS            reduce using rule 202 (base_primary_expression -> value .)
    MINUS           reduce using rule 202 (base_primary_expression -> value .)
    AS              reduce using rule 202 (base_primary_expression -> value .)
    IDENTIFIER      reduce using rule 202 (base_primary_expression -> value .)
    DIGIT_IDENTIFIER reduce using rule 202 (base_primary_expression -> value .)
    BACKQUOTED_IDENTIFIER reduce using rule 202 (base_primary_expression -> value .)
    NON_RESERVED    reduce using rule 202 (base_primary_expression -> value .)
    COMMA           reduce using rule 202 (base_primary_expression -> value .)
    FROM            reduce using rule 202 (base_primary_expression -> value .)
    INTERSECT       reduce using rule 202 (base_primary_expression -> value .)
    UNION           reduce using rule 202 (base_primary_expression -> value .)
    EXCEPT          reduce using rule 202 (base_primary_expression -> value .)
    ORDER           reduce using rule 202 (base_primary_expression -> value .)
    LIMIT           reduce using rule 202 (base_primary_expression -> value .)
    FOR             reduce using rule 202 (base_primary_expression -> value .)
    LOCK            reduce using rule 202 (base_primary_expression -> value .)
    $end            reduce using rule 202 (base_primary_expression -> value .)
    RPAREN          reduce using rule 202 (base_primary_expression -> value .)
    REGEXP          reduce using rule 202 (base_primary_expression -> value .)
    IS              reduce using rule 202 (base_primary_expression -> value .)
    EQ              reduce using rule 202 (base_primary_expression -> value .)
    NE              reduce using rule 202 (base_primary_expression -> value .)
    LT              reduce using rule 202 (base_primary_expression -> value .)
    LE              reduce using rule 202 (base_primary_expression -> value .)
    GT              reduce using rule 202 (base_primary_expression -> value .)
    GE              reduce using rule 202 (base_primary_expression -> value .)
    NOT             reduce using rule 202 (base_primary_expression -> value .)
    BETWEEN         reduce using rule 202 (base_primary_expression -> value .)
    IN              reduce using rule 202 (base_primary_expression -> value .)
    LIKE            reduce using rule 202 (base_primary_expression -> value .)
    OR              reduce using rule 202 (base_primary_expression -> value .)
    AND             reduce using rule 202 (base_primary_expression -> value .)
    GROUP           reduce using rule 202 (base_primary_expression -> value .)
    HAVING          reduce using rule 202 (base_primary_expression -> value .)
    THEN            reduce using rule 202 (base_primary_expression -> value .)
    CROSS           reduce using rule 202 (base_primary_expression -> value .)
    NATURAL         reduce using rule 202 (base_primary_expression -> value .)
    INNER           reduce using rule 202 (base_primary_expression -> value .)
    LEFT            reduce using rule 202 (base_primary_expression -> value .)
    RIGHT           reduce using rule 202 (base_primary_expression -> value .)
    FULL            reduce using rule 202 (base_primary_expression -> value .)
    JOIN            reduce using rule 202 (base_primary_expression -> value .)
    SET             reduce using rule 202 (base_primary_expression -> value .)
    WHERE           reduce using rule 202 (base_primary_expression -> value .)
    FORCE           reduce using rule 202 (base_primary_expression -> value .)
    VALUES          reduce using rule 202 (base_primary_expression -> value .)
    LPAREN          reduce using rule 202 (base_primary_expression -> value .)
    SELECT          reduce using rule 202 (base_primary_expression -> value .)
    ON              reduce using rule 202 (base_primary_expression -> value .)
    USING           reduce using rule 202 (base_primary_expression -> value .)
    ASC             reduce using rule 202 (base_primary_expression -> value .)
    DESC            reduce using rule 202 (base_primary_expression -> value .)
    NULLS           reduce using rule 202 (base_primary_expression -> value .)
    WHEN            reduce using rule 202 (base_primary_expression -> value .)
    END             reduce using rule 202 (base_primary_expression -> value .)
    ELSE            reduce using rule 202 (base_primary_expression -> value .)


state 161

    (203) base_primary_expression -> qualified_name .
    (265) qualified_name -> qualified_name . PERIOD qualified_name
    (215) function_call -> qualified_name . LPAREN call_args RPAREN
    (216) function_call -> qualified_name . LPAREN DISTINCT call_args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    ASTERISK        reduce using rule 203 (base_primary_expression -> qualified_name .)
    SLASH           reduce using rule 203 (base_primary_expression -> qualified_name .)
    PERCENT         reduce using rule 203 (base_primary_expression -> qualified_name .)
    CONCAT          reduce using rule 203 (base_primary_expression -> qualified_name .)
    PLUS            reduce using rule 203 (base_primary_expression -> qualified_name .)
    MINUS           reduce using rule 203 (base_primary_expression -> qualified_name .)
    AS              reduce using rule 203 (base_primary_expression -> qualified_name .)
    IDENTIFIER      reduce using rule 203 (base_primary_expression -> qualified_name .)
    DIGIT_IDENTIFIER reduce using rule 203 (base_primary_expression -> qualified_name .)
    BACKQUOTED_IDENTIFIER reduce using rule 203 (base_primary_expression -> qualified_name .)
    NON_RESERVED    reduce using rule 203 (base_primary_expression -> qualified_name .)
    COMMA           reduce using rule 203 (base_primary_expression -> qualified_name .)
    FROM            reduce using rule 203 (base_primary_expression -> qualified_name .)
    INTERSECT       reduce using rule 203 (base_primary_expression -> qualified_name .)
    UNION           reduce using rule 203 (base_primary_expression -> qualified_name .)
    EXCEPT          reduce using rule 203 (base_primary_expression -> qualified_name .)
    ORDER           reduce using rule 203 (base_primary_expression -> qualified_name .)
    LIMIT           reduce using rule 203 (base_primary_expression -> qualified_name .)
    FOR             reduce using rule 203 (base_primary_expression -> qualified_name .)
    LOCK            reduce using rule 203 (base_primary_expression -> qualified_name .)
    $end            reduce using rule 203 (base_primary_expression -> qualified_name .)
    RPAREN          reduce using rule 203 (base_primary_expression -> qualified_name .)
    REGEXP          reduce using rule 203 (base_primary_expression -> qualified_name .)
    IS              reduce using rule 203 (base_primary_expression -> qualified_name .)
    EQ              reduce using rule 203 (base_primary_expression -> qualified_name .)
    NE              reduce using rule 203 (base_primary_expression -> qualified_name .)
    LT              reduce using rule 203 (base_primary_expression -> qualified_name .)
    LE              reduce using rule 203 (base_primary_expression -> qualified_name .)
    GT              reduce using rule 203 (base_primary_expression -> qualified_name .)
    GE              reduce using rule 203 (base_primary_expression -> qualified_name .)
    NOT             reduce using rule 203 (base_primary_expression -> qualified_name .)
    BETWEEN         reduce using rule 203 (base_primary_expression -> qualified_name .)
    IN              reduce using rule 203 (base_primary_expression -> qualified_name .)
    LIKE            reduce using rule 203 (base_primary_expression -> qualified_name .)
    OR              reduce using rule 203 (base_primary_expression -> qualified_name .)
    AND             reduce using rule 203 (base_primary_expression -> qualified_name .)
    GROUP           reduce using rule 203 (base_primary_expression -> qualified_name .)
    HAVING          reduce using rule 203 (base_primary_expression -> qualified_name .)
    THEN            reduce using rule 203 (base_primary_expression -> qualified_name .)
    CROSS           reduce using rule 203 (base_primary_expression -> qualified_name .)
    NATURAL         reduce using rule 203 (base_primary_expression -> qualified_name .)
    INNER           reduce using rule 203 (base_primary_expression -> qualified_name .)
    LEFT            reduce using rule 203 (base_primary_expression -> qualified_name .)
    RIGHT           reduce using rule 203 (base_primary_expression -> qualified_name .)
    FULL            reduce using rule 203 (base_primary_expression -> qualified_name .)
    JOIN            reduce using rule 203 (base_primary_expression -> qualified_name .)
    SET             reduce using rule 203 (base_primary_expression -> qualified_name .)
    WHERE           reduce using rule 203 (base_primary_expression -> qualified_name .)
    FORCE           reduce using rule 203 (base_primary_expression -> qualified_name .)
    VALUES          reduce using rule 203 (base_primary_expression -> qualified_name .)
    SELECT          reduce using rule 203 (base_primary_expression -> qualified_name .)
    ON              reduce using rule 203 (base_primary_expression -> qualified_name .)
    USING           reduce using rule 203 (base_primary_expression -> qualified_name .)
    ASC             reduce using rule 203 (base_primary_expression -> qualified_name .)
    DESC            reduce using rule 203 (base_primary_expression -> qualified_name .)
    NULLS           reduce using rule 203 (base_primary_expression -> qualified_name .)
    WHEN            reduce using rule 203 (base_primary_expression -> qualified_name .)
    END             reduce using rule 203 (base_primary_expression -> qualified_name .)
    ELSE            reduce using rule 203 (base_primary_expression -> qualified_name .)
    PERIOD          shift and go to state 96
    LPAREN          shift and go to state 244

  ! LPAREN          [ reduce using rule 203 (base_primary_expression -> qualified_name .) ]


state 162

    (204) base_primary_expression -> subquery .

    ASTERISK        reduce using rule 204 (base_primary_expression -> subquery .)
    SLASH           reduce using rule 204 (base_primary_expression -> subquery .)
    PERCENT         reduce using rule 204 (base_primary_expression -> subquery .)
    CONCAT          reduce using rule 204 (base_primary_expression -> subquery .)
    PLUS            reduce using rule 204 (base_primary_expression -> subquery .)
    MINUS           reduce using rule 204 (base_primary_expression -> subquery .)
    AS              reduce using rule 204 (base_primary_expression -> subquery .)
    IDENTIFIER      reduce using rule 204 (base_primary_expression -> subquery .)
    DIGIT_IDENTIFIER reduce using rule 204 (base_primary_expression -> subquery .)
    BACKQUOTED_IDENTIFIER reduce using rule 204 (base_primary_expression -> subquery .)
    NON_RESERVED    reduce using rule 204 (base_primary_expression -> subquery .)
    COMMA           reduce using rule 204 (base_primary_expression -> subquery .)
    FROM            reduce using rule 204 (base_primary_expression -> subquery .)
    INTERSECT       reduce using rule 204 (base_primary_expression -> subquery .)
    UNION           reduce using rule 204 (base_primary_expression -> subquery .)
    EXCEPT          reduce using rule 204 (base_primary_expression -> subquery .)
    ORDER           reduce using rule 204 (base_primary_expression -> subquery .)
    LIMIT           reduce using rule 204 (base_primary_expression -> subquery .)
    FOR             reduce using rule 204 (base_primary_expression -> subquery .)
    LOCK            reduce using rule 204 (base_primary_expression -> subquery .)
    $end            reduce using rule 204 (base_primary_expression -> subquery .)
    RPAREN          reduce using rule 204 (base_primary_expression -> subquery .)
    REGEXP          reduce using rule 204 (base_primary_expression -> subquery .)
    IS              reduce using rule 204 (base_primary_expression -> subquery .)
    EQ              reduce using rule 204 (base_primary_expression -> subquery .)
    NE              reduce using rule 204 (base_primary_expression -> subquery .)
    LT              reduce using rule 204 (base_primary_expression -> subquery .)
    LE              reduce using rule 204 (base_primary_expression -> subquery .)
    GT              reduce using rule 204 (base_primary_expression -> subquery .)
    GE              reduce using rule 204 (base_primary_expression -> subquery .)
    NOT             reduce using rule 204 (base_primary_expression -> subquery .)
    BETWEEN         reduce using rule 204 (base_primary_expression -> subquery .)
    IN              reduce using rule 204 (base_primary_expression -> subquery .)
    LIKE            reduce using rule 204 (base_primary_expression -> subquery .)
    OR              reduce using rule 204 (base_primary_expression -> subquery .)
    AND             reduce using rule 204 (base_primary_expression -> subquery .)
    GROUP           reduce using rule 204 (base_primary_expression -> subquery .)
    HAVING          reduce using rule 204 (base_primary_expression -> subquery .)
    THEN            reduce using rule 204 (base_primary_expression -> subquery .)
    CROSS           reduce using rule 204 (base_primary_expression -> subquery .)
    NATURAL         reduce using rule 204 (base_primary_expression -> subquery .)
    INNER           reduce using rule 204 (base_primary_expression -> subquery .)
    LEFT            reduce using rule 204 (base_primary_expression -> subquery .)
    RIGHT           reduce using rule 204 (base_primary_expression -> subquery .)
    FULL            reduce using rule 204 (base_primary_expression -> subquery .)
    JOIN            reduce using rule 204 (base_primary_expression -> subquery .)
    SET             reduce using rule 204 (base_primary_expression -> subquery .)
    WHERE           reduce using rule 204 (base_primary_expression -> subquery .)
    FORCE           reduce using rule 204 (base_primary_expression -> subquery .)
    VALUES          reduce using rule 204 (base_primary_expression -> subquery .)
    LPAREN          reduce using rule 204 (base_primary_expression -> subquery .)
    SELECT          reduce using rule 204 (base_primary_expression -> subquery .)
    ON              reduce using rule 204 (base_primary_expression -> subquery .)
    USING           reduce using rule 204 (base_primary_expression -> subquery .)
    ASC             reduce using rule 204 (base_primary_expression -> subquery .)
    DESC            reduce using rule 204 (base_primary_expression -> subquery .)
    NULLS           reduce using rule 204 (base_primary_expression -> subquery .)
    WHEN            reduce using rule 204 (base_primary_expression -> subquery .)
    END             reduce using rule 204 (base_primary_expression -> subquery .)
    ELSE            reduce using rule 204 (base_primary_expression -> subquery .)


state 163

    (205) base_primary_expression -> function_call .

    ASTERISK        reduce using rule 205 (base_primary_expression -> function_call .)
    SLASH           reduce using rule 205 (base_primary_expression -> function_call .)
    PERCENT         reduce using rule 205 (base_primary_expression -> function_call .)
    CONCAT          reduce using rule 205 (base_primary_expression -> function_call .)
    PLUS            reduce using rule 205 (base_primary_expression -> function_call .)
    MINUS           reduce using rule 205 (base_primary_expression -> function_call .)
    AS              reduce using rule 205 (base_primary_expression -> function_call .)
    IDENTIFIER      reduce using rule 205 (base_primary_expression -> function_call .)
    DIGIT_IDENTIFIER reduce using rule 205 (base_primary_expression -> function_call .)
    BACKQUOTED_IDENTIFIER reduce using rule 205 (base_primary_expression -> function_call .)
    NON_RESERVED    reduce using rule 205 (base_primary_expression -> function_call .)
    COMMA           reduce using rule 205 (base_primary_expression -> function_call .)
    FROM            reduce using rule 205 (base_primary_expression -> function_call .)
    INTERSECT       reduce using rule 205 (base_primary_expression -> function_call .)
    UNION           reduce using rule 205 (base_primary_expression -> function_call .)
    EXCEPT          reduce using rule 205 (base_primary_expression -> function_call .)
    ORDER           reduce using rule 205 (base_primary_expression -> function_call .)
    LIMIT           reduce using rule 205 (base_primary_expression -> function_call .)
    FOR             reduce using rule 205 (base_primary_expression -> function_call .)
    LOCK            reduce using rule 205 (base_primary_expression -> function_call .)
    $end            reduce using rule 205 (base_primary_expression -> function_call .)
    RPAREN          reduce using rule 205 (base_primary_expression -> function_call .)
    REGEXP          reduce using rule 205 (base_primary_expression -> function_call .)
    IS              reduce using rule 205 (base_primary_expression -> function_call .)
    EQ              reduce using rule 205 (base_primary_expression -> function_call .)
    NE              reduce using rule 205 (base_primary_expression -> function_call .)
    LT              reduce using rule 205 (base_primary_expression -> function_call .)
    LE              reduce using rule 205 (base_primary_expression -> function_call .)
    GT              reduce using rule 205 (base_primary_expression -> function_call .)
    GE              reduce using rule 205 (base_primary_expression -> function_call .)
    NOT             reduce using rule 205 (base_primary_expression -> function_call .)
    BETWEEN         reduce using rule 205 (base_primary_expression -> function_call .)
    IN              reduce using rule 205 (base_primary_expression -> function_call .)
    LIKE            reduce using rule 205 (base_primary_expression -> function_call .)
    OR              reduce using rule 205 (base_primary_expression -> function_call .)
    AND             reduce using rule 205 (base_primary_expression -> function_call .)
    GROUP           reduce using rule 205 (base_primary_expression -> function_call .)
    HAVING          reduce using rule 205 (base_primary_expression -> function_call .)
    THEN            reduce using rule 205 (base_primary_expression -> function_call .)
    CROSS           reduce using rule 205 (base_primary_expression -> function_call .)
    NATURAL         reduce using rule 205 (base_primary_expression -> function_call .)
    INNER           reduce using rule 205 (base_primary_expression -> function_call .)
    LEFT            reduce using rule 205 (base_primary_expression -> function_call .)
    RIGHT           reduce using rule 205 (base_primary_expression -> function_call .)
    FULL            reduce using rule 205 (base_primary_expression -> function_call .)
    JOIN            reduce using rule 205 (base_primary_expression -> function_call .)
    SET             reduce using rule 205 (base_primary_expression -> function_call .)
    WHERE           reduce using rule 205 (base_primary_expression -> function_call .)
    FORCE           reduce using rule 205 (base_primary_expression -> function_call .)
    VALUES          reduce using rule 205 (base_primary_expression -> function_call .)
    LPAREN          reduce using rule 205 (base_primary_expression -> function_call .)
    SELECT          reduce using rule 205 (base_primary_expression -> function_call .)
    ON              reduce using rule 205 (base_primary_expression -> function_call .)
    USING           reduce using rule 205 (base_primary_expression -> function_call .)
    ASC             reduce using rule 205 (base_primary_expression -> function_call .)
    DESC            reduce using rule 205 (base_primary_expression -> function_call .)
    NULLS           reduce using rule 205 (base_primary_expression -> function_call .)
    WHEN            reduce using rule 205 (base_primary_expression -> function_call .)
    END             reduce using rule 205 (base_primary_expression -> function_call .)
    ELSE            reduce using rule 205 (base_primary_expression -> function_call .)


state 164

    (206) base_primary_expression -> date_time .

    ASTERISK        reduce using rule 206 (base_primary_expression -> date_time .)
    SLASH           reduce using rule 206 (base_primary_expression -> date_time .)
    PERCENT         reduce using rule 206 (base_primary_expression -> date_time .)
    CONCAT          reduce using rule 206 (base_primary_expression -> date_time .)
    PLUS            reduce using rule 206 (base_primary_expression -> date_time .)
    MINUS           reduce using rule 206 (base_primary_expression -> date_time .)
    AS              reduce using rule 206 (base_primary_expression -> date_time .)
    IDENTIFIER      reduce using rule 206 (base_primary_expression -> date_time .)
    DIGIT_IDENTIFIER reduce using rule 206 (base_primary_expression -> date_time .)
    BACKQUOTED_IDENTIFIER reduce using rule 206 (base_primary_expression -> date_time .)
    NON_RESERVED    reduce using rule 206 (base_primary_expression -> date_time .)
    COMMA           reduce using rule 206 (base_primary_expression -> date_time .)
    FROM            reduce using rule 206 (base_primary_expression -> date_time .)
    INTERSECT       reduce using rule 206 (base_primary_expression -> date_time .)
    UNION           reduce using rule 206 (base_primary_expression -> date_time .)
    EXCEPT          reduce using rule 206 (base_primary_expression -> date_time .)
    ORDER           reduce using rule 206 (base_primary_expression -> date_time .)
    LIMIT           reduce using rule 206 (base_primary_expression -> date_time .)
    FOR             reduce using rule 206 (base_primary_expression -> date_time .)
    LOCK            reduce using rule 206 (base_primary_expression -> date_time .)
    $end            reduce using rule 206 (base_primary_expression -> date_time .)
    RPAREN          reduce using rule 206 (base_primary_expression -> date_time .)
    REGEXP          reduce using rule 206 (base_primary_expression -> date_time .)
    IS              reduce using rule 206 (base_primary_expression -> date_time .)
    EQ              reduce using rule 206 (base_primary_expression -> date_time .)
    NE              reduce using rule 206 (base_primary_expression -> date_time .)
    LT              reduce using rule 206 (base_primary_expression -> date_time .)
    LE              reduce using rule 206 (base_primary_expression -> date_time .)
    GT              reduce using rule 206 (base_primary_expression -> date_time .)
    GE              reduce using rule 206 (base_primary_expression -> date_time .)
    NOT             reduce using rule 206 (base_primary_expression -> date_time .)
    BETWEEN         reduce using rule 206 (base_primary_expression -> date_time .)
    IN              reduce using rule 206 (base_primary_expression -> date_time .)
    LIKE            reduce using rule 206 (base_primary_expression -> date_time .)
    OR              reduce using rule 206 (base_primary_expression -> date_time .)
    AND             reduce using rule 206 (base_primary_expression -> date_time .)
    GROUP           reduce using rule 206 (base_primary_expression -> date_time .)
    HAVING          reduce using rule 206 (base_primary_expression -> date_time .)
    THEN            reduce using rule 206 (base_primary_expression -> date_time .)
    CROSS           reduce using rule 206 (base_primary_expression -> date_time .)
    NATURAL         reduce using rule 206 (base_primary_expression -> date_time .)
    INNER           reduce using rule 206 (base_primary_expression -> date_time .)
    LEFT            reduce using rule 206 (base_primary_expression -> date_time .)
    RIGHT           reduce using rule 206 (base_primary_expression -> date_time .)
    FULL            reduce using rule 206 (base_primary_expression -> date_time .)
    JOIN            reduce using rule 206 (base_primary_expression -> date_time .)
    SET             reduce using rule 206 (base_primary_expression -> date_time .)
    WHERE           reduce using rule 206 (base_primary_expression -> date_time .)
    FORCE           reduce using rule 206 (base_primary_expression -> date_time .)
    VALUES          reduce using rule 206 (base_primary_expression -> date_time .)
    LPAREN          reduce using rule 206 (base_primary_expression -> date_time .)
    SELECT          reduce using rule 206 (base_primary_expression -> date_time .)
    ON              reduce using rule 206 (base_primary_expression -> date_time .)
    USING           reduce using rule 206 (base_primary_expression -> date_time .)
    ASC             reduce using rule 206 (base_primary_expression -> date_time .)
    DESC            reduce using rule 206 (base_primary_expression -> date_time .)
    NULLS           reduce using rule 206 (base_primary_expression -> date_time .)
    WHEN            reduce using rule 206 (base_primary_expression -> date_time .)
    END             reduce using rule 206 (base_primary_expression -> date_time .)
    ELSE            reduce using rule 206 (base_primary_expression -> date_time .)


state 165

    (207) base_primary_expression -> case_specification .

    ASTERISK        reduce using rule 207 (base_primary_expression -> case_specification .)
    SLASH           reduce using rule 207 (base_primary_expression -> case_specification .)
    PERCENT         reduce using rule 207 (base_primary_expression -> case_specification .)
    CONCAT          reduce using rule 207 (base_primary_expression -> case_specification .)
    PLUS            reduce using rule 207 (base_primary_expression -> case_specification .)
    MINUS           reduce using rule 207 (base_primary_expression -> case_specification .)
    AS              reduce using rule 207 (base_primary_expression -> case_specification .)
    IDENTIFIER      reduce using rule 207 (base_primary_expression -> case_specification .)
    DIGIT_IDENTIFIER reduce using rule 207 (base_primary_expression -> case_specification .)
    BACKQUOTED_IDENTIFIER reduce using rule 207 (base_primary_expression -> case_specification .)
    NON_RESERVED    reduce using rule 207 (base_primary_expression -> case_specification .)
    COMMA           reduce using rule 207 (base_primary_expression -> case_specification .)
    FROM            reduce using rule 207 (base_primary_expression -> case_specification .)
    INTERSECT       reduce using rule 207 (base_primary_expression -> case_specification .)
    UNION           reduce using rule 207 (base_primary_expression -> case_specification .)
    EXCEPT          reduce using rule 207 (base_primary_expression -> case_specification .)
    ORDER           reduce using rule 207 (base_primary_expression -> case_specification .)
    LIMIT           reduce using rule 207 (base_primary_expression -> case_specification .)
    FOR             reduce using rule 207 (base_primary_expression -> case_specification .)
    LOCK            reduce using rule 207 (base_primary_expression -> case_specification .)
    $end            reduce using rule 207 (base_primary_expression -> case_specification .)
    RPAREN          reduce using rule 207 (base_primary_expression -> case_specification .)
    REGEXP          reduce using rule 207 (base_primary_expression -> case_specification .)
    IS              reduce using rule 207 (base_primary_expression -> case_specification .)
    EQ              reduce using rule 207 (base_primary_expression -> case_specification .)
    NE              reduce using rule 207 (base_primary_expression -> case_specification .)
    LT              reduce using rule 207 (base_primary_expression -> case_specification .)
    LE              reduce using rule 207 (base_primary_expression -> case_specification .)
    GT              reduce using rule 207 (base_primary_expression -> case_specification .)
    GE              reduce using rule 207 (base_primary_expression -> case_specification .)
    NOT             reduce using rule 207 (base_primary_expression -> case_specification .)
    BETWEEN         reduce using rule 207 (base_primary_expression -> case_specification .)
    IN              reduce using rule 207 (base_primary_expression -> case_specification .)
    LIKE            reduce using rule 207 (base_primary_expression -> case_specification .)
    OR              reduce using rule 207 (base_primary_expression -> case_specification .)
    AND             reduce using rule 207 (base_primary_expression -> case_specification .)
    GROUP           reduce using rule 207 (base_primary_expression -> case_specification .)
    HAVING          reduce using rule 207 (base_primary_expression -> case_specification .)
    THEN            reduce using rule 207 (base_primary_expression -> case_specification .)
    CROSS           reduce using rule 207 (base_primary_expression -> case_specification .)
    NATURAL         reduce using rule 207 (base_primary_expression -> case_specification .)
    INNER           reduce using rule 207 (base_primary_expression -> case_specification .)
    LEFT            reduce using rule 207 (base_primary_expression -> case_specification .)
    RIGHT           reduce using rule 207 (base_primary_expression -> case_specification .)
    FULL            reduce using rule 207 (base_primary_expression -> case_specification .)
    JOIN            reduce using rule 207 (base_primary_expression -> case_specification .)
    SET             reduce using rule 207 (base_primary_expression -> case_specification .)
    WHERE           reduce using rule 207 (base_primary_expression -> case_specification .)
    FORCE           reduce using rule 207 (base_primary_expression -> case_specification .)
    VALUES          reduce using rule 207 (base_primary_expression -> case_specification .)
    LPAREN          reduce using rule 207 (base_primary_expression -> case_specification .)
    SELECT          reduce using rule 207 (base_primary_expression -> case_specification .)
    ON              reduce using rule 207 (base_primary_expression -> case_specification .)
    USING           reduce using rule 207 (base_primary_expression -> case_specification .)
    ASC             reduce using rule 207 (base_primary_expression -> case_specification .)
    DESC            reduce using rule 207 (base_primary_expression -> case_specification .)
    NULLS           reduce using rule 207 (base_primary_expression -> case_specification .)
    WHEN            reduce using rule 207 (base_primary_expression -> case_specification .)
    END             reduce using rule 207 (base_primary_expression -> case_specification .)
    ELSE            reduce using rule 207 (base_primary_expression -> case_specification .)


state 166

    (208) base_primary_expression -> cast_specification .

    ASTERISK        reduce using rule 208 (base_primary_expression -> cast_specification .)
    SLASH           reduce using rule 208 (base_primary_expression -> cast_specification .)
    PERCENT         reduce using rule 208 (base_primary_expression -> cast_specification .)
    CONCAT          reduce using rule 208 (base_primary_expression -> cast_specification .)
    PLUS            reduce using rule 208 (base_primary_expression -> cast_specification .)
    MINUS           reduce using rule 208 (base_primary_expression -> cast_specification .)
    AS              reduce using rule 208 (base_primary_expression -> cast_specification .)
    IDENTIFIER      reduce using rule 208 (base_primary_expression -> cast_specification .)
    DIGIT_IDENTIFIER reduce using rule 208 (base_primary_expression -> cast_specification .)
    BACKQUOTED_IDENTIFIER reduce using rule 208 (base_primary_expression -> cast_specification .)
    NON_RESERVED    reduce using rule 208 (base_primary_expression -> cast_specification .)
    COMMA           reduce using rule 208 (base_primary_expression -> cast_specification .)
    FROM            reduce using rule 208 (base_primary_expression -> cast_specification .)
    INTERSECT       reduce using rule 208 (base_primary_expression -> cast_specification .)
    UNION           reduce using rule 208 (base_primary_expression -> cast_specification .)
    EXCEPT          reduce using rule 208 (base_primary_expression -> cast_specification .)
    ORDER           reduce using rule 208 (base_primary_expression -> cast_specification .)
    LIMIT           reduce using rule 208 (base_primary_expression -> cast_specification .)
    FOR             reduce using rule 208 (base_primary_expression -> cast_specification .)
    LOCK            reduce using rule 208 (base_primary_expression -> cast_specification .)
    $end            reduce using rule 208 (base_primary_expression -> cast_specification .)
    RPAREN          reduce using rule 208 (base_primary_expression -> cast_specification .)
    REGEXP          reduce using rule 208 (base_primary_expression -> cast_specification .)
    IS              reduce using rule 208 (base_primary_expression -> cast_specification .)
    EQ              reduce using rule 208 (base_primary_expression -> cast_specification .)
    NE              reduce using rule 208 (base_primary_expression -> cast_specification .)
    LT              reduce using rule 208 (base_primary_expression -> cast_specification .)
    LE              reduce using rule 208 (base_primary_expression -> cast_specification .)
    GT              reduce using rule 208 (base_primary_expression -> cast_specification .)
    GE              reduce using rule 208 (base_primary_expression -> cast_specification .)
    NOT             reduce using rule 208 (base_primary_expression -> cast_specification .)
    BETWEEN         reduce using rule 208 (base_primary_expression -> cast_specification .)
    IN              reduce using rule 208 (base_primary_expression -> cast_specification .)
    LIKE            reduce using rule 208 (base_primary_expression -> cast_specification .)
    OR              reduce using rule 208 (base_primary_expression -> cast_specification .)
    AND             reduce using rule 208 (base_primary_expression -> cast_specification .)
    GROUP           reduce using rule 208 (base_primary_expression -> cast_specification .)
    HAVING          reduce using rule 208 (base_primary_expression -> cast_specification .)
    THEN            reduce using rule 208 (base_primary_expression -> cast_specification .)
    CROSS           reduce using rule 208 (base_primary_expression -> cast_specification .)
    NATURAL         reduce using rule 208 (base_primary_expression -> cast_specification .)
    INNER           reduce using rule 208 (base_primary_expression -> cast_specification .)
    LEFT            reduce using rule 208 (base_primary_expression -> cast_specification .)
    RIGHT           reduce using rule 208 (base_primary_expression -> cast_specification .)
    FULL            reduce using rule 208 (base_primary_expression -> cast_specification .)
    JOIN            reduce using rule 208 (base_primary_expression -> cast_specification .)
    SET             reduce using rule 208 (base_primary_expression -> cast_specification .)
    WHERE           reduce using rule 208 (base_primary_expression -> cast_specification .)
    FORCE           reduce using rule 208 (base_primary_expression -> cast_specification .)
    VALUES          reduce using rule 208 (base_primary_expression -> cast_specification .)
    LPAREN          reduce using rule 208 (base_primary_expression -> cast_specification .)
    SELECT          reduce using rule 208 (base_primary_expression -> cast_specification .)
    ON              reduce using rule 208 (base_primary_expression -> cast_specification .)
    USING           reduce using rule 208 (base_primary_expression -> cast_specification .)
    ASC             reduce using rule 208 (base_primary_expression -> cast_specification .)
    DESC            reduce using rule 208 (base_primary_expression -> cast_specification .)
    NULLS           reduce using rule 208 (base_primary_expression -> cast_specification .)
    WHEN            reduce using rule 208 (base_primary_expression -> cast_specification .)
    END             reduce using rule 208 (base_primary_expression -> cast_specification .)
    ELSE            reduce using rule 208 (base_primary_expression -> cast_specification .)


state 167

    (209) value -> NULL .

    ASTERISK        reduce using rule 209 (value -> NULL .)
    SLASH           reduce using rule 209 (value -> NULL .)
    PERCENT         reduce using rule 209 (value -> NULL .)
    CONCAT          reduce using rule 209 (value -> NULL .)
    PLUS            reduce using rule 209 (value -> NULL .)
    MINUS           reduce using rule 209 (value -> NULL .)
    AS              reduce using rule 209 (value -> NULL .)
    IDENTIFIER      reduce using rule 209 (value -> NULL .)
    DIGIT_IDENTIFIER reduce using rule 209 (value -> NULL .)
    BACKQUOTED_IDENTIFIER reduce using rule 209 (value -> NULL .)
    NON_RESERVED    reduce using rule 209 (value -> NULL .)
    COMMA           reduce using rule 209 (value -> NULL .)
    FROM            reduce using rule 209 (value -> NULL .)
    INTERSECT       reduce using rule 209 (value -> NULL .)
    UNION           reduce using rule 209 (value -> NULL .)
    EXCEPT          reduce using rule 209 (value -> NULL .)
    ORDER           reduce using rule 209 (value -> NULL .)
    LIMIT           reduce using rule 209 (value -> NULL .)
    FOR             reduce using rule 209 (value -> NULL .)
    LOCK            reduce using rule 209 (value -> NULL .)
    $end            reduce using rule 209 (value -> NULL .)
    RPAREN          reduce using rule 209 (value -> NULL .)
    REGEXP          reduce using rule 209 (value -> NULL .)
    IS              reduce using rule 209 (value -> NULL .)
    EQ              reduce using rule 209 (value -> NULL .)
    NE              reduce using rule 209 (value -> NULL .)
    LT              reduce using rule 209 (value -> NULL .)
    LE              reduce using rule 209 (value -> NULL .)
    GT              reduce using rule 209 (value -> NULL .)
    GE              reduce using rule 209 (value -> NULL .)
    NOT             reduce using rule 209 (value -> NULL .)
    BETWEEN         reduce using rule 209 (value -> NULL .)
    IN              reduce using rule 209 (value -> NULL .)
    LIKE            reduce using rule 209 (value -> NULL .)
    OR              reduce using rule 209 (value -> NULL .)
    AND             reduce using rule 209 (value -> NULL .)
    GROUP           reduce using rule 209 (value -> NULL .)
    HAVING          reduce using rule 209 (value -> NULL .)
    THEN            reduce using rule 209 (value -> NULL .)
    CROSS           reduce using rule 209 (value -> NULL .)
    NATURAL         reduce using rule 209 (value -> NULL .)
    INNER           reduce using rule 209 (value -> NULL .)
    LEFT            reduce using rule 209 (value -> NULL .)
    RIGHT           reduce using rule 209 (value -> NULL .)
    FULL            reduce using rule 209 (value -> NULL .)
    JOIN            reduce using rule 209 (value -> NULL .)
    SET             reduce using rule 209 (value -> NULL .)
    WHERE           reduce using rule 209 (value -> NULL .)
    FORCE           reduce using rule 209 (value -> NULL .)
    VALUES          reduce using rule 209 (value -> NULL .)
    LPAREN          reduce using rule 209 (value -> NULL .)
    SELECT          reduce using rule 209 (value -> NULL .)
    ON              reduce using rule 209 (value -> NULL .)
    USING           reduce using rule 209 (value -> NULL .)
    ASC             reduce using rule 209 (value -> NULL .)
    DESC            reduce using rule 209 (value -> NULL .)
    NULLS           reduce using rule 209 (value -> NULL .)
    WHEN            reduce using rule 209 (value -> NULL .)
    END             reduce using rule 209 (value -> NULL .)
    ELSE            reduce using rule 209 (value -> NULL .)


state 168

    (210) value -> SCONST .

    ASTERISK        reduce using rule 210 (value -> SCONST .)
    SLASH           reduce using rule 210 (value -> SCONST .)
    PERCENT         reduce using rule 210 (value -> SCONST .)
    CONCAT          reduce using rule 210 (value -> SCONST .)
    PLUS            reduce using rule 210 (value -> SCONST .)
    MINUS           reduce using rule 210 (value -> SCONST .)
    AS              reduce using rule 210 (value -> SCONST .)
    IDENTIFIER      reduce using rule 210 (value -> SCONST .)
    DIGIT_IDENTIFIER reduce using rule 210 (value -> SCONST .)
    BACKQUOTED_IDENTIFIER reduce using rule 210 (value -> SCONST .)
    NON_RESERVED    reduce using rule 210 (value -> SCONST .)
    COMMA           reduce using rule 210 (value -> SCONST .)
    FROM            reduce using rule 210 (value -> SCONST .)
    INTERSECT       reduce using rule 210 (value -> SCONST .)
    UNION           reduce using rule 210 (value -> SCONST .)
    EXCEPT          reduce using rule 210 (value -> SCONST .)
    ORDER           reduce using rule 210 (value -> SCONST .)
    LIMIT           reduce using rule 210 (value -> SCONST .)
    FOR             reduce using rule 210 (value -> SCONST .)
    LOCK            reduce using rule 210 (value -> SCONST .)
    $end            reduce using rule 210 (value -> SCONST .)
    RPAREN          reduce using rule 210 (value -> SCONST .)
    REGEXP          reduce using rule 210 (value -> SCONST .)
    IS              reduce using rule 210 (value -> SCONST .)
    EQ              reduce using rule 210 (value -> SCONST .)
    NE              reduce using rule 210 (value -> SCONST .)
    LT              reduce using rule 210 (value -> SCONST .)
    LE              reduce using rule 210 (value -> SCONST .)
    GT              reduce using rule 210 (value -> SCONST .)
    GE              reduce using rule 210 (value -> SCONST .)
    NOT             reduce using rule 210 (value -> SCONST .)
    BETWEEN         reduce using rule 210 (value -> SCONST .)
    IN              reduce using rule 210 (value -> SCONST .)
    LIKE            reduce using rule 210 (value -> SCONST .)
    OR              reduce using rule 210 (value -> SCONST .)
    AND             reduce using rule 210 (value -> SCONST .)
    GROUP           reduce using rule 210 (value -> SCONST .)
    HAVING          reduce using rule 210 (value -> SCONST .)
    THEN            reduce using rule 210 (value -> SCONST .)
    CROSS           reduce using rule 210 (value -> SCONST .)
    NATURAL         reduce using rule 210 (value -> SCONST .)
    INNER           reduce using rule 210 (value -> SCONST .)
    LEFT            reduce using rule 210 (value -> SCONST .)
    RIGHT           reduce using rule 210 (value -> SCONST .)
    FULL            reduce using rule 210 (value -> SCONST .)
    JOIN            reduce using rule 210 (value -> SCONST .)
    SET             reduce using rule 210 (value -> SCONST .)
    WHERE           reduce using rule 210 (value -> SCONST .)
    FORCE           reduce using rule 210 (value -> SCONST .)
    VALUES          reduce using rule 210 (value -> SCONST .)
    LPAREN          reduce using rule 210 (value -> SCONST .)
    SELECT          reduce using rule 210 (value -> SCONST .)
    ON              reduce using rule 210 (value -> SCONST .)
    USING           reduce using rule 210 (value -> SCONST .)
    ASC             reduce using rule 210 (value -> SCONST .)
    DESC            reduce using rule 210 (value -> SCONST .)
    NULLS           reduce using rule 210 (value -> SCONST .)
    WHEN            reduce using rule 210 (value -> SCONST .)
    END             reduce using rule 210 (value -> SCONST .)
    ELSE            reduce using rule 210 (value -> SCONST .)


state 169

    (211) value -> number .

    ASTERISK        reduce using rule 211 (value -> number .)
    SLASH           reduce using rule 211 (value -> number .)
    PERCENT         reduce using rule 211 (value -> number .)
    CONCAT          reduce using rule 211 (value -> number .)
    PLUS            reduce using rule 211 (value -> number .)
    MINUS           reduce using rule 211 (value -> number .)
    AS              reduce using rule 211 (value -> number .)
    IDENTIFIER      reduce using rule 211 (value -> number .)
    DIGIT_IDENTIFIER reduce using rule 211 (value -> number .)
    BACKQUOTED_IDENTIFIER reduce using rule 211 (value -> number .)
    NON_RESERVED    reduce using rule 211 (value -> number .)
    COMMA           reduce using rule 211 (value -> number .)
    FROM            reduce using rule 211 (value -> number .)
    INTERSECT       reduce using rule 211 (value -> number .)
    UNION           reduce using rule 211 (value -> number .)
    EXCEPT          reduce using rule 211 (value -> number .)
    ORDER           reduce using rule 211 (value -> number .)
    LIMIT           reduce using rule 211 (value -> number .)
    FOR             reduce using rule 211 (value -> number .)
    LOCK            reduce using rule 211 (value -> number .)
    $end            reduce using rule 211 (value -> number .)
    RPAREN          reduce using rule 211 (value -> number .)
    REGEXP          reduce using rule 211 (value -> number .)
    IS              reduce using rule 211 (value -> number .)
    EQ              reduce using rule 211 (value -> number .)
    NE              reduce using rule 211 (value -> number .)
    LT              reduce using rule 211 (value -> number .)
    LE              reduce using rule 211 (value -> number .)
    GT              reduce using rule 211 (value -> number .)
    GE              reduce using rule 211 (value -> number .)
    NOT             reduce using rule 211 (value -> number .)
    BETWEEN         reduce using rule 211 (value -> number .)
    IN              reduce using rule 211 (value -> number .)
    LIKE            reduce using rule 211 (value -> number .)
    OR              reduce using rule 211 (value -> number .)
    AND             reduce using rule 211 (value -> number .)
    GROUP           reduce using rule 211 (value -> number .)
    HAVING          reduce using rule 211 (value -> number .)
    THEN            reduce using rule 211 (value -> number .)
    CROSS           reduce using rule 211 (value -> number .)
    NATURAL         reduce using rule 211 (value -> number .)
    INNER           reduce using rule 211 (value -> number .)
    LEFT            reduce using rule 211 (value -> number .)
    RIGHT           reduce using rule 211 (value -> number .)
    FULL            reduce using rule 211 (value -> number .)
    JOIN            reduce using rule 211 (value -> number .)
    SET             reduce using rule 211 (value -> number .)
    WHERE           reduce using rule 211 (value -> number .)
    FORCE           reduce using rule 211 (value -> number .)
    VALUES          reduce using rule 211 (value -> number .)
    LPAREN          reduce using rule 211 (value -> number .)
    SELECT          reduce using rule 211 (value -> number .)
    ON              reduce using rule 211 (value -> number .)
    USING           reduce using rule 211 (value -> number .)
    ASC             reduce using rule 211 (value -> number .)
    DESC            reduce using rule 211 (value -> number .)
    NULLS           reduce using rule 211 (value -> number .)
    WHEN            reduce using rule 211 (value -> number .)
    END             reduce using rule 211 (value -> number .)
    ELSE            reduce using rule 211 (value -> number .)


state 170

    (212) value -> boolean_value .

    ASTERISK        reduce using rule 212 (value -> boolean_value .)
    SLASH           reduce using rule 212 (value -> boolean_value .)
    PERCENT         reduce using rule 212 (value -> boolean_value .)
    CONCAT          reduce using rule 212 (value -> boolean_value .)
    PLUS            reduce using rule 212 (value -> boolean_value .)
    MINUS           reduce using rule 212 (value -> boolean_value .)
    AS              reduce using rule 212 (value -> boolean_value .)
    IDENTIFIER      reduce using rule 212 (value -> boolean_value .)
    DIGIT_IDENTIFIER reduce using rule 212 (value -> boolean_value .)
    BACKQUOTED_IDENTIFIER reduce using rule 212 (value -> boolean_value .)
    NON_RESERVED    reduce using rule 212 (value -> boolean_value .)
    COMMA           reduce using rule 212 (value -> boolean_value .)
    FROM            reduce using rule 212 (value -> boolean_value .)
    INTERSECT       reduce using rule 212 (value -> boolean_value .)
    UNION           reduce using rule 212 (value -> boolean_value .)
    EXCEPT          reduce using rule 212 (value -> boolean_value .)
    ORDER           reduce using rule 212 (value -> boolean_value .)
    LIMIT           reduce using rule 212 (value -> boolean_value .)
    FOR             reduce using rule 212 (value -> boolean_value .)
    LOCK            reduce using rule 212 (value -> boolean_value .)
    $end            reduce using rule 212 (value -> boolean_value .)
    RPAREN          reduce using rule 212 (value -> boolean_value .)
    REGEXP          reduce using rule 212 (value -> boolean_value .)
    IS              reduce using rule 212 (value -> boolean_value .)
    EQ              reduce using rule 212 (value -> boolean_value .)
    NE              reduce using rule 212 (value -> boolean_value .)
    LT              reduce using rule 212 (value -> boolean_value .)
    LE              reduce using rule 212 (value -> boolean_value .)
    GT              reduce using rule 212 (value -> boolean_value .)
    GE              reduce using rule 212 (value -> boolean_value .)
    NOT             reduce using rule 212 (value -> boolean_value .)
    BETWEEN         reduce using rule 212 (value -> boolean_value .)
    IN              reduce using rule 212 (value -> boolean_value .)
    LIKE            reduce using rule 212 (value -> boolean_value .)
    OR              reduce using rule 212 (value -> boolean_value .)
    AND             reduce using rule 212 (value -> boolean_value .)
    GROUP           reduce using rule 212 (value -> boolean_value .)
    HAVING          reduce using rule 212 (value -> boolean_value .)
    THEN            reduce using rule 212 (value -> boolean_value .)
    CROSS           reduce using rule 212 (value -> boolean_value .)
    NATURAL         reduce using rule 212 (value -> boolean_value .)
    INNER           reduce using rule 212 (value -> boolean_value .)
    LEFT            reduce using rule 212 (value -> boolean_value .)
    RIGHT           reduce using rule 212 (value -> boolean_value .)
    FULL            reduce using rule 212 (value -> boolean_value .)
    JOIN            reduce using rule 212 (value -> boolean_value .)
    SET             reduce using rule 212 (value -> boolean_value .)
    WHERE           reduce using rule 212 (value -> boolean_value .)
    FORCE           reduce using rule 212 (value -> boolean_value .)
    VALUES          reduce using rule 212 (value -> boolean_value .)
    LPAREN          reduce using rule 212 (value -> boolean_value .)
    SELECT          reduce using rule 212 (value -> boolean_value .)
    ON              reduce using rule 212 (value -> boolean_value .)
    USING           reduce using rule 212 (value -> boolean_value .)
    ASC             reduce using rule 212 (value -> boolean_value .)
    DESC            reduce using rule 212 (value -> boolean_value .)
    NULLS           reduce using rule 212 (value -> boolean_value .)
    WHEN            reduce using rule 212 (value -> boolean_value .)
    END             reduce using rule 212 (value -> boolean_value .)
    ELSE            reduce using rule 212 (value -> boolean_value .)


state 171

    (213) value -> QUOTED_IDENTIFIER .

    ASTERISK        reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    SLASH           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    PERCENT         reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    CONCAT          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    PLUS            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    MINUS           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    AS              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    IDENTIFIER      reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    DIGIT_IDENTIFIER reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    BACKQUOTED_IDENTIFIER reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    NON_RESERVED    reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    COMMA           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    FROM            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    INTERSECT       reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    UNION           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    EXCEPT          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    ORDER           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    LIMIT           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    FOR             reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    LOCK            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    $end            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    RPAREN          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    REGEXP          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    IS              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    EQ              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    NE              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    LT              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    LE              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    GT              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    GE              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    NOT             reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    BETWEEN         reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    IN              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    LIKE            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    OR              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    AND             reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    GROUP           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    HAVING          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    THEN            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    CROSS           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    NATURAL         reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    INNER           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    LEFT            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    RIGHT           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    FULL            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    JOIN            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    SET             reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    WHERE           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    FORCE           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    VALUES          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    LPAREN          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    SELECT          reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    ON              reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    USING           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    ASC             reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    DESC            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    NULLS           reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    WHEN            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    END             reduce using rule 213 (value -> QUOTED_IDENTIFIER .)
    ELSE            reduce using rule 213 (value -> QUOTED_IDENTIFIER .)


state 172

    (214) value -> QM .

    ASTERISK        reduce using rule 214 (value -> QM .)
    SLASH           reduce using rule 214 (value -> QM .)
    PERCENT         reduce using rule 214 (value -> QM .)
    CONCAT          reduce using rule 214 (value -> QM .)
    PLUS            reduce using rule 214 (value -> QM .)
    MINUS           reduce using rule 214 (value -> QM .)
    AS              reduce using rule 214 (value -> QM .)
    IDENTIFIER      reduce using rule 214 (value -> QM .)
    DIGIT_IDENTIFIER reduce using rule 214 (value -> QM .)
    BACKQUOTED_IDENTIFIER reduce using rule 214 (value -> QM .)
    NON_RESERVED    reduce using rule 214 (value -> QM .)
    COMMA           reduce using rule 214 (value -> QM .)
    FROM            reduce using rule 214 (value -> QM .)
    INTERSECT       reduce using rule 214 (value -> QM .)
    UNION           reduce using rule 214 (value -> QM .)
    EXCEPT          reduce using rule 214 (value -> QM .)
    ORDER           reduce using rule 214 (value -> QM .)
    LIMIT           reduce using rule 214 (value -> QM .)
    FOR             reduce using rule 214 (value -> QM .)
    LOCK            reduce using rule 214 (value -> QM .)
    $end            reduce using rule 214 (value -> QM .)
    RPAREN          reduce using rule 214 (value -> QM .)
    REGEXP          reduce using rule 214 (value -> QM .)
    IS              reduce using rule 214 (value -> QM .)
    EQ              reduce using rule 214 (value -> QM .)
    NE              reduce using rule 214 (value -> QM .)
    LT              reduce using rule 214 (value -> QM .)
    LE              reduce using rule 214 (value -> QM .)
    GT              reduce using rule 214 (value -> QM .)
    GE              reduce using rule 214 (value -> QM .)
    NOT             reduce using rule 214 (value -> QM .)
    BETWEEN         reduce using rule 214 (value -> QM .)
    IN              reduce using rule 214 (value -> QM .)
    LIKE            reduce using rule 214 (value -> QM .)
    OR              reduce using rule 214 (value -> QM .)
    AND             reduce using rule 214 (value -> QM .)
    GROUP           reduce using rule 214 (value -> QM .)
    HAVING          reduce using rule 214 (value -> QM .)
    THEN            reduce using rule 214 (value -> QM .)
    CROSS           reduce using rule 214 (value -> QM .)
    NATURAL         reduce using rule 214 (value -> QM .)
    INNER           reduce using rule 214 (value -> QM .)
    LEFT            reduce using rule 214 (value -> QM .)
    RIGHT           reduce using rule 214 (value -> QM .)
    FULL            reduce using rule 214 (value -> QM .)
    JOIN            reduce using rule 214 (value -> QM .)
    SET             reduce using rule 214 (value -> QM .)
    WHERE           reduce using rule 214 (value -> QM .)
    FORCE           reduce using rule 214 (value -> QM .)
    VALUES          reduce using rule 214 (value -> QM .)
    LPAREN          reduce using rule 214 (value -> QM .)
    SELECT          reduce using rule 214 (value -> QM .)
    ON              reduce using rule 214 (value -> QM .)
    USING           reduce using rule 214 (value -> QM .)
    ASC             reduce using rule 214 (value -> QM .)
    DESC            reduce using rule 214 (value -> QM .)
    NULLS           reduce using rule 214 (value -> QM .)
    WHEN            reduce using rule 214 (value -> QM .)
    END             reduce using rule 214 (value -> QM .)
    ELSE            reduce using rule 214 (value -> QM .)


state 173

    (241) date_time -> CURRENT_DATE .

    ASTERISK        reduce using rule 241 (date_time -> CURRENT_DATE .)
    SLASH           reduce using rule 241 (date_time -> CURRENT_DATE .)
    PERCENT         reduce using rule 241 (date_time -> CURRENT_DATE .)
    CONCAT          reduce using rule 241 (date_time -> CURRENT_DATE .)
    PLUS            reduce using rule 241 (date_time -> CURRENT_DATE .)
    MINUS           reduce using rule 241 (date_time -> CURRENT_DATE .)
    AS              reduce using rule 241 (date_time -> CURRENT_DATE .)
    IDENTIFIER      reduce using rule 241 (date_time -> CURRENT_DATE .)
    DIGIT_IDENTIFIER reduce using rule 241 (date_time -> CURRENT_DATE .)
    BACKQUOTED_IDENTIFIER reduce using rule 241 (date_time -> CURRENT_DATE .)
    NON_RESERVED    reduce using rule 241 (date_time -> CURRENT_DATE .)
    COMMA           reduce using rule 241 (date_time -> CURRENT_DATE .)
    FROM            reduce using rule 241 (date_time -> CURRENT_DATE .)
    INTERSECT       reduce using rule 241 (date_time -> CURRENT_DATE .)
    UNION           reduce using rule 241 (date_time -> CURRENT_DATE .)
    EXCEPT          reduce using rule 241 (date_time -> CURRENT_DATE .)
    ORDER           reduce using rule 241 (date_time -> CURRENT_DATE .)
    LIMIT           reduce using rule 241 (date_time -> CURRENT_DATE .)
    FOR             reduce using rule 241 (date_time -> CURRENT_DATE .)
    LOCK            reduce using rule 241 (date_time -> CURRENT_DATE .)
    $end            reduce using rule 241 (date_time -> CURRENT_DATE .)
    RPAREN          reduce using rule 241 (date_time -> CURRENT_DATE .)
    REGEXP          reduce using rule 241 (date_time -> CURRENT_DATE .)
    IS              reduce using rule 241 (date_time -> CURRENT_DATE .)
    EQ              reduce using rule 241 (date_time -> CURRENT_DATE .)
    NE              reduce using rule 241 (date_time -> CURRENT_DATE .)
    LT              reduce using rule 241 (date_time -> CURRENT_DATE .)
    LE              reduce using rule 241 (date_time -> CURRENT_DATE .)
    GT              reduce using rule 241 (date_time -> CURRENT_DATE .)
    GE              reduce using rule 241 (date_time -> CURRENT_DATE .)
    NOT             reduce using rule 241 (date_time -> CURRENT_DATE .)
    BETWEEN         reduce using rule 241 (date_time -> CURRENT_DATE .)
    IN              reduce using rule 241 (date_time -> CURRENT_DATE .)
    LIKE            reduce using rule 241 (date_time -> CURRENT_DATE .)
    OR              reduce using rule 241 (date_time -> CURRENT_DATE .)
    AND             reduce using rule 241 (date_time -> CURRENT_DATE .)
    GROUP           reduce using rule 241 (date_time -> CURRENT_DATE .)
    HAVING          reduce using rule 241 (date_time -> CURRENT_DATE .)
    THEN            reduce using rule 241 (date_time -> CURRENT_DATE .)
    CROSS           reduce using rule 241 (date_time -> CURRENT_DATE .)
    NATURAL         reduce using rule 241 (date_time -> CURRENT_DATE .)
    INNER           reduce using rule 241 (date_time -> CURRENT_DATE .)
    LEFT            reduce using rule 241 (date_time -> CURRENT_DATE .)
    RIGHT           reduce using rule 241 (date_time -> CURRENT_DATE .)
    FULL            reduce using rule 241 (date_time -> CURRENT_DATE .)
    JOIN            reduce using rule 241 (date_time -> CURRENT_DATE .)
    SET             reduce using rule 241 (date_time -> CURRENT_DATE .)
    WHERE           reduce using rule 241 (date_time -> CURRENT_DATE .)
    FORCE           reduce using rule 241 (date_time -> CURRENT_DATE .)
    VALUES          reduce using rule 241 (date_time -> CURRENT_DATE .)
    LPAREN          reduce using rule 241 (date_time -> CURRENT_DATE .)
    SELECT          reduce using rule 241 (date_time -> CURRENT_DATE .)
    ON              reduce using rule 241 (date_time -> CURRENT_DATE .)
    USING           reduce using rule 241 (date_time -> CURRENT_DATE .)
    ASC             reduce using rule 241 (date_time -> CURRENT_DATE .)
    DESC            reduce using rule 241 (date_time -> CURRENT_DATE .)
    NULLS           reduce using rule 241 (date_time -> CURRENT_DATE .)
    WHEN            reduce using rule 241 (date_time -> CURRENT_DATE .)
    END             reduce using rule 241 (date_time -> CURRENT_DATE .)
    ELSE            reduce using rule 241 (date_time -> CURRENT_DATE .)


state 174

    (242) date_time -> CURRENT_TIME . integer_param_opt
    (262) integer_param_opt -> . LPAREN INTEGER RPAREN
    (263) integer_param_opt -> . LPAREN RPAREN
    (264) integer_param_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 246
    ASTERISK        reduce using rule 276 (empty -> .)
    SLASH           reduce using rule 276 (empty -> .)
    PERCENT         reduce using rule 276 (empty -> .)
    CONCAT          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    AS              reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    FROM            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    REGEXP          reduce using rule 276 (empty -> .)
    IS              reduce using rule 276 (empty -> .)
    EQ              reduce using rule 276 (empty -> .)
    NE              reduce using rule 276 (empty -> .)
    LT              reduce using rule 276 (empty -> .)
    LE              reduce using rule 276 (empty -> .)
    GT              reduce using rule 276 (empty -> .)
    GE              reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    BETWEEN         reduce using rule 276 (empty -> .)
    IN              reduce using rule 276 (empty -> .)
    LIKE            reduce using rule 276 (empty -> .)
    OR              reduce using rule 276 (empty -> .)
    AND             reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    THEN            reduce using rule 276 (empty -> .)
    CROSS           reduce using rule 276 (empty -> .)
    NATURAL         reduce using rule 276 (empty -> .)
    INNER           reduce using rule 276 (empty -> .)
    LEFT            reduce using rule 276 (empty -> .)
    RIGHT           reduce using rule 276 (empty -> .)
    FULL            reduce using rule 276 (empty -> .)
    JOIN            reduce using rule 276 (empty -> .)
    SET             reduce using rule 276 (empty -> .)
    WHERE           reduce using rule 276 (empty -> .)
    FORCE           reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    ON              reduce using rule 276 (empty -> .)
    USING           reduce using rule 276 (empty -> .)
    ASC             reduce using rule 276 (empty -> .)
    DESC            reduce using rule 276 (empty -> .)
    NULLS           reduce using rule 276 (empty -> .)
    WHEN            reduce using rule 276 (empty -> .)
    END             reduce using rule 276 (empty -> .)
    ELSE            reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    integer_param_opt              shift and go to state 245
    empty                          shift and go to state 247

state 175

    (243) date_time -> CURRENT_TIMESTAMP . integer_param_opt
    (262) integer_param_opt -> . LPAREN INTEGER RPAREN
    (263) integer_param_opt -> . LPAREN RPAREN
    (264) integer_param_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 246
    ASTERISK        reduce using rule 276 (empty -> .)
    SLASH           reduce using rule 276 (empty -> .)
    PERCENT         reduce using rule 276 (empty -> .)
    CONCAT          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    AS              reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    FROM            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    REGEXP          reduce using rule 276 (empty -> .)
    IS              reduce using rule 276 (empty -> .)
    EQ              reduce using rule 276 (empty -> .)
    NE              reduce using rule 276 (empty -> .)
    LT              reduce using rule 276 (empty -> .)
    LE              reduce using rule 276 (empty -> .)
    GT              reduce using rule 276 (empty -> .)
    GE              reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    BETWEEN         reduce using rule 276 (empty -> .)
    IN              reduce using rule 276 (empty -> .)
    LIKE            reduce using rule 276 (empty -> .)
    OR              reduce using rule 276 (empty -> .)
    AND             reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    THEN            reduce using rule 276 (empty -> .)
    CROSS           reduce using rule 276 (empty -> .)
    NATURAL         reduce using rule 276 (empty -> .)
    INNER           reduce using rule 276 (empty -> .)
    LEFT            reduce using rule 276 (empty -> .)
    RIGHT           reduce using rule 276 (empty -> .)
    FULL            reduce using rule 276 (empty -> .)
    JOIN            reduce using rule 276 (empty -> .)
    SET             reduce using rule 276 (empty -> .)
    WHERE           reduce using rule 276 (empty -> .)
    FORCE           reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    ON              reduce using rule 276 (empty -> .)
    USING           reduce using rule 276 (empty -> .)
    ASC             reduce using rule 276 (empty -> .)
    DESC            reduce using rule 276 (empty -> .)
    NULLS           reduce using rule 276 (empty -> .)
    WHEN            reduce using rule 276 (empty -> .)
    END             reduce using rule 276 (empty -> .)
    ELSE            reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    integer_param_opt              shift and go to state 248
    empty                          shift and go to state 247

state 176

    (244) date_time -> LOCALTIME . integer_param_opt
    (262) integer_param_opt -> . LPAREN INTEGER RPAREN
    (263) integer_param_opt -> . LPAREN RPAREN
    (264) integer_param_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 246
    ASTERISK        reduce using rule 276 (empty -> .)
    SLASH           reduce using rule 276 (empty -> .)
    PERCENT         reduce using rule 276 (empty -> .)
    CONCAT          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    AS              reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    FROM            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    REGEXP          reduce using rule 276 (empty -> .)
    IS              reduce using rule 276 (empty -> .)
    EQ              reduce using rule 276 (empty -> .)
    NE              reduce using rule 276 (empty -> .)
    LT              reduce using rule 276 (empty -> .)
    LE              reduce using rule 276 (empty -> .)
    GT              reduce using rule 276 (empty -> .)
    GE              reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    BETWEEN         reduce using rule 276 (empty -> .)
    IN              reduce using rule 276 (empty -> .)
    LIKE            reduce using rule 276 (empty -> .)
    OR              reduce using rule 276 (empty -> .)
    AND             reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    THEN            reduce using rule 276 (empty -> .)
    CROSS           reduce using rule 276 (empty -> .)
    NATURAL         reduce using rule 276 (empty -> .)
    INNER           reduce using rule 276 (empty -> .)
    LEFT            reduce using rule 276 (empty -> .)
    RIGHT           reduce using rule 276 (empty -> .)
    FULL            reduce using rule 276 (empty -> .)
    JOIN            reduce using rule 276 (empty -> .)
    SET             reduce using rule 276 (empty -> .)
    WHERE           reduce using rule 276 (empty -> .)
    FORCE           reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    ON              reduce using rule 276 (empty -> .)
    USING           reduce using rule 276 (empty -> .)
    ASC             reduce using rule 276 (empty -> .)
    DESC            reduce using rule 276 (empty -> .)
    NULLS           reduce using rule 276 (empty -> .)
    WHEN            reduce using rule 276 (empty -> .)
    END             reduce using rule 276 (empty -> .)
    ELSE            reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    integer_param_opt              shift and go to state 249
    empty                          shift and go to state 247

state 177

    (245) date_time -> LOCALTIMESTAMP . integer_param_opt
    (262) integer_param_opt -> . LPAREN INTEGER RPAREN
    (263) integer_param_opt -> . LPAREN RPAREN
    (264) integer_param_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 246
    ASTERISK        reduce using rule 276 (empty -> .)
    SLASH           reduce using rule 276 (empty -> .)
    PERCENT         reduce using rule 276 (empty -> .)
    CONCAT          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    AS              reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    FROM            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    REGEXP          reduce using rule 276 (empty -> .)
    IS              reduce using rule 276 (empty -> .)
    EQ              reduce using rule 276 (empty -> .)
    NE              reduce using rule 276 (empty -> .)
    LT              reduce using rule 276 (empty -> .)
    LE              reduce using rule 276 (empty -> .)
    GT              reduce using rule 276 (empty -> .)
    GE              reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    BETWEEN         reduce using rule 276 (empty -> .)
    IN              reduce using rule 276 (empty -> .)
    LIKE            reduce using rule 276 (empty -> .)
    OR              reduce using rule 276 (empty -> .)
    AND             reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    THEN            reduce using rule 276 (empty -> .)
    CROSS           reduce using rule 276 (empty -> .)
    NATURAL         reduce using rule 276 (empty -> .)
    INNER           reduce using rule 276 (empty -> .)
    LEFT            reduce using rule 276 (empty -> .)
    RIGHT           reduce using rule 276 (empty -> .)
    FULL            reduce using rule 276 (empty -> .)
    JOIN            reduce using rule 276 (empty -> .)
    SET             reduce using rule 276 (empty -> .)
    WHERE           reduce using rule 276 (empty -> .)
    FORCE           reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)
    ON              reduce using rule 276 (empty -> .)
    USING           reduce using rule 276 (empty -> .)
    ASC             reduce using rule 276 (empty -> .)
    DESC            reduce using rule 276 (empty -> .)
    NULLS           reduce using rule 276 (empty -> .)
    WHEN            reduce using rule 276 (empty -> .)
    END             reduce using rule 276 (empty -> .)
    ELSE            reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    integer_param_opt              shift and go to state 250
    empty                          shift and go to state 247

state 178

    (221) case_specification -> simple_case .

    ASTERISK        reduce using rule 221 (case_specification -> simple_case .)
    SLASH           reduce using rule 221 (case_specification -> simple_case .)
    PERCENT         reduce using rule 221 (case_specification -> simple_case .)
    CONCAT          reduce using rule 221 (case_specification -> simple_case .)
    PLUS            reduce using rule 221 (case_specification -> simple_case .)
    MINUS           reduce using rule 221 (case_specification -> simple_case .)
    AS              reduce using rule 221 (case_specification -> simple_case .)
    IDENTIFIER      reduce using rule 221 (case_specification -> simple_case .)
    DIGIT_IDENTIFIER reduce using rule 221 (case_specification -> simple_case .)
    BACKQUOTED_IDENTIFIER reduce using rule 221 (case_specification -> simple_case .)
    NON_RESERVED    reduce using rule 221 (case_specification -> simple_case .)
    COMMA           reduce using rule 221 (case_specification -> simple_case .)
    FROM            reduce using rule 221 (case_specification -> simple_case .)
    INTERSECT       reduce using rule 221 (case_specification -> simple_case .)
    UNION           reduce using rule 221 (case_specification -> simple_case .)
    EXCEPT          reduce using rule 221 (case_specification -> simple_case .)
    ORDER           reduce using rule 221 (case_specification -> simple_case .)
    LIMIT           reduce using rule 221 (case_specification -> simple_case .)
    FOR             reduce using rule 221 (case_specification -> simple_case .)
    LOCK            reduce using rule 221 (case_specification -> simple_case .)
    $end            reduce using rule 221 (case_specification -> simple_case .)
    RPAREN          reduce using rule 221 (case_specification -> simple_case .)
    REGEXP          reduce using rule 221 (case_specification -> simple_case .)
    IS              reduce using rule 221 (case_specification -> simple_case .)
    EQ              reduce using rule 221 (case_specification -> simple_case .)
    NE              reduce using rule 221 (case_specification -> simple_case .)
    LT              reduce using rule 221 (case_specification -> simple_case .)
    LE              reduce using rule 221 (case_specification -> simple_case .)
    GT              reduce using rule 221 (case_specification -> simple_case .)
    GE              reduce using rule 221 (case_specification -> simple_case .)
    NOT             reduce using rule 221 (case_specification -> simple_case .)
    BETWEEN         reduce using rule 221 (case_specification -> simple_case .)
    IN              reduce using rule 221 (case_specification -> simple_case .)
    LIKE            reduce using rule 221 (case_specification -> simple_case .)
    OR              reduce using rule 221 (case_specification -> simple_case .)
    AND             reduce using rule 221 (case_specification -> simple_case .)
    GROUP           reduce using rule 221 (case_specification -> simple_case .)
    HAVING          reduce using rule 221 (case_specification -> simple_case .)
    THEN            reduce using rule 221 (case_specification -> simple_case .)
    CROSS           reduce using rule 221 (case_specification -> simple_case .)
    NATURAL         reduce using rule 221 (case_specification -> simple_case .)
    INNER           reduce using rule 221 (case_specification -> simple_case .)
    LEFT            reduce using rule 221 (case_specification -> simple_case .)
    RIGHT           reduce using rule 221 (case_specification -> simple_case .)
    FULL            reduce using rule 221 (case_specification -> simple_case .)
    JOIN            reduce using rule 221 (case_specification -> simple_case .)
    SET             reduce using rule 221 (case_specification -> simple_case .)
    WHERE           reduce using rule 221 (case_specification -> simple_case .)
    FORCE           reduce using rule 221 (case_specification -> simple_case .)
    VALUES          reduce using rule 221 (case_specification -> simple_case .)
    LPAREN          reduce using rule 221 (case_specification -> simple_case .)
    SELECT          reduce using rule 221 (case_specification -> simple_case .)
    ON              reduce using rule 221 (case_specification -> simple_case .)
    USING           reduce using rule 221 (case_specification -> simple_case .)
    ASC             reduce using rule 221 (case_specification -> simple_case .)
    DESC            reduce using rule 221 (case_specification -> simple_case .)
    NULLS           reduce using rule 221 (case_specification -> simple_case .)
    WHEN            reduce using rule 221 (case_specification -> simple_case .)
    END             reduce using rule 221 (case_specification -> simple_case .)
    ELSE            reduce using rule 221 (case_specification -> simple_case .)


state 179

    (222) case_specification -> searched_case .

    ASTERISK        reduce using rule 222 (case_specification -> searched_case .)
    SLASH           reduce using rule 222 (case_specification -> searched_case .)
    PERCENT         reduce using rule 222 (case_specification -> searched_case .)
    CONCAT          reduce using rule 222 (case_specification -> searched_case .)
    PLUS            reduce using rule 222 (case_specification -> searched_case .)
    MINUS           reduce using rule 222 (case_specification -> searched_case .)
    AS              reduce using rule 222 (case_specification -> searched_case .)
    IDENTIFIER      reduce using rule 222 (case_specification -> searched_case .)
    DIGIT_IDENTIFIER reduce using rule 222 (case_specification -> searched_case .)
    BACKQUOTED_IDENTIFIER reduce using rule 222 (case_specification -> searched_case .)
    NON_RESERVED    reduce using rule 222 (case_specification -> searched_case .)
    COMMA           reduce using rule 222 (case_specification -> searched_case .)
    FROM            reduce using rule 222 (case_specification -> searched_case .)
    INTERSECT       reduce using rule 222 (case_specification -> searched_case .)
    UNION           reduce using rule 222 (case_specification -> searched_case .)
    EXCEPT          reduce using rule 222 (case_specification -> searched_case .)
    ORDER           reduce using rule 222 (case_specification -> searched_case .)
    LIMIT           reduce using rule 222 (case_specification -> searched_case .)
    FOR             reduce using rule 222 (case_specification -> searched_case .)
    LOCK            reduce using rule 222 (case_specification -> searched_case .)
    $end            reduce using rule 222 (case_specification -> searched_case .)
    RPAREN          reduce using rule 222 (case_specification -> searched_case .)
    REGEXP          reduce using rule 222 (case_specification -> searched_case .)
    IS              reduce using rule 222 (case_specification -> searched_case .)
    EQ              reduce using rule 222 (case_specification -> searched_case .)
    NE              reduce using rule 222 (case_specification -> searched_case .)
    LT              reduce using rule 222 (case_specification -> searched_case .)
    LE              reduce using rule 222 (case_specification -> searched_case .)
    GT              reduce using rule 222 (case_specification -> searched_case .)
    GE              reduce using rule 222 (case_specification -> searched_case .)
    NOT             reduce using rule 222 (case_specification -> searched_case .)
    BETWEEN         reduce using rule 222 (case_specification -> searched_case .)
    IN              reduce using rule 222 (case_specification -> searched_case .)
    LIKE            reduce using rule 222 (case_specification -> searched_case .)
    OR              reduce using rule 222 (case_specification -> searched_case .)
    AND             reduce using rule 222 (case_specification -> searched_case .)
    GROUP           reduce using rule 222 (case_specification -> searched_case .)
    HAVING          reduce using rule 222 (case_specification -> searched_case .)
    THEN            reduce using rule 222 (case_specification -> searched_case .)
    CROSS           reduce using rule 222 (case_specification -> searched_case .)
    NATURAL         reduce using rule 222 (case_specification -> searched_case .)
    INNER           reduce using rule 222 (case_specification -> searched_case .)
    LEFT            reduce using rule 222 (case_specification -> searched_case .)
    RIGHT           reduce using rule 222 (case_specification -> searched_case .)
    FULL            reduce using rule 222 (case_specification -> searched_case .)
    JOIN            reduce using rule 222 (case_specification -> searched_case .)
    SET             reduce using rule 222 (case_specification -> searched_case .)
    WHERE           reduce using rule 222 (case_specification -> searched_case .)
    FORCE           reduce using rule 222 (case_specification -> searched_case .)
    VALUES          reduce using rule 222 (case_specification -> searched_case .)
    LPAREN          reduce using rule 222 (case_specification -> searched_case .)
    SELECT          reduce using rule 222 (case_specification -> searched_case .)
    ON              reduce using rule 222 (case_specification -> searched_case .)
    USING           reduce using rule 222 (case_specification -> searched_case .)
    ASC             reduce using rule 222 (case_specification -> searched_case .)
    DESC            reduce using rule 222 (case_specification -> searched_case .)
    NULLS           reduce using rule 222 (case_specification -> searched_case .)
    WHEN            reduce using rule 222 (case_specification -> searched_case .)
    END             reduce using rule 222 (case_specification -> searched_case .)
    ELSE            reduce using rule 222 (case_specification -> searched_case .)


state 180

    (225) cast_specification -> CAST . LPAREN value_expression AS data_type RPAREN

    LPAREN          shift and go to state 251


state 181

    (274) number -> DECIMAL .

    ASTERISK        reduce using rule 274 (number -> DECIMAL .)
    SLASH           reduce using rule 274 (number -> DECIMAL .)
    PERCENT         reduce using rule 274 (number -> DECIMAL .)
    CONCAT          reduce using rule 274 (number -> DECIMAL .)
    PLUS            reduce using rule 274 (number -> DECIMAL .)
    MINUS           reduce using rule 274 (number -> DECIMAL .)
    AS              reduce using rule 274 (number -> DECIMAL .)
    IDENTIFIER      reduce using rule 274 (number -> DECIMAL .)
    DIGIT_IDENTIFIER reduce using rule 274 (number -> DECIMAL .)
    BACKQUOTED_IDENTIFIER reduce using rule 274 (number -> DECIMAL .)
    NON_RESERVED    reduce using rule 274 (number -> DECIMAL .)
    COMMA           reduce using rule 274 (number -> DECIMAL .)
    FROM            reduce using rule 274 (number -> DECIMAL .)
    INTERSECT       reduce using rule 274 (number -> DECIMAL .)
    UNION           reduce using rule 274 (number -> DECIMAL .)
    EXCEPT          reduce using rule 274 (number -> DECIMAL .)
    ORDER           reduce using rule 274 (number -> DECIMAL .)
    LIMIT           reduce using rule 274 (number -> DECIMAL .)
    FOR             reduce using rule 274 (number -> DECIMAL .)
    LOCK            reduce using rule 274 (number -> DECIMAL .)
    $end            reduce using rule 274 (number -> DECIMAL .)
    RPAREN          reduce using rule 274 (number -> DECIMAL .)
    REGEXP          reduce using rule 274 (number -> DECIMAL .)
    IS              reduce using rule 274 (number -> DECIMAL .)
    EQ              reduce using rule 274 (number -> DECIMAL .)
    NE              reduce using rule 274 (number -> DECIMAL .)
    LT              reduce using rule 274 (number -> DECIMAL .)
    LE              reduce using rule 274 (number -> DECIMAL .)
    GT              reduce using rule 274 (number -> DECIMAL .)
    GE              reduce using rule 274 (number -> DECIMAL .)
    NOT             reduce using rule 274 (number -> DECIMAL .)
    BETWEEN         reduce using rule 274 (number -> DECIMAL .)
    IN              reduce using rule 274 (number -> DECIMAL .)
    LIKE            reduce using rule 274 (number -> DECIMAL .)
    OR              reduce using rule 274 (number -> DECIMAL .)
    AND             reduce using rule 274 (number -> DECIMAL .)
    GROUP           reduce using rule 274 (number -> DECIMAL .)
    HAVING          reduce using rule 274 (number -> DECIMAL .)
    THEN            reduce using rule 274 (number -> DECIMAL .)
    CROSS           reduce using rule 274 (number -> DECIMAL .)
    NATURAL         reduce using rule 274 (number -> DECIMAL .)
    INNER           reduce using rule 274 (number -> DECIMAL .)
    LEFT            reduce using rule 274 (number -> DECIMAL .)
    RIGHT           reduce using rule 274 (number -> DECIMAL .)
    FULL            reduce using rule 274 (number -> DECIMAL .)
    JOIN            reduce using rule 274 (number -> DECIMAL .)
    SET             reduce using rule 274 (number -> DECIMAL .)
    WHERE           reduce using rule 274 (number -> DECIMAL .)
    FORCE           reduce using rule 274 (number -> DECIMAL .)
    VALUES          reduce using rule 274 (number -> DECIMAL .)
    LPAREN          reduce using rule 274 (number -> DECIMAL .)
    SELECT          reduce using rule 274 (number -> DECIMAL .)
    ON              reduce using rule 274 (number -> DECIMAL .)
    USING           reduce using rule 274 (number -> DECIMAL .)
    ASC             reduce using rule 274 (number -> DECIMAL .)
    DESC            reduce using rule 274 (number -> DECIMAL .)
    NULLS           reduce using rule 274 (number -> DECIMAL .)
    WHEN            reduce using rule 274 (number -> DECIMAL .)
    END             reduce using rule 274 (number -> DECIMAL .)
    ELSE            reduce using rule 274 (number -> DECIMAL .)


state 182

    (275) number -> INTEGER .

    ASTERISK        reduce using rule 275 (number -> INTEGER .)
    SLASH           reduce using rule 275 (number -> INTEGER .)
    PERCENT         reduce using rule 275 (number -> INTEGER .)
    CONCAT          reduce using rule 275 (number -> INTEGER .)
    PLUS            reduce using rule 275 (number -> INTEGER .)
    MINUS           reduce using rule 275 (number -> INTEGER .)
    AS              reduce using rule 275 (number -> INTEGER .)
    IDENTIFIER      reduce using rule 275 (number -> INTEGER .)
    DIGIT_IDENTIFIER reduce using rule 275 (number -> INTEGER .)
    BACKQUOTED_IDENTIFIER reduce using rule 275 (number -> INTEGER .)
    NON_RESERVED    reduce using rule 275 (number -> INTEGER .)
    COMMA           reduce using rule 275 (number -> INTEGER .)
    FROM            reduce using rule 275 (number -> INTEGER .)
    INTERSECT       reduce using rule 275 (number -> INTEGER .)
    UNION           reduce using rule 275 (number -> INTEGER .)
    EXCEPT          reduce using rule 275 (number -> INTEGER .)
    ORDER           reduce using rule 275 (number -> INTEGER .)
    LIMIT           reduce using rule 275 (number -> INTEGER .)
    FOR             reduce using rule 275 (number -> INTEGER .)
    LOCK            reduce using rule 275 (number -> INTEGER .)
    $end            reduce using rule 275 (number -> INTEGER .)
    RPAREN          reduce using rule 275 (number -> INTEGER .)
    REGEXP          reduce using rule 275 (number -> INTEGER .)
    IS              reduce using rule 275 (number -> INTEGER .)
    EQ              reduce using rule 275 (number -> INTEGER .)
    NE              reduce using rule 275 (number -> INTEGER .)
    LT              reduce using rule 275 (number -> INTEGER .)
    LE              reduce using rule 275 (number -> INTEGER .)
    GT              reduce using rule 275 (number -> INTEGER .)
    GE              reduce using rule 275 (number -> INTEGER .)
    NOT             reduce using rule 275 (number -> INTEGER .)
    BETWEEN         reduce using rule 275 (number -> INTEGER .)
    IN              reduce using rule 275 (number -> INTEGER .)
    LIKE            reduce using rule 275 (number -> INTEGER .)
    OR              reduce using rule 275 (number -> INTEGER .)
    AND             reduce using rule 275 (number -> INTEGER .)
    GROUP           reduce using rule 275 (number -> INTEGER .)
    HAVING          reduce using rule 275 (number -> INTEGER .)
    THEN            reduce using rule 275 (number -> INTEGER .)
    CROSS           reduce using rule 275 (number -> INTEGER .)
    NATURAL         reduce using rule 275 (number -> INTEGER .)
    INNER           reduce using rule 275 (number -> INTEGER .)
    LEFT            reduce using rule 275 (number -> INTEGER .)
    RIGHT           reduce using rule 275 (number -> INTEGER .)
    FULL            reduce using rule 275 (number -> INTEGER .)
    JOIN            reduce using rule 275 (number -> INTEGER .)
    SET             reduce using rule 275 (number -> INTEGER .)
    WHERE           reduce using rule 275 (number -> INTEGER .)
    FORCE           reduce using rule 275 (number -> INTEGER .)
    VALUES          reduce using rule 275 (number -> INTEGER .)
    LPAREN          reduce using rule 275 (number -> INTEGER .)
    SELECT          reduce using rule 275 (number -> INTEGER .)
    ON              reduce using rule 275 (number -> INTEGER .)
    USING           reduce using rule 275 (number -> INTEGER .)
    ASC             reduce using rule 275 (number -> INTEGER .)
    DESC            reduce using rule 275 (number -> INTEGER .)
    NULLS           reduce using rule 275 (number -> INTEGER .)
    WHEN            reduce using rule 275 (number -> INTEGER .)
    END             reduce using rule 275 (number -> INTEGER .)
    ELSE            reduce using rule 275 (number -> INTEGER .)


state 183

    (256) boolean_value -> TRUE .

    ASTERISK        reduce using rule 256 (boolean_value -> TRUE .)
    SLASH           reduce using rule 256 (boolean_value -> TRUE .)
    PERCENT         reduce using rule 256 (boolean_value -> TRUE .)
    CONCAT          reduce using rule 256 (boolean_value -> TRUE .)
    PLUS            reduce using rule 256 (boolean_value -> TRUE .)
    MINUS           reduce using rule 256 (boolean_value -> TRUE .)
    AS              reduce using rule 256 (boolean_value -> TRUE .)
    IDENTIFIER      reduce using rule 256 (boolean_value -> TRUE .)
    DIGIT_IDENTIFIER reduce using rule 256 (boolean_value -> TRUE .)
    BACKQUOTED_IDENTIFIER reduce using rule 256 (boolean_value -> TRUE .)
    NON_RESERVED    reduce using rule 256 (boolean_value -> TRUE .)
    COMMA           reduce using rule 256 (boolean_value -> TRUE .)
    FROM            reduce using rule 256 (boolean_value -> TRUE .)
    INTERSECT       reduce using rule 256 (boolean_value -> TRUE .)
    UNION           reduce using rule 256 (boolean_value -> TRUE .)
    EXCEPT          reduce using rule 256 (boolean_value -> TRUE .)
    ORDER           reduce using rule 256 (boolean_value -> TRUE .)
    LIMIT           reduce using rule 256 (boolean_value -> TRUE .)
    FOR             reduce using rule 256 (boolean_value -> TRUE .)
    LOCK            reduce using rule 256 (boolean_value -> TRUE .)
    $end            reduce using rule 256 (boolean_value -> TRUE .)
    RPAREN          reduce using rule 256 (boolean_value -> TRUE .)
    REGEXP          reduce using rule 256 (boolean_value -> TRUE .)
    IS              reduce using rule 256 (boolean_value -> TRUE .)
    EQ              reduce using rule 256 (boolean_value -> TRUE .)
    NE              reduce using rule 256 (boolean_value -> TRUE .)
    LT              reduce using rule 256 (boolean_value -> TRUE .)
    LE              reduce using rule 256 (boolean_value -> TRUE .)
    GT              reduce using rule 256 (boolean_value -> TRUE .)
    GE              reduce using rule 256 (boolean_value -> TRUE .)
    NOT             reduce using rule 256 (boolean_value -> TRUE .)
    BETWEEN         reduce using rule 256 (boolean_value -> TRUE .)
    IN              reduce using rule 256 (boolean_value -> TRUE .)
    LIKE            reduce using rule 256 (boolean_value -> TRUE .)
    OR              reduce using rule 256 (boolean_value -> TRUE .)
    AND             reduce using rule 256 (boolean_value -> TRUE .)
    GROUP           reduce using rule 256 (boolean_value -> TRUE .)
    HAVING          reduce using rule 256 (boolean_value -> TRUE .)
    THEN            reduce using rule 256 (boolean_value -> TRUE .)
    CROSS           reduce using rule 256 (boolean_value -> TRUE .)
    NATURAL         reduce using rule 256 (boolean_value -> TRUE .)
    INNER           reduce using rule 256 (boolean_value -> TRUE .)
    LEFT            reduce using rule 256 (boolean_value -> TRUE .)
    RIGHT           reduce using rule 256 (boolean_value -> TRUE .)
    FULL            reduce using rule 256 (boolean_value -> TRUE .)
    JOIN            reduce using rule 256 (boolean_value -> TRUE .)
    SET             reduce using rule 256 (boolean_value -> TRUE .)
    WHERE           reduce using rule 256 (boolean_value -> TRUE .)
    FORCE           reduce using rule 256 (boolean_value -> TRUE .)
    VALUES          reduce using rule 256 (boolean_value -> TRUE .)
    LPAREN          reduce using rule 256 (boolean_value -> TRUE .)
    SELECT          reduce using rule 256 (boolean_value -> TRUE .)
    ON              reduce using rule 256 (boolean_value -> TRUE .)
    USING           reduce using rule 256 (boolean_value -> TRUE .)
    ASC             reduce using rule 256 (boolean_value -> TRUE .)
    DESC            reduce using rule 256 (boolean_value -> TRUE .)
    NULLS           reduce using rule 256 (boolean_value -> TRUE .)
    WHEN            reduce using rule 256 (boolean_value -> TRUE .)
    END             reduce using rule 256 (boolean_value -> TRUE .)
    ELSE            reduce using rule 256 (boolean_value -> TRUE .)


state 184

    (257) boolean_value -> FALSE .

    ASTERISK        reduce using rule 257 (boolean_value -> FALSE .)
    SLASH           reduce using rule 257 (boolean_value -> FALSE .)
    PERCENT         reduce using rule 257 (boolean_value -> FALSE .)
    CONCAT          reduce using rule 257 (boolean_value -> FALSE .)
    PLUS            reduce using rule 257 (boolean_value -> FALSE .)
    MINUS           reduce using rule 257 (boolean_value -> FALSE .)
    AS              reduce using rule 257 (boolean_value -> FALSE .)
    IDENTIFIER      reduce using rule 257 (boolean_value -> FALSE .)
    DIGIT_IDENTIFIER reduce using rule 257 (boolean_value -> FALSE .)
    BACKQUOTED_IDENTIFIER reduce using rule 257 (boolean_value -> FALSE .)
    NON_RESERVED    reduce using rule 257 (boolean_value -> FALSE .)
    COMMA           reduce using rule 257 (boolean_value -> FALSE .)
    FROM            reduce using rule 257 (boolean_value -> FALSE .)
    INTERSECT       reduce using rule 257 (boolean_value -> FALSE .)
    UNION           reduce using rule 257 (boolean_value -> FALSE .)
    EXCEPT          reduce using rule 257 (boolean_value -> FALSE .)
    ORDER           reduce using rule 257 (boolean_value -> FALSE .)
    LIMIT           reduce using rule 257 (boolean_value -> FALSE .)
    FOR             reduce using rule 257 (boolean_value -> FALSE .)
    LOCK            reduce using rule 257 (boolean_value -> FALSE .)
    $end            reduce using rule 257 (boolean_value -> FALSE .)
    RPAREN          reduce using rule 257 (boolean_value -> FALSE .)
    REGEXP          reduce using rule 257 (boolean_value -> FALSE .)
    IS              reduce using rule 257 (boolean_value -> FALSE .)
    EQ              reduce using rule 257 (boolean_value -> FALSE .)
    NE              reduce using rule 257 (boolean_value -> FALSE .)
    LT              reduce using rule 257 (boolean_value -> FALSE .)
    LE              reduce using rule 257 (boolean_value -> FALSE .)
    GT              reduce using rule 257 (boolean_value -> FALSE .)
    GE              reduce using rule 257 (boolean_value -> FALSE .)
    NOT             reduce using rule 257 (boolean_value -> FALSE .)
    BETWEEN         reduce using rule 257 (boolean_value -> FALSE .)
    IN              reduce using rule 257 (boolean_value -> FALSE .)
    LIKE            reduce using rule 257 (boolean_value -> FALSE .)
    OR              reduce using rule 257 (boolean_value -> FALSE .)
    AND             reduce using rule 257 (boolean_value -> FALSE .)
    GROUP           reduce using rule 257 (boolean_value -> FALSE .)
    HAVING          reduce using rule 257 (boolean_value -> FALSE .)
    THEN            reduce using rule 257 (boolean_value -> FALSE .)
    CROSS           reduce using rule 257 (boolean_value -> FALSE .)
    NATURAL         reduce using rule 257 (boolean_value -> FALSE .)
    INNER           reduce using rule 257 (boolean_value -> FALSE .)
    LEFT            reduce using rule 257 (boolean_value -> FALSE .)
    RIGHT           reduce using rule 257 (boolean_value -> FALSE .)
    FULL            reduce using rule 257 (boolean_value -> FALSE .)
    JOIN            reduce using rule 257 (boolean_value -> FALSE .)
    SET             reduce using rule 257 (boolean_value -> FALSE .)
    WHERE           reduce using rule 257 (boolean_value -> FALSE .)
    FORCE           reduce using rule 257 (boolean_value -> FALSE .)
    VALUES          reduce using rule 257 (boolean_value -> FALSE .)
    LPAREN          reduce using rule 257 (boolean_value -> FALSE .)
    SELECT          reduce using rule 257 (boolean_value -> FALSE .)
    ON              reduce using rule 257 (boolean_value -> FALSE .)
    USING           reduce using rule 257 (boolean_value -> FALSE .)
    ASC             reduce using rule 257 (boolean_value -> FALSE .)
    DESC            reduce using rule 257 (boolean_value -> FALSE .)
    NULLS           reduce using rule 257 (boolean_value -> FALSE .)
    WHEN            reduce using rule 257 (boolean_value -> FALSE .)
    END             reduce using rule 257 (boolean_value -> FALSE .)
    ELSE            reduce using rule 257 (boolean_value -> FALSE .)


state 185

    (223) simple_case -> CASE . value_expression when_clauses else_opt END
    (224) searched_case -> CASE . when_clauses else_opt END
    (188) value_expression -> . numeric_value_expression
    (226) when_clauses -> . when_clauses when_clause
    (227) when_clauses -> . when_clause
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (228) when_clause -> . WHEN search_condition THEN value_expression
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    WHEN            shift and go to state 255
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 252
    when_clauses                   shift and go to state 253
    numeric_value_expression       shift and go to state 87
    when_clause                    shift and go to state 254
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 186

    (265) qualified_name -> qualified_name PERIOD qualified_name .
    (265) qualified_name -> qualified_name . PERIOD qualified_name

  ! shift/reduce conflict for PERIOD resolved as shift
    AS              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    IDENTIFIER      reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    DIGIT_IDENTIFIER reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    ASTERISK        reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    BACKQUOTED_IDENTIFIER reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    NON_RESERVED    reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    CROSS           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    NATURAL         reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    INNER           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    LEFT            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    RIGHT           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    FULL            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    JOIN            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    INTERSECT       reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    UNION           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    EXCEPT          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    ORDER           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    LIMIT           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    FOR             reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    LOCK            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    $end            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    RPAREN          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    SET             reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    COMMA           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    WHERE           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    LPAREN          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    SLASH           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    PERCENT         reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    CONCAT          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    PLUS            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    MINUS           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    FROM            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    REGEXP          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    IS              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    EQ              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    NE              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    LT              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    LE              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    GT              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    GE              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    NOT             reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    BETWEEN         reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    IN              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    LIKE            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    OR              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    AND             reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    GROUP           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    HAVING          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    THEN            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    FORCE           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    VALUES          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    SELECT          reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    ON              reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    USING           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    ASC             reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    DESC            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    NULLS           reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    WHEN            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    END             reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    ELSE            reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .)
    PERIOD          shift and go to state 96

  ! PERIOD          [ reduce using rule 265 (qualified_name -> qualified_name PERIOD qualified_name .) ]


state 187

    (158) alias -> as_opt identifier .

    CROSS           reduce using rule 158 (alias -> as_opt identifier .)
    NATURAL         reduce using rule 158 (alias -> as_opt identifier .)
    INNER           reduce using rule 158 (alias -> as_opt identifier .)
    LEFT            reduce using rule 158 (alias -> as_opt identifier .)
    RIGHT           reduce using rule 158 (alias -> as_opt identifier .)
    FULL            reduce using rule 158 (alias -> as_opt identifier .)
    JOIN            reduce using rule 158 (alias -> as_opt identifier .)
    SET             reduce using rule 158 (alias -> as_opt identifier .)
    COMMA           reduce using rule 158 (alias -> as_opt identifier .)
    WHERE           reduce using rule 158 (alias -> as_opt identifier .)
    ORDER           reduce using rule 158 (alias -> as_opt identifier .)
    LIMIT           reduce using rule 158 (alias -> as_opt identifier .)
    $end            reduce using rule 158 (alias -> as_opt identifier .)
    FORCE           reduce using rule 158 (alias -> as_opt identifier .)
    GROUP           reduce using rule 158 (alias -> as_opt identifier .)
    HAVING          reduce using rule 158 (alias -> as_opt identifier .)
    FOR             reduce using rule 158 (alias -> as_opt identifier .)
    LOCK            reduce using rule 158 (alias -> as_opt identifier .)
    INTERSECT       reduce using rule 158 (alias -> as_opt identifier .)
    UNION           reduce using rule 158 (alias -> as_opt identifier .)
    EXCEPT          reduce using rule 158 (alias -> as_opt identifier .)
    RPAREN          reduce using rule 158 (alias -> as_opt identifier .)
    VALUES          reduce using rule 158 (alias -> as_opt identifier .)
    LPAREN          reduce using rule 158 (alias -> as_opt identifier .)
    SELECT          reduce using rule 158 (alias -> as_opt identifier .)
    ON              reduce using rule 158 (alias -> as_opt identifier .)
    USING           reduce using rule 158 (alias -> as_opt identifier .)
    FROM            reduce using rule 158 (alias -> as_opt identifier .)


state 188

    (7) create_table -> CREATE TABLE identifier LPAREN . column_list RPAREN create_table_end
    (8) create_table -> CREATE TABLE identifier LPAREN . column_list COMMA primary_clause RPAREN create_table_end
    (11) column_list -> . column
    (12) column_list -> . column_list COMMA column
    (13) column -> . identifier column_type
    (14) column -> . identifier column_type UNIQUE
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 256
    column_list                    shift and go to state 257
    column                         shift and go to state 258
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 189

    (67) subquery -> LPAREN query_expression order_by_opt limit_opt . RPAREN

    RPAREN          shift and go to state 259


state 190

    (66) cursor_specification -> query_expression order_by_opt limit_opt for_update_opt .

    $end            reduce using rule 66 (cursor_specification -> query_expression order_by_opt limit_opt for_update_opt .)


state 191

    (68) for_update_opt -> FOR . UPDATE
    (69) for_update_opt -> FOR . UPDATE NOWAIT
    (70) for_update_opt -> FOR . UPDATE WAIT INTEGER

    UPDATE          shift and go to state 260


state 192

    (71) for_update_opt -> LOCK . IN SHARE MODE

    IN              shift and go to state 261


state 193

    (72) for_update_opt -> empty .

    $end            reduce using rule 72 (for_update_opt -> empty .)
    INTERSECT       reduce using rule 72 (for_update_opt -> empty .)
    UNION           reduce using rule 72 (for_update_opt -> empty .)
    EXCEPT          reduce using rule 72 (for_update_opt -> empty .)
    ORDER           reduce using rule 72 (for_update_opt -> empty .)
    LIMIT           reduce using rule 72 (for_update_opt -> empty .)
    FOR             reduce using rule 72 (for_update_opt -> empty .)
    LOCK            reduce using rule 72 (for_update_opt -> empty .)
    RPAREN          reduce using rule 72 (for_update_opt -> empty .)


state 194

    (87) limit_opt -> LIMIT INTEGER .
    (88) limit_opt -> LIMIT INTEGER . COMMA INTEGER
    (92) limit_opt -> LIMIT INTEGER . OFFSET INTEGER

    FOR             reduce using rule 87 (limit_opt -> LIMIT INTEGER .)
    LOCK            reduce using rule 87 (limit_opt -> LIMIT INTEGER .)
    $end            reduce using rule 87 (limit_opt -> LIMIT INTEGER .)
    RPAREN          reduce using rule 87 (limit_opt -> LIMIT INTEGER .)
    COMMA           shift and go to state 262
    OFFSET          shift and go to state 263


state 195

    (89) limit_opt -> LIMIT QM .
    (90) limit_opt -> LIMIT QM . COMMA QM

    FOR             reduce using rule 89 (limit_opt -> LIMIT QM .)
    LOCK            reduce using rule 89 (limit_opt -> LIMIT QM .)
    $end            reduce using rule 89 (limit_opt -> LIMIT QM .)
    RPAREN          reduce using rule 89 (limit_opt -> LIMIT QM .)
    COMMA           shift and go to state 264


state 196

    (91) limit_opt -> LIMIT ALL .

    FOR             reduce using rule 91 (limit_opt -> LIMIT ALL .)
    LOCK            reduce using rule 91 (limit_opt -> LIMIT ALL .)
    $end            reduce using rule 91 (limit_opt -> LIMIT ALL .)
    RPAREN          reduce using rule 91 (limit_opt -> LIMIT ALL .)


state 197

    (76) order_by_opt -> ORDER BY sort_items .
    (79) sort_items -> sort_items . COMMA sort_item

    LIMIT           reduce using rule 76 (order_by_opt -> ORDER BY sort_items .)
    FOR             reduce using rule 76 (order_by_opt -> ORDER BY sort_items .)
    LOCK            reduce using rule 76 (order_by_opt -> ORDER BY sort_items .)
    $end            reduce using rule 76 (order_by_opt -> ORDER BY sort_items .)
    RPAREN          reduce using rule 76 (order_by_opt -> ORDER BY sort_items .)
    COMMA           shift and go to state 265


state 198

    (78) sort_items -> sort_item .

    COMMA           reduce using rule 78 (sort_items -> sort_item .)
    LIMIT           reduce using rule 78 (sort_items -> sort_item .)
    FOR             reduce using rule 78 (sort_items -> sort_item .)
    LOCK            reduce using rule 78 (sort_items -> sort_item .)
    $end            reduce using rule 78 (sort_items -> sort_item .)
    RPAREN          reduce using rule 78 (sort_items -> sort_item .)


state 199

    (80) sort_item -> value_expression . order_opt null_ordering_opt
    (81) order_opt -> . ASC
    (82) order_opt -> . DESC
    (83) order_opt -> . empty
    (276) empty -> .

    ASC             shift and go to state 267
    DESC            shift and go to state 268
    NULLS           reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    order_opt                      shift and go to state 266
    empty                          shift and go to state 269

state 200

    (61) delete -> DELETE FROM relations where_opt . order_by_opt limit_opt
    (76) order_by_opt -> . ORDER BY sort_items
    (77) order_by_opt -> . empty
    (276) empty -> .

    ORDER           shift and go to state 52
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)

    order_by_opt                   shift and go to state 270
    empty                          shift and go to state 53

state 201

    (109) where_opt -> WHERE . search_condition
    (110) where_opt -> WHERE . LPAREN search_condition RPAREN
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 272
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 271
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 202

    (111) where_opt -> empty .

    ORDER           reduce using rule 111 (where_opt -> empty .)
    LIMIT           reduce using rule 111 (where_opt -> empty .)
    $end            reduce using rule 111 (where_opt -> empty .)
    GROUP           reduce using rule 111 (where_opt -> empty .)
    HAVING          reduce using rule 111 (where_opt -> empty .)
    FOR             reduce using rule 111 (where_opt -> empty .)
    LOCK            reduce using rule 111 (where_opt -> empty .)
    INTERSECT       reduce using rule 111 (where_opt -> empty .)
    UNION           reduce using rule 111 (where_opt -> empty .)
    EXCEPT          reduce using rule 111 (where_opt -> empty .)
    RPAREN          reduce using rule 111 (where_opt -> empty .)


state 203

    (62) update -> UPDATE relations SET update_set_list . where_opt order_by_opt limit_opt
    (64) update_set_list -> update_set_list . COMMA update_set
    (109) where_opt -> . WHERE search_condition
    (110) where_opt -> . WHERE LPAREN search_condition RPAREN
    (111) where_opt -> . empty
    (276) empty -> .

    COMMA           shift and go to state 274
    WHERE           shift and go to state 201
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)

    where_opt                      shift and go to state 273
    empty                          shift and go to state 202

state 204

    (63) update_set_list -> update_set .

    COMMA           reduce using rule 63 (update_set_list -> update_set .)
    WHERE           reduce using rule 63 (update_set_list -> update_set .)
    ORDER           reduce using rule 63 (update_set_list -> update_set .)
    LIMIT           reduce using rule 63 (update_set_list -> update_set .)
    $end            reduce using rule 63 (update_set_list -> update_set .)


state 205

    (65) update_set -> comparison_predicate .

    COMMA           reduce using rule 65 (update_set -> comparison_predicate .)
    WHERE           reduce using rule 65 (update_set -> comparison_predicate .)
    ORDER           reduce using rule 65 (update_set -> comparison_predicate .)
    LIMIT           reduce using rule 65 (update_set -> comparison_predicate .)
    $end            reduce using rule 65 (update_set -> comparison_predicate .)


state 206

    (177) comparison_predicate -> value_expression . comparison_operator value_expression
    (246) comparison_operator -> . EQ
    (247) comparison_operator -> . NE
    (248) comparison_operator -> . LT
    (249) comparison_operator -> . LE
    (250) comparison_operator -> . GT
    (251) comparison_operator -> . GE

    EQ              shift and go to state 221
    NE              shift and go to state 222
    LT              shift and go to state 223
    LE              shift and go to state 224
    GT              shift and go to state 225
    GE              shift and go to state 226

    comparison_operator            shift and go to state 217

state 207

    (130) relations -> relations COMMA table_reference .
    (139) cross_join -> table_reference . CROSS JOIN table_primary
    (140) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (141) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (142) join_type -> . INNER
    (143) join_type -> . LEFT outer_opt
    (144) join_type -> . RIGHT outer_opt
    (145) join_type -> . FULL outer_opt
    (146) join_type -> . empty
    (276) empty -> .

    SET             reduce using rule 130 (relations -> relations COMMA table_reference .)
    COMMA           reduce using rule 130 (relations -> relations COMMA table_reference .)
    WHERE           reduce using rule 130 (relations -> relations COMMA table_reference .)
    ORDER           reduce using rule 130 (relations -> relations COMMA table_reference .)
    LIMIT           reduce using rule 130 (relations -> relations COMMA table_reference .)
    $end            reduce using rule 130 (relations -> relations COMMA table_reference .)
    FORCE           reduce using rule 130 (relations -> relations COMMA table_reference .)
    GROUP           reduce using rule 130 (relations -> relations COMMA table_reference .)
    HAVING          reduce using rule 130 (relations -> relations COMMA table_reference .)
    FOR             reduce using rule 130 (relations -> relations COMMA table_reference .)
    LOCK            reduce using rule 130 (relations -> relations COMMA table_reference .)
    INTERSECT       reduce using rule 130 (relations -> relations COMMA table_reference .)
    UNION           reduce using rule 130 (relations -> relations COMMA table_reference .)
    EXCEPT          reduce using rule 130 (relations -> relations COMMA table_reference .)
    RPAREN          reduce using rule 130 (relations -> relations COMMA table_reference .)
    CROSS           shift and go to state 62
    NATURAL         shift and go to state 64
    INNER           shift and go to state 65
    LEFT            shift and go to state 66
    RIGHT           shift and go to state 67
    FULL            shift and go to state 68
    JOIN            reduce using rule 276 (empty -> .)

    join_type                      shift and go to state 63
    empty                          shift and go to state 69

state 208

    (53) insert -> INSERT ignore INTO table_reference . VALUES LPAREN insert_value RPAREN
    (54) insert -> INSERT ignore INTO table_reference . LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (55) insert -> INSERT ignore INTO table_reference . LPAREN index_column_list RPAREN query_spec
    (56) insert -> INSERT ignore INTO table_reference . query_spec
    (139) cross_join -> table_reference . CROSS JOIN table_primary
    (140) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (141) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (108) query_spec -> . SELECT select_items table_expression_opt
    (142) join_type -> . INNER
    (143) join_type -> . LEFT outer_opt
    (144) join_type -> . RIGHT outer_opt
    (145) join_type -> . FULL outer_opt
    (146) join_type -> . empty
    (276) empty -> .

    VALUES          shift and go to state 275
    LPAREN          shift and go to state 276
    CROSS           shift and go to state 62
    NATURAL         shift and go to state 64
    SELECT          shift and go to state 37
    INNER           shift and go to state 65
    LEFT            shift and go to state 66
    RIGHT           shift and go to state 67
    FULL            shift and go to state 68
    JOIN            reduce using rule 276 (empty -> .)

    query_spec                     shift and go to state 277
    join_type                      shift and go to state 63
    empty                          shift and go to state 69

state 209

    (139) cross_join -> table_reference CROSS JOIN table_primary .

    ORDER           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    LIMIT           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    FOR             reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    LOCK            reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    $end            reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    CROSS           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    NATURAL         reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    INNER           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    LEFT            reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    RIGHT           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    FULL            reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    JOIN            reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    RPAREN          reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    SET             reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    COMMA           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    WHERE           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    FORCE           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    GROUP           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    HAVING          reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    INTERSECT       reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    UNION           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    EXCEPT          reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    VALUES          reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    LPAREN          reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    SELECT          reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    ON              reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)
    USING           reduce using rule 139 (cross_join -> table_reference CROSS JOIN table_primary .)


state 210

    (140) qualified_join -> table_reference join_type JOIN table_reference . join_criteria
    (139) cross_join -> table_reference . CROSS JOIN table_primary
    (140) qualified_join -> table_reference . join_type JOIN table_reference join_criteria
    (141) natural_join -> table_reference . NATURAL join_type JOIN table_primary
    (149) join_criteria -> . ON search_condition
    (150) join_criteria -> . USING LPAREN join_columns RPAREN
    (151) join_criteria -> . empty
    (142) join_type -> . INNER
    (143) join_type -> . LEFT outer_opt
    (144) join_type -> . RIGHT outer_opt
    (145) join_type -> . FULL outer_opt
    (146) join_type -> . empty
    (276) empty -> .

  ! shift/reduce conflict for CROSS resolved as shift
  ! shift/reduce conflict for NATURAL resolved as shift
  ! shift/reduce conflict for INNER resolved as shift
  ! shift/reduce conflict for LEFT resolved as shift
  ! shift/reduce conflict for RIGHT resolved as shift
  ! shift/reduce conflict for FULL resolved as shift
  ! shift/reduce conflict for ON resolved as shift
  ! shift/reduce conflict for USING resolved as shift
    CROSS           shift and go to state 62
    NATURAL         shift and go to state 64
    ON              shift and go to state 279
    USING           shift and go to state 280
    INNER           shift and go to state 65
    LEFT            shift and go to state 66
    RIGHT           shift and go to state 67
    FULL            shift and go to state 68
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    JOIN            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    SET             reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    WHERE           reduce using rule 276 (empty -> .)
    FORCE           reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    VALUES          reduce using rule 276 (empty -> .)
    LPAREN          reduce using rule 276 (empty -> .)
    SELECT          reduce using rule 276 (empty -> .)

  ! CROSS           [ reduce using rule 276 (empty -> .) ]
  ! NATURAL         [ reduce using rule 276 (empty -> .) ]
  ! INNER           [ reduce using rule 276 (empty -> .) ]
  ! LEFT            [ reduce using rule 276 (empty -> .) ]
  ! RIGHT           [ reduce using rule 276 (empty -> .) ]
  ! FULL            [ reduce using rule 276 (empty -> .) ]
  ! ON              [ reduce using rule 276 (empty -> .) ]
  ! USING           [ reduce using rule 276 (empty -> .) ]

    join_type                      shift and go to state 63
    join_criteria                  shift and go to state 278
    empty                          shift and go to state 281

state 211

    (141) natural_join -> table_reference NATURAL join_type JOIN . table_primary
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    LPAREN          shift and go to state 58
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    table_primary                  shift and go to state 282
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 212

    (106) values_list -> values_list COMMA expression .

    COMMA           reduce using rule 106 (values_list -> values_list COMMA expression .)
    INTERSECT       reduce using rule 106 (values_list -> values_list COMMA expression .)
    UNION           reduce using rule 106 (values_list -> values_list COMMA expression .)
    EXCEPT          reduce using rule 106 (values_list -> values_list COMMA expression .)
    ORDER           reduce using rule 106 (values_list -> values_list COMMA expression .)
    LIMIT           reduce using rule 106 (values_list -> values_list COMMA expression .)
    FOR             reduce using rule 106 (values_list -> values_list COMMA expression .)
    LOCK            reduce using rule 106 (values_list -> values_list COMMA expression .)
    $end            reduce using rule 106 (values_list -> values_list COMMA expression .)
    RPAREN          reduce using rule 106 (values_list -> values_list COMMA expression .)


state 213

    (162) search_condition -> search_condition OR search_condition .
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    INTERSECT       reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    UNION           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    EXCEPT          reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    ORDER           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    LIMIT           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    FOR             reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    LOCK            reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    $end            reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    RPAREN          reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    GROUP           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    HAVING          reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    THEN            reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    CROSS           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    NATURAL         reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    INNER           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    LEFT            reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    RIGHT           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    FULL            reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    JOIN            reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    SET             reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    WHERE           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    FORCE           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    VALUES          reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    LPAREN          reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    SELECT          reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    ON              reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    USING           reduce using rule 162 (search_condition -> search_condition OR search_condition .)
    OR              shift and go to state 122
    AND             shift and go to state 123

  ! OR              [ reduce using rule 162 (search_condition -> search_condition OR search_condition .) ]
  ! AND             [ reduce using rule 162 (search_condition -> search_condition OR search_condition .) ]


state 214

    (163) search_condition -> search_condition AND search_condition .
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COMMA           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    INTERSECT       reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    UNION           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    EXCEPT          reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    ORDER           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    LIMIT           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    FOR             reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    LOCK            reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    $end            reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    RPAREN          reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    GROUP           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    HAVING          reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    THEN            reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    CROSS           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    NATURAL         reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    INNER           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    LEFT            reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    RIGHT           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    FULL            reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    JOIN            reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    SET             reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    WHERE           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    FORCE           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    VALUES          reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    LPAREN          reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    SELECT          reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    ON              reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    USING           reduce using rule 163 (search_condition -> search_condition AND search_condition .)
    OR              shift and go to state 122
    AND             shift and go to state 123

  ! OR              [ reduce using rule 163 (search_condition -> search_condition AND search_condition .) ]
  ! AND             [ reduce using rule 163 (search_condition -> search_condition AND search_condition .) ]


state 215

    (161) search_condition -> LPAREN search_condition RPAREN .

    OR              reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    AND             reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    COMMA           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    INTERSECT       reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    UNION           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    EXCEPT          reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    ORDER           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    LIMIT           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    FOR             reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    LOCK            reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    $end            reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    RPAREN          reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    GROUP           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    HAVING          reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    THEN            reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    CROSS           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    NATURAL         reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    INNER           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    LEFT            reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    RIGHT           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    FULL            reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    JOIN            reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    SET             reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    WHERE           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    FORCE           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    VALUES          reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    LPAREN          reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    SELECT          reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    ON              reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    USING           reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)


state 216

    (165) boolean_term -> LPAREN boolean_term RPAREN .

    OR              reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    AND             reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    COMMA           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    INTERSECT       reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    UNION           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    EXCEPT          reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    ORDER           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    LIMIT           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    FOR             reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    LOCK            reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    $end            reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    RPAREN          reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    GROUP           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    HAVING          reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    THEN            reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    CROSS           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    NATURAL         reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    INNER           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    LEFT            reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    RIGHT           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    FULL            reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    JOIN            reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    SET             reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    WHERE           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    FORCE           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    VALUES          reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    LPAREN          reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    SELECT          reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    ON              reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)
    USING           reduce using rule 165 (boolean_term -> LPAREN boolean_term RPAREN .)


state 217

    (177) comparison_predicate -> value_expression comparison_operator . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 283
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 218

    (178) between_predicate -> value_expression not_opt . BETWEEN value_expression AND value_expression
    (179) in_predicate -> value_expression not_opt . IN in_value
    (184) like_predicate -> value_expression not_opt . LIKE value_expression

    BETWEEN         shift and go to state 284
    IN              shift and go to state 285
    LIKE            shift and go to state 286


state 219

    (185) regexp_predicate -> value_expression REGEXP . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 287
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 220

    (186) null_predicate -> value_expression IS . not_opt NULL
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

    NOT             shift and go to state 77
    NULL            reduce using rule 276 (empty -> .)

    not_opt                        shift and go to state 288
    empty                          shift and go to state 78

state 221

    (246) comparison_operator -> EQ .

    PLUS            reduce using rule 246 (comparison_operator -> EQ .)
    MINUS           reduce using rule 246 (comparison_operator -> EQ .)
    LPAREN          reduce using rule 246 (comparison_operator -> EQ .)
    NULL            reduce using rule 246 (comparison_operator -> EQ .)
    SCONST          reduce using rule 246 (comparison_operator -> EQ .)
    QUOTED_IDENTIFIER reduce using rule 246 (comparison_operator -> EQ .)
    QM              reduce using rule 246 (comparison_operator -> EQ .)
    CURRENT_DATE    reduce using rule 246 (comparison_operator -> EQ .)
    CURRENT_TIME    reduce using rule 246 (comparison_operator -> EQ .)
    CURRENT_TIMESTAMP reduce using rule 246 (comparison_operator -> EQ .)
    LOCALTIME       reduce using rule 246 (comparison_operator -> EQ .)
    LOCALTIMESTAMP  reduce using rule 246 (comparison_operator -> EQ .)
    CAST            reduce using rule 246 (comparison_operator -> EQ .)
    DECIMAL         reduce using rule 246 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 246 (comparison_operator -> EQ .)
    TRUE            reduce using rule 246 (comparison_operator -> EQ .)
    FALSE           reduce using rule 246 (comparison_operator -> EQ .)
    IDENTIFIER      reduce using rule 246 (comparison_operator -> EQ .)
    DIGIT_IDENTIFIER reduce using rule 246 (comparison_operator -> EQ .)
    ASTERISK        reduce using rule 246 (comparison_operator -> EQ .)
    CASE            reduce using rule 246 (comparison_operator -> EQ .)
    BACKQUOTED_IDENTIFIER reduce using rule 246 (comparison_operator -> EQ .)
    NON_RESERVED    reduce using rule 246 (comparison_operator -> EQ .)


state 222

    (247) comparison_operator -> NE .

    PLUS            reduce using rule 247 (comparison_operator -> NE .)
    MINUS           reduce using rule 247 (comparison_operator -> NE .)
    LPAREN          reduce using rule 247 (comparison_operator -> NE .)
    NULL            reduce using rule 247 (comparison_operator -> NE .)
    SCONST          reduce using rule 247 (comparison_operator -> NE .)
    QUOTED_IDENTIFIER reduce using rule 247 (comparison_operator -> NE .)
    QM              reduce using rule 247 (comparison_operator -> NE .)
    CURRENT_DATE    reduce using rule 247 (comparison_operator -> NE .)
    CURRENT_TIME    reduce using rule 247 (comparison_operator -> NE .)
    CURRENT_TIMESTAMP reduce using rule 247 (comparison_operator -> NE .)
    LOCALTIME       reduce using rule 247 (comparison_operator -> NE .)
    LOCALTIMESTAMP  reduce using rule 247 (comparison_operator -> NE .)
    CAST            reduce using rule 247 (comparison_operator -> NE .)
    DECIMAL         reduce using rule 247 (comparison_operator -> NE .)
    INTEGER         reduce using rule 247 (comparison_operator -> NE .)
    TRUE            reduce using rule 247 (comparison_operator -> NE .)
    FALSE           reduce using rule 247 (comparison_operator -> NE .)
    IDENTIFIER      reduce using rule 247 (comparison_operator -> NE .)
    DIGIT_IDENTIFIER reduce using rule 247 (comparison_operator -> NE .)
    ASTERISK        reduce using rule 247 (comparison_operator -> NE .)
    CASE            reduce using rule 247 (comparison_operator -> NE .)
    BACKQUOTED_IDENTIFIER reduce using rule 247 (comparison_operator -> NE .)
    NON_RESERVED    reduce using rule 247 (comparison_operator -> NE .)


state 223

    (248) comparison_operator -> LT .

    PLUS            reduce using rule 248 (comparison_operator -> LT .)
    MINUS           reduce using rule 248 (comparison_operator -> LT .)
    LPAREN          reduce using rule 248 (comparison_operator -> LT .)
    NULL            reduce using rule 248 (comparison_operator -> LT .)
    SCONST          reduce using rule 248 (comparison_operator -> LT .)
    QUOTED_IDENTIFIER reduce using rule 248 (comparison_operator -> LT .)
    QM              reduce using rule 248 (comparison_operator -> LT .)
    CURRENT_DATE    reduce using rule 248 (comparison_operator -> LT .)
    CURRENT_TIME    reduce using rule 248 (comparison_operator -> LT .)
    CURRENT_TIMESTAMP reduce using rule 248 (comparison_operator -> LT .)
    LOCALTIME       reduce using rule 248 (comparison_operator -> LT .)
    LOCALTIMESTAMP  reduce using rule 248 (comparison_operator -> LT .)
    CAST            reduce using rule 248 (comparison_operator -> LT .)
    DECIMAL         reduce using rule 248 (comparison_operator -> LT .)
    INTEGER         reduce using rule 248 (comparison_operator -> LT .)
    TRUE            reduce using rule 248 (comparison_operator -> LT .)
    FALSE           reduce using rule 248 (comparison_operator -> LT .)
    IDENTIFIER      reduce using rule 248 (comparison_operator -> LT .)
    DIGIT_IDENTIFIER reduce using rule 248 (comparison_operator -> LT .)
    ASTERISK        reduce using rule 248 (comparison_operator -> LT .)
    CASE            reduce using rule 248 (comparison_operator -> LT .)
    BACKQUOTED_IDENTIFIER reduce using rule 248 (comparison_operator -> LT .)
    NON_RESERVED    reduce using rule 248 (comparison_operator -> LT .)


state 224

    (249) comparison_operator -> LE .

    PLUS            reduce using rule 249 (comparison_operator -> LE .)
    MINUS           reduce using rule 249 (comparison_operator -> LE .)
    LPAREN          reduce using rule 249 (comparison_operator -> LE .)
    NULL            reduce using rule 249 (comparison_operator -> LE .)
    SCONST          reduce using rule 249 (comparison_operator -> LE .)
    QUOTED_IDENTIFIER reduce using rule 249 (comparison_operator -> LE .)
    QM              reduce using rule 249 (comparison_operator -> LE .)
    CURRENT_DATE    reduce using rule 249 (comparison_operator -> LE .)
    CURRENT_TIME    reduce using rule 249 (comparison_operator -> LE .)
    CURRENT_TIMESTAMP reduce using rule 249 (comparison_operator -> LE .)
    LOCALTIME       reduce using rule 249 (comparison_operator -> LE .)
    LOCALTIMESTAMP  reduce using rule 249 (comparison_operator -> LE .)
    CAST            reduce using rule 249 (comparison_operator -> LE .)
    DECIMAL         reduce using rule 249 (comparison_operator -> LE .)
    INTEGER         reduce using rule 249 (comparison_operator -> LE .)
    TRUE            reduce using rule 249 (comparison_operator -> LE .)
    FALSE           reduce using rule 249 (comparison_operator -> LE .)
    IDENTIFIER      reduce using rule 249 (comparison_operator -> LE .)
    DIGIT_IDENTIFIER reduce using rule 249 (comparison_operator -> LE .)
    ASTERISK        reduce using rule 249 (comparison_operator -> LE .)
    CASE            reduce using rule 249 (comparison_operator -> LE .)
    BACKQUOTED_IDENTIFIER reduce using rule 249 (comparison_operator -> LE .)
    NON_RESERVED    reduce using rule 249 (comparison_operator -> LE .)


state 225

    (250) comparison_operator -> GT .

    PLUS            reduce using rule 250 (comparison_operator -> GT .)
    MINUS           reduce using rule 250 (comparison_operator -> GT .)
    LPAREN          reduce using rule 250 (comparison_operator -> GT .)
    NULL            reduce using rule 250 (comparison_operator -> GT .)
    SCONST          reduce using rule 250 (comparison_operator -> GT .)
    QUOTED_IDENTIFIER reduce using rule 250 (comparison_operator -> GT .)
    QM              reduce using rule 250 (comparison_operator -> GT .)
    CURRENT_DATE    reduce using rule 250 (comparison_operator -> GT .)
    CURRENT_TIME    reduce using rule 250 (comparison_operator -> GT .)
    CURRENT_TIMESTAMP reduce using rule 250 (comparison_operator -> GT .)
    LOCALTIME       reduce using rule 250 (comparison_operator -> GT .)
    LOCALTIMESTAMP  reduce using rule 250 (comparison_operator -> GT .)
    CAST            reduce using rule 250 (comparison_operator -> GT .)
    DECIMAL         reduce using rule 250 (comparison_operator -> GT .)
    INTEGER         reduce using rule 250 (comparison_operator -> GT .)
    TRUE            reduce using rule 250 (comparison_operator -> GT .)
    FALSE           reduce using rule 250 (comparison_operator -> GT .)
    IDENTIFIER      reduce using rule 250 (comparison_operator -> GT .)
    DIGIT_IDENTIFIER reduce using rule 250 (comparison_operator -> GT .)
    ASTERISK        reduce using rule 250 (comparison_operator -> GT .)
    CASE            reduce using rule 250 (comparison_operator -> GT .)
    BACKQUOTED_IDENTIFIER reduce using rule 250 (comparison_operator -> GT .)
    NON_RESERVED    reduce using rule 250 (comparison_operator -> GT .)


state 226

    (251) comparison_operator -> GE .

    PLUS            reduce using rule 251 (comparison_operator -> GE .)
    MINUS           reduce using rule 251 (comparison_operator -> GE .)
    LPAREN          reduce using rule 251 (comparison_operator -> GE .)
    NULL            reduce using rule 251 (comparison_operator -> GE .)
    SCONST          reduce using rule 251 (comparison_operator -> GE .)
    QUOTED_IDENTIFIER reduce using rule 251 (comparison_operator -> GE .)
    QM              reduce using rule 251 (comparison_operator -> GE .)
    CURRENT_DATE    reduce using rule 251 (comparison_operator -> GE .)
    CURRENT_TIME    reduce using rule 251 (comparison_operator -> GE .)
    CURRENT_TIMESTAMP reduce using rule 251 (comparison_operator -> GE .)
    LOCALTIME       reduce using rule 251 (comparison_operator -> GE .)
    LOCALTIMESTAMP  reduce using rule 251 (comparison_operator -> GE .)
    CAST            reduce using rule 251 (comparison_operator -> GE .)
    DECIMAL         reduce using rule 251 (comparison_operator -> GE .)
    INTEGER         reduce using rule 251 (comparison_operator -> GE .)
    TRUE            reduce using rule 251 (comparison_operator -> GE .)
    FALSE           reduce using rule 251 (comparison_operator -> GE .)
    IDENTIFIER      reduce using rule 251 (comparison_operator -> GE .)
    DIGIT_IDENTIFIER reduce using rule 251 (comparison_operator -> GE .)
    ASTERISK        reduce using rule 251 (comparison_operator -> GE .)
    CASE            reduce using rule 251 (comparison_operator -> GE .)
    BACKQUOTED_IDENTIFIER reduce using rule 251 (comparison_operator -> GE .)
    NON_RESERVED    reduce using rule 251 (comparison_operator -> GE .)


state 227

    (187) exists_predicate -> EXISTS subquery .

    OR              reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    AND             reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    COMMA           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    INTERSECT       reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    UNION           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    EXCEPT          reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    ORDER           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    LIMIT           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    FOR             reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    LOCK            reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    $end            reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    RPAREN          reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    GROUP           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    HAVING          reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    THEN            reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    CROSS           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    NATURAL         reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    INNER           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    LEFT            reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    RIGHT           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    FULL            reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    JOIN            reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    SET             reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    WHERE           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    FORCE           reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    VALUES          reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    LPAREN          reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    SELECT          reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    ON              reduce using rule 187 (exists_predicate -> EXISTS subquery .)
    USING           reduce using rule 187 (exists_predicate -> EXISTS subquery .)


state 228

    (95) nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .
    (98) nonjoin_query_term -> nonjoin_query_term . INTERSECT set_quantifier_opt nonjoin_query_primary

    UNION           reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    EXCEPT          reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    ORDER           reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    LIMIT           reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    FOR             reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    LOCK            reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    $end            reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    RPAREN          reduce using rule 95 (nonjoin_query_expression -> nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term .)
    INTERSECT       shift and go to state 81


state 229

    (100) nonjoin_query_primary -> LPAREN . nonjoin_query_expression RPAREN
    (94) nonjoin_query_expression -> . nonjoin_query_term
    (95) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list

    LPAREN          shift and go to state 229
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21

    nonjoin_query_expression       shift and go to state 289
    nonjoin_query_term             shift and go to state 26
    nonjoin_query_primary          shift and go to state 30
    simple_table                   shift and go to state 32
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34

state 230

    (96) nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .
    (98) nonjoin_query_term -> nonjoin_query_term . INTERSECT set_quantifier_opt nonjoin_query_primary

    UNION           reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    EXCEPT          reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    ORDER           reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    LIMIT           reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    FOR             reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    LOCK            reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    $end            reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    RPAREN          reduce using rule 96 (nonjoin_query_expression -> nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term .)
    INTERSECT       shift and go to state 81


state 231

    (98) nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .

    INTERSECT       reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    UNION           reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    EXCEPT          reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    ORDER           reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    LIMIT           reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    FOR             reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    LOCK            reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    $end            reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)
    RPAREN          reduce using rule 98 (nonjoin_query_term -> nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary .)


state 232

    (121) select_items -> select_items COMMA select_item .

    COMMA           reduce using rule 121 (select_items -> select_items COMMA select_item .)
    FROM            reduce using rule 121 (select_items -> select_items COMMA select_item .)
    INTERSECT       reduce using rule 121 (select_items -> select_items COMMA select_item .)
    UNION           reduce using rule 121 (select_items -> select_items COMMA select_item .)
    EXCEPT          reduce using rule 121 (select_items -> select_items COMMA select_item .)
    ORDER           reduce using rule 121 (select_items -> select_items COMMA select_item .)
    LIMIT           reduce using rule 121 (select_items -> select_items COMMA select_item .)
    FOR             reduce using rule 121 (select_items -> select_items COMMA select_item .)
    LOCK            reduce using rule 121 (select_items -> select_items COMMA select_item .)
    $end            reduce using rule 121 (select_items -> select_items COMMA select_item .)
    RPAREN          reduce using rule 121 (select_items -> select_items COMMA select_item .)


state 233

    (126) table_expression_opt -> FROM relations . force_index where_opt group_by_opt having_opt for_update_opt
    (130) relations -> relations . COMMA table_reference
    (128) force_index -> . FORCE INDEX LPAREN identifier RPAREN
    (129) force_index -> . empty
    (276) empty -> .

    COMMA           shift and go to state 111
    FORCE           shift and go to state 291
    WHERE           reduce using rule 276 (empty -> .)
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    force_index                    shift and go to state 290
    empty                          shift and go to state 292

state 234

    (123) select_item -> DISTINCT LPAREN derived_column . RPAREN

    RPAREN          shift and go to state 293


state 235

    (189) numeric_value_expression -> numeric_value_expression PLUS term .
    (192) term -> term . ASTERISK factor
    (193) term -> term . SLASH factor
    (194) term -> term . PERCENT factor
    (195) term -> term . CONCAT factor

  ! shift/reduce conflict for ASTERISK resolved as shift
    PLUS            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    MINUS           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    AS              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    IDENTIFIER      reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    DIGIT_IDENTIFIER reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    BACKQUOTED_IDENTIFIER reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NON_RESERVED    reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    COMMA           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    FROM            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    INTERSECT       reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    UNION           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    EXCEPT          reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ORDER           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LIMIT           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    FOR             reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LOCK            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    $end            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    RPAREN          reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    REGEXP          reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    IS              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    EQ              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NE              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LT              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LE              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    GT              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    GE              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NOT             reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    BETWEEN         reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    IN              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LIKE            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    OR              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    AND             reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    GROUP           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    HAVING          reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    THEN            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    CROSS           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NATURAL         reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    INNER           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LEFT            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    RIGHT           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    FULL            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    JOIN            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    SET             reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    WHERE           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    FORCE           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    VALUES          reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    LPAREN          reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    SELECT          reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ON              reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    USING           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ASC             reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    DESC            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    NULLS           reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    WHEN            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    END             reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ELSE            reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .)
    ASTERISK        shift and go to state 152
    SLASH           shift and go to state 153
    PERCENT         shift and go to state 154
    CONCAT          shift and go to state 155

  ! ASTERISK        [ reduce using rule 189 (numeric_value_expression -> numeric_value_expression PLUS term .) ]


state 236

    (190) numeric_value_expression -> numeric_value_expression MINUS term .
    (192) term -> term . ASTERISK factor
    (193) term -> term . SLASH factor
    (194) term -> term . PERCENT factor
    (195) term -> term . CONCAT factor

  ! shift/reduce conflict for ASTERISK resolved as shift
    PLUS            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    MINUS           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    AS              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    IDENTIFIER      reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    DIGIT_IDENTIFIER reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    BACKQUOTED_IDENTIFIER reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NON_RESERVED    reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    COMMA           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    FROM            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    INTERSECT       reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    UNION           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    EXCEPT          reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ORDER           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LIMIT           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    FOR             reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LOCK            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    $end            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    RPAREN          reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    REGEXP          reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    IS              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    EQ              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NE              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LT              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LE              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    GT              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    GE              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NOT             reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    BETWEEN         reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    IN              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LIKE            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    OR              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    AND             reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    GROUP           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    HAVING          reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    THEN            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    CROSS           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NATURAL         reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    INNER           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LEFT            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    RIGHT           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    FULL            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    JOIN            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    SET             reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    WHERE           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    FORCE           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    VALUES          reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    LPAREN          reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    SELECT          reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ON              reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    USING           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ASC             reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    DESC            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    NULLS           reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    WHEN            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    END             reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ELSE            reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .)
    ASTERISK        shift and go to state 152
    SLASH           shift and go to state 153
    PERCENT         shift and go to state 154
    CONCAT          shift and go to state 155

  ! ASTERISK        [ reduce using rule 190 (numeric_value_expression -> numeric_value_expression MINUS term .) ]


state 237

    (192) term -> term ASTERISK factor .

    ASTERISK        reduce using rule 192 (term -> term ASTERISK factor .)
    SLASH           reduce using rule 192 (term -> term ASTERISK factor .)
    PERCENT         reduce using rule 192 (term -> term ASTERISK factor .)
    CONCAT          reduce using rule 192 (term -> term ASTERISK factor .)
    PLUS            reduce using rule 192 (term -> term ASTERISK factor .)
    MINUS           reduce using rule 192 (term -> term ASTERISK factor .)
    AS              reduce using rule 192 (term -> term ASTERISK factor .)
    IDENTIFIER      reduce using rule 192 (term -> term ASTERISK factor .)
    DIGIT_IDENTIFIER reduce using rule 192 (term -> term ASTERISK factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 192 (term -> term ASTERISK factor .)
    NON_RESERVED    reduce using rule 192 (term -> term ASTERISK factor .)
    COMMA           reduce using rule 192 (term -> term ASTERISK factor .)
    FROM            reduce using rule 192 (term -> term ASTERISK factor .)
    INTERSECT       reduce using rule 192 (term -> term ASTERISK factor .)
    UNION           reduce using rule 192 (term -> term ASTERISK factor .)
    EXCEPT          reduce using rule 192 (term -> term ASTERISK factor .)
    ORDER           reduce using rule 192 (term -> term ASTERISK factor .)
    LIMIT           reduce using rule 192 (term -> term ASTERISK factor .)
    FOR             reduce using rule 192 (term -> term ASTERISK factor .)
    LOCK            reduce using rule 192 (term -> term ASTERISK factor .)
    $end            reduce using rule 192 (term -> term ASTERISK factor .)
    RPAREN          reduce using rule 192 (term -> term ASTERISK factor .)
    REGEXP          reduce using rule 192 (term -> term ASTERISK factor .)
    IS              reduce using rule 192 (term -> term ASTERISK factor .)
    EQ              reduce using rule 192 (term -> term ASTERISK factor .)
    NE              reduce using rule 192 (term -> term ASTERISK factor .)
    LT              reduce using rule 192 (term -> term ASTERISK factor .)
    LE              reduce using rule 192 (term -> term ASTERISK factor .)
    GT              reduce using rule 192 (term -> term ASTERISK factor .)
    GE              reduce using rule 192 (term -> term ASTERISK factor .)
    NOT             reduce using rule 192 (term -> term ASTERISK factor .)
    BETWEEN         reduce using rule 192 (term -> term ASTERISK factor .)
    IN              reduce using rule 192 (term -> term ASTERISK factor .)
    LIKE            reduce using rule 192 (term -> term ASTERISK factor .)
    OR              reduce using rule 192 (term -> term ASTERISK factor .)
    AND             reduce using rule 192 (term -> term ASTERISK factor .)
    GROUP           reduce using rule 192 (term -> term ASTERISK factor .)
    HAVING          reduce using rule 192 (term -> term ASTERISK factor .)
    THEN            reduce using rule 192 (term -> term ASTERISK factor .)
    CROSS           reduce using rule 192 (term -> term ASTERISK factor .)
    NATURAL         reduce using rule 192 (term -> term ASTERISK factor .)
    INNER           reduce using rule 192 (term -> term ASTERISK factor .)
    LEFT            reduce using rule 192 (term -> term ASTERISK factor .)
    RIGHT           reduce using rule 192 (term -> term ASTERISK factor .)
    FULL            reduce using rule 192 (term -> term ASTERISK factor .)
    JOIN            reduce using rule 192 (term -> term ASTERISK factor .)
    SET             reduce using rule 192 (term -> term ASTERISK factor .)
    WHERE           reduce using rule 192 (term -> term ASTERISK factor .)
    FORCE           reduce using rule 192 (term -> term ASTERISK factor .)
    VALUES          reduce using rule 192 (term -> term ASTERISK factor .)
    LPAREN          reduce using rule 192 (term -> term ASTERISK factor .)
    SELECT          reduce using rule 192 (term -> term ASTERISK factor .)
    ON              reduce using rule 192 (term -> term ASTERISK factor .)
    USING           reduce using rule 192 (term -> term ASTERISK factor .)
    ASC             reduce using rule 192 (term -> term ASTERISK factor .)
    DESC            reduce using rule 192 (term -> term ASTERISK factor .)
    NULLS           reduce using rule 192 (term -> term ASTERISK factor .)
    WHEN            reduce using rule 192 (term -> term ASTERISK factor .)
    END             reduce using rule 192 (term -> term ASTERISK factor .)
    ELSE            reduce using rule 192 (term -> term ASTERISK factor .)


state 238

    (193) term -> term SLASH factor .

    ASTERISK        reduce using rule 193 (term -> term SLASH factor .)
    SLASH           reduce using rule 193 (term -> term SLASH factor .)
    PERCENT         reduce using rule 193 (term -> term SLASH factor .)
    CONCAT          reduce using rule 193 (term -> term SLASH factor .)
    PLUS            reduce using rule 193 (term -> term SLASH factor .)
    MINUS           reduce using rule 193 (term -> term SLASH factor .)
    AS              reduce using rule 193 (term -> term SLASH factor .)
    IDENTIFIER      reduce using rule 193 (term -> term SLASH factor .)
    DIGIT_IDENTIFIER reduce using rule 193 (term -> term SLASH factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 193 (term -> term SLASH factor .)
    NON_RESERVED    reduce using rule 193 (term -> term SLASH factor .)
    COMMA           reduce using rule 193 (term -> term SLASH factor .)
    FROM            reduce using rule 193 (term -> term SLASH factor .)
    INTERSECT       reduce using rule 193 (term -> term SLASH factor .)
    UNION           reduce using rule 193 (term -> term SLASH factor .)
    EXCEPT          reduce using rule 193 (term -> term SLASH factor .)
    ORDER           reduce using rule 193 (term -> term SLASH factor .)
    LIMIT           reduce using rule 193 (term -> term SLASH factor .)
    FOR             reduce using rule 193 (term -> term SLASH factor .)
    LOCK            reduce using rule 193 (term -> term SLASH factor .)
    $end            reduce using rule 193 (term -> term SLASH factor .)
    RPAREN          reduce using rule 193 (term -> term SLASH factor .)
    REGEXP          reduce using rule 193 (term -> term SLASH factor .)
    IS              reduce using rule 193 (term -> term SLASH factor .)
    EQ              reduce using rule 193 (term -> term SLASH factor .)
    NE              reduce using rule 193 (term -> term SLASH factor .)
    LT              reduce using rule 193 (term -> term SLASH factor .)
    LE              reduce using rule 193 (term -> term SLASH factor .)
    GT              reduce using rule 193 (term -> term SLASH factor .)
    GE              reduce using rule 193 (term -> term SLASH factor .)
    NOT             reduce using rule 193 (term -> term SLASH factor .)
    BETWEEN         reduce using rule 193 (term -> term SLASH factor .)
    IN              reduce using rule 193 (term -> term SLASH factor .)
    LIKE            reduce using rule 193 (term -> term SLASH factor .)
    OR              reduce using rule 193 (term -> term SLASH factor .)
    AND             reduce using rule 193 (term -> term SLASH factor .)
    GROUP           reduce using rule 193 (term -> term SLASH factor .)
    HAVING          reduce using rule 193 (term -> term SLASH factor .)
    THEN            reduce using rule 193 (term -> term SLASH factor .)
    CROSS           reduce using rule 193 (term -> term SLASH factor .)
    NATURAL         reduce using rule 193 (term -> term SLASH factor .)
    INNER           reduce using rule 193 (term -> term SLASH factor .)
    LEFT            reduce using rule 193 (term -> term SLASH factor .)
    RIGHT           reduce using rule 193 (term -> term SLASH factor .)
    FULL            reduce using rule 193 (term -> term SLASH factor .)
    JOIN            reduce using rule 193 (term -> term SLASH factor .)
    SET             reduce using rule 193 (term -> term SLASH factor .)
    WHERE           reduce using rule 193 (term -> term SLASH factor .)
    FORCE           reduce using rule 193 (term -> term SLASH factor .)
    VALUES          reduce using rule 193 (term -> term SLASH factor .)
    LPAREN          reduce using rule 193 (term -> term SLASH factor .)
    SELECT          reduce using rule 193 (term -> term SLASH factor .)
    ON              reduce using rule 193 (term -> term SLASH factor .)
    USING           reduce using rule 193 (term -> term SLASH factor .)
    ASC             reduce using rule 193 (term -> term SLASH factor .)
    DESC            reduce using rule 193 (term -> term SLASH factor .)
    NULLS           reduce using rule 193 (term -> term SLASH factor .)
    WHEN            reduce using rule 193 (term -> term SLASH factor .)
    END             reduce using rule 193 (term -> term SLASH factor .)
    ELSE            reduce using rule 193 (term -> term SLASH factor .)


state 239

    (194) term -> term PERCENT factor .

    ASTERISK        reduce using rule 194 (term -> term PERCENT factor .)
    SLASH           reduce using rule 194 (term -> term PERCENT factor .)
    PERCENT         reduce using rule 194 (term -> term PERCENT factor .)
    CONCAT          reduce using rule 194 (term -> term PERCENT factor .)
    PLUS            reduce using rule 194 (term -> term PERCENT factor .)
    MINUS           reduce using rule 194 (term -> term PERCENT factor .)
    AS              reduce using rule 194 (term -> term PERCENT factor .)
    IDENTIFIER      reduce using rule 194 (term -> term PERCENT factor .)
    DIGIT_IDENTIFIER reduce using rule 194 (term -> term PERCENT factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 194 (term -> term PERCENT factor .)
    NON_RESERVED    reduce using rule 194 (term -> term PERCENT factor .)
    COMMA           reduce using rule 194 (term -> term PERCENT factor .)
    FROM            reduce using rule 194 (term -> term PERCENT factor .)
    INTERSECT       reduce using rule 194 (term -> term PERCENT factor .)
    UNION           reduce using rule 194 (term -> term PERCENT factor .)
    EXCEPT          reduce using rule 194 (term -> term PERCENT factor .)
    ORDER           reduce using rule 194 (term -> term PERCENT factor .)
    LIMIT           reduce using rule 194 (term -> term PERCENT factor .)
    FOR             reduce using rule 194 (term -> term PERCENT factor .)
    LOCK            reduce using rule 194 (term -> term PERCENT factor .)
    $end            reduce using rule 194 (term -> term PERCENT factor .)
    RPAREN          reduce using rule 194 (term -> term PERCENT factor .)
    REGEXP          reduce using rule 194 (term -> term PERCENT factor .)
    IS              reduce using rule 194 (term -> term PERCENT factor .)
    EQ              reduce using rule 194 (term -> term PERCENT factor .)
    NE              reduce using rule 194 (term -> term PERCENT factor .)
    LT              reduce using rule 194 (term -> term PERCENT factor .)
    LE              reduce using rule 194 (term -> term PERCENT factor .)
    GT              reduce using rule 194 (term -> term PERCENT factor .)
    GE              reduce using rule 194 (term -> term PERCENT factor .)
    NOT             reduce using rule 194 (term -> term PERCENT factor .)
    BETWEEN         reduce using rule 194 (term -> term PERCENT factor .)
    IN              reduce using rule 194 (term -> term PERCENT factor .)
    LIKE            reduce using rule 194 (term -> term PERCENT factor .)
    OR              reduce using rule 194 (term -> term PERCENT factor .)
    AND             reduce using rule 194 (term -> term PERCENT factor .)
    GROUP           reduce using rule 194 (term -> term PERCENT factor .)
    HAVING          reduce using rule 194 (term -> term PERCENT factor .)
    THEN            reduce using rule 194 (term -> term PERCENT factor .)
    CROSS           reduce using rule 194 (term -> term PERCENT factor .)
    NATURAL         reduce using rule 194 (term -> term PERCENT factor .)
    INNER           reduce using rule 194 (term -> term PERCENT factor .)
    LEFT            reduce using rule 194 (term -> term PERCENT factor .)
    RIGHT           reduce using rule 194 (term -> term PERCENT factor .)
    FULL            reduce using rule 194 (term -> term PERCENT factor .)
    JOIN            reduce using rule 194 (term -> term PERCENT factor .)
    SET             reduce using rule 194 (term -> term PERCENT factor .)
    WHERE           reduce using rule 194 (term -> term PERCENT factor .)
    FORCE           reduce using rule 194 (term -> term PERCENT factor .)
    VALUES          reduce using rule 194 (term -> term PERCENT factor .)
    LPAREN          reduce using rule 194 (term -> term PERCENT factor .)
    SELECT          reduce using rule 194 (term -> term PERCENT factor .)
    ON              reduce using rule 194 (term -> term PERCENT factor .)
    USING           reduce using rule 194 (term -> term PERCENT factor .)
    ASC             reduce using rule 194 (term -> term PERCENT factor .)
    DESC            reduce using rule 194 (term -> term PERCENT factor .)
    NULLS           reduce using rule 194 (term -> term PERCENT factor .)
    WHEN            reduce using rule 194 (term -> term PERCENT factor .)
    END             reduce using rule 194 (term -> term PERCENT factor .)
    ELSE            reduce using rule 194 (term -> term PERCENT factor .)


state 240

    (195) term -> term CONCAT factor .

    ASTERISK        reduce using rule 195 (term -> term CONCAT factor .)
    SLASH           reduce using rule 195 (term -> term CONCAT factor .)
    PERCENT         reduce using rule 195 (term -> term CONCAT factor .)
    CONCAT          reduce using rule 195 (term -> term CONCAT factor .)
    PLUS            reduce using rule 195 (term -> term CONCAT factor .)
    MINUS           reduce using rule 195 (term -> term CONCAT factor .)
    AS              reduce using rule 195 (term -> term CONCAT factor .)
    IDENTIFIER      reduce using rule 195 (term -> term CONCAT factor .)
    DIGIT_IDENTIFIER reduce using rule 195 (term -> term CONCAT factor .)
    BACKQUOTED_IDENTIFIER reduce using rule 195 (term -> term CONCAT factor .)
    NON_RESERVED    reduce using rule 195 (term -> term CONCAT factor .)
    COMMA           reduce using rule 195 (term -> term CONCAT factor .)
    FROM            reduce using rule 195 (term -> term CONCAT factor .)
    INTERSECT       reduce using rule 195 (term -> term CONCAT factor .)
    UNION           reduce using rule 195 (term -> term CONCAT factor .)
    EXCEPT          reduce using rule 195 (term -> term CONCAT factor .)
    ORDER           reduce using rule 195 (term -> term CONCAT factor .)
    LIMIT           reduce using rule 195 (term -> term CONCAT factor .)
    FOR             reduce using rule 195 (term -> term CONCAT factor .)
    LOCK            reduce using rule 195 (term -> term CONCAT factor .)
    $end            reduce using rule 195 (term -> term CONCAT factor .)
    RPAREN          reduce using rule 195 (term -> term CONCAT factor .)
    REGEXP          reduce using rule 195 (term -> term CONCAT factor .)
    IS              reduce using rule 195 (term -> term CONCAT factor .)
    EQ              reduce using rule 195 (term -> term CONCAT factor .)
    NE              reduce using rule 195 (term -> term CONCAT factor .)
    LT              reduce using rule 195 (term -> term CONCAT factor .)
    LE              reduce using rule 195 (term -> term CONCAT factor .)
    GT              reduce using rule 195 (term -> term CONCAT factor .)
    GE              reduce using rule 195 (term -> term CONCAT factor .)
    NOT             reduce using rule 195 (term -> term CONCAT factor .)
    BETWEEN         reduce using rule 195 (term -> term CONCAT factor .)
    IN              reduce using rule 195 (term -> term CONCAT factor .)
    LIKE            reduce using rule 195 (term -> term CONCAT factor .)
    OR              reduce using rule 195 (term -> term CONCAT factor .)
    AND             reduce using rule 195 (term -> term CONCAT factor .)
    GROUP           reduce using rule 195 (term -> term CONCAT factor .)
    HAVING          reduce using rule 195 (term -> term CONCAT factor .)
    THEN            reduce using rule 195 (term -> term CONCAT factor .)
    CROSS           reduce using rule 195 (term -> term CONCAT factor .)
    NATURAL         reduce using rule 195 (term -> term CONCAT factor .)
    INNER           reduce using rule 195 (term -> term CONCAT factor .)
    LEFT            reduce using rule 195 (term -> term CONCAT factor .)
    RIGHT           reduce using rule 195 (term -> term CONCAT factor .)
    FULL            reduce using rule 195 (term -> term CONCAT factor .)
    JOIN            reduce using rule 195 (term -> term CONCAT factor .)
    SET             reduce using rule 195 (term -> term CONCAT factor .)
    WHERE           reduce using rule 195 (term -> term CONCAT factor .)
    FORCE           reduce using rule 195 (term -> term CONCAT factor .)
    VALUES          reduce using rule 195 (term -> term CONCAT factor .)
    LPAREN          reduce using rule 195 (term -> term CONCAT factor .)
    SELECT          reduce using rule 195 (term -> term CONCAT factor .)
    ON              reduce using rule 195 (term -> term CONCAT factor .)
    USING           reduce using rule 195 (term -> term CONCAT factor .)
    ASC             reduce using rule 195 (term -> term CONCAT factor .)
    DESC            reduce using rule 195 (term -> term CONCAT factor .)
    NULLS           reduce using rule 195 (term -> term CONCAT factor .)
    WHEN            reduce using rule 195 (term -> term CONCAT factor .)
    END             reduce using rule 195 (term -> term CONCAT factor .)
    ELSE            reduce using rule 195 (term -> term CONCAT factor .)


state 241

    (200) parenthetic_primary_expression -> LPAREN . value_expression RPAREN
    (201) parenthetic_primary_expression -> LPAREN . parenthetic_primary_expression RPAREN
    (100) nonjoin_query_primary -> LPAREN . nonjoin_query_expression RPAREN
    (67) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (188) value_expression -> . numeric_value_expression
    (200) parenthetic_primary_expression -> . LPAREN value_expression RPAREN
    (201) parenthetic_primary_expression -> . LPAREN parenthetic_primary_expression RPAREN
    (94) nonjoin_query_expression -> . nonjoin_query_term
    (95) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (73) query_expression -> . query_expression_body
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (74) query_expression_body -> . nonjoin_query_expression
    (75) query_expression_body -> . joined_table
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (197) factor -> . sign_opt primary_expression
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DIGIT_IDENTIFIER resolved as shift
  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for BACKQUOTED_IDENTIFIER resolved as shift
  ! shift/reduce conflict for NON_RESERVED resolved as shift
    LPAREN          shift and go to state 241
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 276 (empty -> .) ]
  ! DIGIT_IDENTIFIER [ reduce using rule 276 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 276 (empty -> .) ]
  ! BACKQUOTED_IDENTIFIER [ reduce using rule 276 (empty -> .) ]
  ! NON_RESERVED    [ reduce using rule 276 (empty -> .) ]

    value_expression               shift and go to state 242
    parenthetic_primary_expression shift and go to state 243
    nonjoin_query_expression       shift and go to state 49
    query_expression               shift and go to state 50
    numeric_value_expression       shift and go to state 87
    nonjoin_query_term             shift and go to state 26
    query_expression_body          shift and go to state 23
    term                           shift and go to state 89
    nonjoin_query_primary          shift and go to state 30
    joined_table                   shift and go to state 25
    factor                         shift and go to state 91
    simple_table                   shift and go to state 32
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    sign_opt                       shift and go to state 92
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34
    table_reference                shift and go to state 20
    table_primary                  shift and go to state 31
    sign                           shift and go to state 93
    empty                          shift and go to state 94
    qualified_name                 shift and go to state 38
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 242

    (200) parenthetic_primary_expression -> LPAREN value_expression . RPAREN

    RPAREN          shift and go to state 294


state 243

    (201) parenthetic_primary_expression -> LPAREN parenthetic_primary_expression . RPAREN

    RPAREN          shift and go to state 295


state 244

    (215) function_call -> qualified_name LPAREN . call_args RPAREN
    (216) function_call -> qualified_name LPAREN . DISTINCT call_args RPAREN
    (217) call_args -> . call_list
    (218) call_args -> . empty_call_args
    (231) call_list -> . call_list COMMA expression
    (232) call_list -> . expression
    (219) empty_call_args -> . ASTERISK
    (220) empty_call_args -> . empty
    (159) expression -> . search_condition
    (276) empty -> .
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty

  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    DISTINCT        shift and go to state 297
    ASTERISK        shift and go to state 301
    RPAREN          reduce using rule 276 (empty -> .)
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 276 (empty -> .) ]

    call_args                      shift and go to state 296
    call_list                      shift and go to state 298
    empty_call_args                shift and go to state 299
    expression                     shift and go to state 300
    empty                          shift and go to state 302
    search_condition               shift and go to state 72
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76

state 245

    (242) date_time -> CURRENT_TIME integer_param_opt .

    ASTERISK        reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    SLASH           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    PERCENT         reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    CONCAT          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    PLUS            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    MINUS           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    AS              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    IDENTIFIER      reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    NON_RESERVED    reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    COMMA           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    FROM            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    INTERSECT       reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    UNION           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    EXCEPT          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    ORDER           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    LIMIT           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    FOR             reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    LOCK            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    $end            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    RPAREN          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    REGEXP          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    IS              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    EQ              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    NE              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    LT              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    LE              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    GT              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    GE              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    NOT             reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    BETWEEN         reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    IN              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    LIKE            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    OR              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    AND             reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    GROUP           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    HAVING          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    THEN            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    CROSS           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    NATURAL         reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    INNER           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    LEFT            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    RIGHT           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    FULL            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    JOIN            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    SET             reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    WHERE           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    FORCE           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    VALUES          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    LPAREN          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    SELECT          reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    ON              reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    USING           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    ASC             reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    DESC            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    NULLS           reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    WHEN            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    END             reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)
    ELSE            reduce using rule 242 (date_time -> CURRENT_TIME integer_param_opt .)


state 246

    (262) integer_param_opt -> LPAREN . INTEGER RPAREN
    (263) integer_param_opt -> LPAREN . RPAREN

    INTEGER         shift and go to state 303
    RPAREN          shift and go to state 304


state 247

    (264) integer_param_opt -> empty .

    ASTERISK        reduce using rule 264 (integer_param_opt -> empty .)
    SLASH           reduce using rule 264 (integer_param_opt -> empty .)
    PERCENT         reduce using rule 264 (integer_param_opt -> empty .)
    CONCAT          reduce using rule 264 (integer_param_opt -> empty .)
    PLUS            reduce using rule 264 (integer_param_opt -> empty .)
    MINUS           reduce using rule 264 (integer_param_opt -> empty .)
    AS              reduce using rule 264 (integer_param_opt -> empty .)
    IDENTIFIER      reduce using rule 264 (integer_param_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 264 (integer_param_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 264 (integer_param_opt -> empty .)
    NON_RESERVED    reduce using rule 264 (integer_param_opt -> empty .)
    COMMA           reduce using rule 264 (integer_param_opt -> empty .)
    FROM            reduce using rule 264 (integer_param_opt -> empty .)
    INTERSECT       reduce using rule 264 (integer_param_opt -> empty .)
    UNION           reduce using rule 264 (integer_param_opt -> empty .)
    EXCEPT          reduce using rule 264 (integer_param_opt -> empty .)
    ORDER           reduce using rule 264 (integer_param_opt -> empty .)
    LIMIT           reduce using rule 264 (integer_param_opt -> empty .)
    FOR             reduce using rule 264 (integer_param_opt -> empty .)
    LOCK            reduce using rule 264 (integer_param_opt -> empty .)
    $end            reduce using rule 264 (integer_param_opt -> empty .)
    RPAREN          reduce using rule 264 (integer_param_opt -> empty .)
    REGEXP          reduce using rule 264 (integer_param_opt -> empty .)
    IS              reduce using rule 264 (integer_param_opt -> empty .)
    EQ              reduce using rule 264 (integer_param_opt -> empty .)
    NE              reduce using rule 264 (integer_param_opt -> empty .)
    LT              reduce using rule 264 (integer_param_opt -> empty .)
    LE              reduce using rule 264 (integer_param_opt -> empty .)
    GT              reduce using rule 264 (integer_param_opt -> empty .)
    GE              reduce using rule 264 (integer_param_opt -> empty .)
    NOT             reduce using rule 264 (integer_param_opt -> empty .)
    BETWEEN         reduce using rule 264 (integer_param_opt -> empty .)
    IN              reduce using rule 264 (integer_param_opt -> empty .)
    LIKE            reduce using rule 264 (integer_param_opt -> empty .)
    OR              reduce using rule 264 (integer_param_opt -> empty .)
    AND             reduce using rule 264 (integer_param_opt -> empty .)
    GROUP           reduce using rule 264 (integer_param_opt -> empty .)
    HAVING          reduce using rule 264 (integer_param_opt -> empty .)
    THEN            reduce using rule 264 (integer_param_opt -> empty .)
    CROSS           reduce using rule 264 (integer_param_opt -> empty .)
    NATURAL         reduce using rule 264 (integer_param_opt -> empty .)
    INNER           reduce using rule 264 (integer_param_opt -> empty .)
    LEFT            reduce using rule 264 (integer_param_opt -> empty .)
    RIGHT           reduce using rule 264 (integer_param_opt -> empty .)
    FULL            reduce using rule 264 (integer_param_opt -> empty .)
    JOIN            reduce using rule 264 (integer_param_opt -> empty .)
    SET             reduce using rule 264 (integer_param_opt -> empty .)
    WHERE           reduce using rule 264 (integer_param_opt -> empty .)
    FORCE           reduce using rule 264 (integer_param_opt -> empty .)
    VALUES          reduce using rule 264 (integer_param_opt -> empty .)
    LPAREN          reduce using rule 264 (integer_param_opt -> empty .)
    SELECT          reduce using rule 264 (integer_param_opt -> empty .)
    ON              reduce using rule 264 (integer_param_opt -> empty .)
    USING           reduce using rule 264 (integer_param_opt -> empty .)
    ASC             reduce using rule 264 (integer_param_opt -> empty .)
    DESC            reduce using rule 264 (integer_param_opt -> empty .)
    NULLS           reduce using rule 264 (integer_param_opt -> empty .)
    WHEN            reduce using rule 264 (integer_param_opt -> empty .)
    END             reduce using rule 264 (integer_param_opt -> empty .)
    ELSE            reduce using rule 264 (integer_param_opt -> empty .)


state 248

    (243) date_time -> CURRENT_TIMESTAMP integer_param_opt .

    ASTERISK        reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    SLASH           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    PERCENT         reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    CONCAT          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    PLUS            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    MINUS           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    AS              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    IDENTIFIER      reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NON_RESERVED    reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    COMMA           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    FROM            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    INTERSECT       reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    UNION           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    EXCEPT          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ORDER           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LIMIT           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    FOR             reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LOCK            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    $end            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    RPAREN          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    REGEXP          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    IS              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    EQ              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NE              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LT              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LE              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    GT              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    GE              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NOT             reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    BETWEEN         reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    IN              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LIKE            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    OR              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    AND             reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    GROUP           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    HAVING          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    THEN            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    CROSS           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NATURAL         reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    INNER           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LEFT            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    RIGHT           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    FULL            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    JOIN            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    SET             reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    WHERE           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    FORCE           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    VALUES          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    LPAREN          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    SELECT          reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ON              reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    USING           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ASC             reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    DESC            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    NULLS           reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    WHEN            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    END             reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)
    ELSE            reduce using rule 243 (date_time -> CURRENT_TIMESTAMP integer_param_opt .)


state 249

    (244) date_time -> LOCALTIME integer_param_opt .

    ASTERISK        reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    SLASH           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    PERCENT         reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    CONCAT          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    PLUS            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    MINUS           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    AS              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    IDENTIFIER      reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    NON_RESERVED    reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    COMMA           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    FROM            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    INTERSECT       reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    UNION           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    EXCEPT          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    ORDER           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    LIMIT           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    FOR             reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    LOCK            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    $end            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    RPAREN          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    REGEXP          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    IS              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    EQ              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    NE              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    LT              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    LE              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    GT              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    GE              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    NOT             reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    BETWEEN         reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    IN              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    LIKE            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    OR              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    AND             reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    GROUP           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    HAVING          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    THEN            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    CROSS           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    NATURAL         reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    INNER           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    LEFT            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    RIGHT           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    FULL            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    JOIN            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    SET             reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    WHERE           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    FORCE           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    VALUES          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    LPAREN          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    SELECT          reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    ON              reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    USING           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    ASC             reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    DESC            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    NULLS           reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    WHEN            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    END             reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)
    ELSE            reduce using rule 244 (date_time -> LOCALTIME integer_param_opt .)


state 250

    (245) date_time -> LOCALTIMESTAMP integer_param_opt .

    ASTERISK        reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    SLASH           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    PERCENT         reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    CONCAT          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    PLUS            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    MINUS           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    AS              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    IDENTIFIER      reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    DIGIT_IDENTIFIER reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    BACKQUOTED_IDENTIFIER reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NON_RESERVED    reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    COMMA           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    FROM            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    INTERSECT       reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    UNION           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    EXCEPT          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ORDER           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LIMIT           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    FOR             reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LOCK            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    $end            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    RPAREN          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    REGEXP          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    IS              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    EQ              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NE              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LT              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LE              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    GT              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    GE              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NOT             reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    BETWEEN         reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    IN              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LIKE            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    OR              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    AND             reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    GROUP           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    HAVING          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    THEN            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    CROSS           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NATURAL         reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    INNER           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LEFT            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    RIGHT           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    FULL            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    JOIN            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    SET             reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    WHERE           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    FORCE           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    VALUES          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    LPAREN          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    SELECT          reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ON              reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    USING           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ASC             reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    DESC            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    NULLS           reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    WHEN            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    END             reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)
    ELSE            reduce using rule 245 (date_time -> LOCALTIMESTAMP integer_param_opt .)


state 251

    (225) cast_specification -> CAST LPAREN . value_expression AS data_type RPAREN
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 305
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 252

    (223) simple_case -> CASE value_expression . when_clauses else_opt END
    (226) when_clauses -> . when_clauses when_clause
    (227) when_clauses -> . when_clause
    (228) when_clause -> . WHEN search_condition THEN value_expression

    WHEN            shift and go to state 255

    when_clauses                   shift and go to state 306
    when_clause                    shift and go to state 254

state 253

    (224) searched_case -> CASE when_clauses . else_opt END
    (226) when_clauses -> when_clauses . when_clause
    (229) else_opt -> . ELSE value_expression
    (230) else_opt -> . empty
    (228) when_clause -> . WHEN search_condition THEN value_expression
    (276) empty -> .

    ELSE            shift and go to state 309
    WHEN            shift and go to state 255
    END             reduce using rule 276 (empty -> .)

    else_opt                       shift and go to state 307
    when_clause                    shift and go to state 308
    empty                          shift and go to state 310

state 254

    (227) when_clauses -> when_clause .

    ELSE            reduce using rule 227 (when_clauses -> when_clause .)
    WHEN            reduce using rule 227 (when_clauses -> when_clause .)
    END             reduce using rule 227 (when_clauses -> when_clause .)


state 255

    (228) when_clause -> WHEN . search_condition THEN value_expression
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 311
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 256

    (13) column -> identifier . column_type
    (14) column -> identifier . column_type UNIQUE
    (15) column_type -> . INT column_end
    (16) column_type -> . INT LPAREN INTEGER RPAREN column_end
    (17) column_type -> . FLOAT column_end
    (18) column_type -> . BIGINT column_end
    (19) column_type -> . BIGINT LPAREN INTEGER RPAREN column_end
    (20) column_type -> . TINYINT LPAREN INTEGER RPAREN column_end
    (21) column_type -> . DATETIME column_end
    (22) column_type -> . DATETIME LPAREN INTEGER RPAREN column_end
    (23) column_type -> . VARCHAR LPAREN INTEGER RPAREN column_end
    (24) column_type -> . CHAR LPAREN INTEGER RPAREN column_end
    (25) column_type -> . TIMESTAMP column_end

    INT             shift and go to state 313
    FLOAT           shift and go to state 314
    BIGINT          shift and go to state 315
    TINYINT         shift and go to state 316
    DATETIME        shift and go to state 317
    VARCHAR         shift and go to state 318
    CHAR            shift and go to state 319
    TIMESTAMP       shift and go to state 320

    column_type                    shift and go to state 312

state 257

    (7) create_table -> CREATE TABLE identifier LPAREN column_list . RPAREN create_table_end
    (8) create_table -> CREATE TABLE identifier LPAREN column_list . COMMA primary_clause RPAREN create_table_end
    (12) column_list -> column_list . COMMA column

    RPAREN          shift and go to state 321
    COMMA           shift and go to state 322


state 258

    (11) column_list -> column .

    RPAREN          reduce using rule 11 (column_list -> column .)
    COMMA           reduce using rule 11 (column_list -> column .)


state 259

    (67) subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .

    AS              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    IDENTIFIER      reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ASTERISK        reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NON_RESERVED    reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    CROSS           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NATURAL         reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    INNER           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LEFT            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    RIGHT           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    FULL            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    JOIN            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    SET             reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    COMMA           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    WHERE           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ORDER           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LIMIT           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    $end            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    SLASH           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    PERCENT         reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    CONCAT          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    PLUS            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    MINUS           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    FROM            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    INTERSECT       reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    UNION           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    EXCEPT          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    FOR             reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LOCK            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    RPAREN          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    REGEXP          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    IS              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    EQ              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NE              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LT              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LE              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    GT              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    GE              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NOT             reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    BETWEEN         reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    IN              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LIKE            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    OR              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    AND             reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    GROUP           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    HAVING          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    THEN            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    FORCE           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    VALUES          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    LPAREN          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    SELECT          reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ON              reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    USING           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ASC             reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    DESC            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    NULLS           reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    WHEN            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    END             reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)
    ELSE            reduce using rule 67 (subquery -> LPAREN query_expression order_by_opt limit_opt RPAREN .)


state 260

    (68) for_update_opt -> FOR UPDATE .
    (69) for_update_opt -> FOR UPDATE . NOWAIT
    (70) for_update_opt -> FOR UPDATE . WAIT INTEGER

    $end            reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    INTERSECT       reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    UNION           reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    EXCEPT          reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    ORDER           reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    LIMIT           reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    FOR             reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    LOCK            reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    RPAREN          reduce using rule 68 (for_update_opt -> FOR UPDATE .)
    NOWAIT          shift and go to state 323
    WAIT            shift and go to state 324


state 261

    (71) for_update_opt -> LOCK IN . SHARE MODE

    SHARE           shift and go to state 325


state 262

    (88) limit_opt -> LIMIT INTEGER COMMA . INTEGER

    INTEGER         shift and go to state 326


state 263

    (92) limit_opt -> LIMIT INTEGER OFFSET . INTEGER

    INTEGER         shift and go to state 327


state 264

    (90) limit_opt -> LIMIT QM COMMA . QM

    QM              shift and go to state 328


state 265

    (79) sort_items -> sort_items COMMA . sort_item
    (80) sort_item -> . value_expression order_opt null_ordering_opt
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    sort_item                      shift and go to state 329
    value_expression               shift and go to state 199
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 266

    (80) sort_item -> value_expression order_opt . null_ordering_opt
    (84) null_ordering_opt -> . NULLS FIRST
    (85) null_ordering_opt -> . NULLS LAST
    (86) null_ordering_opt -> . empty
    (276) empty -> .

    NULLS           shift and go to state 331
    COMMA           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    null_ordering_opt              shift and go to state 330
    empty                          shift and go to state 332

state 267

    (81) order_opt -> ASC .

    NULLS           reduce using rule 81 (order_opt -> ASC .)
    COMMA           reduce using rule 81 (order_opt -> ASC .)
    LIMIT           reduce using rule 81 (order_opt -> ASC .)
    FOR             reduce using rule 81 (order_opt -> ASC .)
    LOCK            reduce using rule 81 (order_opt -> ASC .)
    $end            reduce using rule 81 (order_opt -> ASC .)
    RPAREN          reduce using rule 81 (order_opt -> ASC .)


state 268

    (82) order_opt -> DESC .

    NULLS           reduce using rule 82 (order_opt -> DESC .)
    COMMA           reduce using rule 82 (order_opt -> DESC .)
    LIMIT           reduce using rule 82 (order_opt -> DESC .)
    FOR             reduce using rule 82 (order_opt -> DESC .)
    LOCK            reduce using rule 82 (order_opt -> DESC .)
    $end            reduce using rule 82 (order_opt -> DESC .)
    RPAREN          reduce using rule 82 (order_opt -> DESC .)


state 269

    (83) order_opt -> empty .

    NULLS           reduce using rule 83 (order_opt -> empty .)
    COMMA           reduce using rule 83 (order_opt -> empty .)
    LIMIT           reduce using rule 83 (order_opt -> empty .)
    FOR             reduce using rule 83 (order_opt -> empty .)
    LOCK            reduce using rule 83 (order_opt -> empty .)
    $end            reduce using rule 83 (order_opt -> empty .)
    RPAREN          reduce using rule 83 (order_opt -> empty .)


state 270

    (61) delete -> DELETE FROM relations where_opt order_by_opt . limit_opt
    (87) limit_opt -> . LIMIT INTEGER
    (88) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (89) limit_opt -> . LIMIT QM
    (90) limit_opt -> . LIMIT QM COMMA QM
    (91) limit_opt -> . LIMIT ALL
    (92) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (93) limit_opt -> . empty
    (276) empty -> .

    LIMIT           shift and go to state 106
    $end            reduce using rule 276 (empty -> .)

    limit_opt                      shift and go to state 333
    empty                          shift and go to state 107

state 271

    (109) where_opt -> WHERE search_condition .
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

    ORDER           reduce using rule 109 (where_opt -> WHERE search_condition .)
    LIMIT           reduce using rule 109 (where_opt -> WHERE search_condition .)
    $end            reduce using rule 109 (where_opt -> WHERE search_condition .)
    GROUP           reduce using rule 109 (where_opt -> WHERE search_condition .)
    HAVING          reduce using rule 109 (where_opt -> WHERE search_condition .)
    FOR             reduce using rule 109 (where_opt -> WHERE search_condition .)
    LOCK            reduce using rule 109 (where_opt -> WHERE search_condition .)
    INTERSECT       reduce using rule 109 (where_opt -> WHERE search_condition .)
    UNION           reduce using rule 109 (where_opt -> WHERE search_condition .)
    EXCEPT          reduce using rule 109 (where_opt -> WHERE search_condition .)
    RPAREN          reduce using rule 109 (where_opt -> WHERE search_condition .)
    OR              shift and go to state 122
    AND             shift and go to state 123


state 272

    (110) where_opt -> WHERE LPAREN . search_condition RPAREN
    (161) search_condition -> LPAREN . search_condition RPAREN
    (165) boolean_term -> LPAREN . boolean_term RPAREN
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 334
    boolean_term                   shift and go to state 125
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 273

    (62) update -> UPDATE relations SET update_set_list where_opt . order_by_opt limit_opt
    (76) order_by_opt -> . ORDER BY sort_items
    (77) order_by_opt -> . empty
    (276) empty -> .

    ORDER           shift and go to state 52
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)

    order_by_opt                   shift and go to state 335
    empty                          shift and go to state 53

state 274

    (64) update_set_list -> update_set_list COMMA . update_set
    (65) update_set -> . comparison_predicate
    (177) comparison_predicate -> . value_expression comparison_operator value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    update_set                     shift and go to state 336
    comparison_predicate           shift and go to state 205
    value_expression               shift and go to state 206
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 275

    (53) insert -> INSERT ignore INTO table_reference VALUES . LPAREN insert_value RPAREN

    LPAREN          shift and go to state 337


state 276

    (54) insert -> INSERT ignore INTO table_reference LPAREN . index_column_list RPAREN VALUES LPAREN insert_value RPAREN
    (55) insert -> INSERT ignore INTO table_reference LPAREN . index_column_list RPAREN query_spec
    (45) index_column_list -> . identifier
    (46) index_column_list -> . index_column_list COMMA identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    index_column_list              shift and go to state 338
    identifier                     shift and go to state 339
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 277

    (56) insert -> INSERT ignore INTO table_reference query_spec .

    $end            reduce using rule 56 (insert -> INSERT ignore INTO table_reference query_spec .)


state 278

    (140) qualified_join -> table_reference join_type JOIN table_reference join_criteria .

    ORDER           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    LIMIT           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    FOR             reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    LOCK            reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    $end            reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    CROSS           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    NATURAL         reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    INNER           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    LEFT            reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    RIGHT           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    FULL            reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    JOIN            reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    RPAREN          reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    SET             reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    COMMA           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    WHERE           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    FORCE           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    GROUP           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    HAVING          reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    INTERSECT       reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    UNION           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    EXCEPT          reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    VALUES          reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    LPAREN          reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    SELECT          reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    ON              reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)
    USING           reduce using rule 140 (qualified_join -> table_reference join_type JOIN table_reference join_criteria .)


state 279

    (149) join_criteria -> ON . search_condition
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 340
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 280

    (150) join_criteria -> USING . LPAREN join_columns RPAREN

    LPAREN          shift and go to state 341


state 281

    (151) join_criteria -> empty .
    (146) join_type -> empty .

  ! reduce/reduce conflict for JOIN resolved using rule 146 (join_type -> empty .)
    ORDER           reduce using rule 151 (join_criteria -> empty .)
    LIMIT           reduce using rule 151 (join_criteria -> empty .)
    FOR             reduce using rule 151 (join_criteria -> empty .)
    LOCK            reduce using rule 151 (join_criteria -> empty .)
    $end            reduce using rule 151 (join_criteria -> empty .)
    CROSS           reduce using rule 151 (join_criteria -> empty .)
    NATURAL         reduce using rule 151 (join_criteria -> empty .)
    INNER           reduce using rule 151 (join_criteria -> empty .)
    LEFT            reduce using rule 151 (join_criteria -> empty .)
    RIGHT           reduce using rule 151 (join_criteria -> empty .)
    FULL            reduce using rule 151 (join_criteria -> empty .)
    RPAREN          reduce using rule 151 (join_criteria -> empty .)
    SET             reduce using rule 151 (join_criteria -> empty .)
    COMMA           reduce using rule 151 (join_criteria -> empty .)
    WHERE           reduce using rule 151 (join_criteria -> empty .)
    FORCE           reduce using rule 151 (join_criteria -> empty .)
    GROUP           reduce using rule 151 (join_criteria -> empty .)
    HAVING          reduce using rule 151 (join_criteria -> empty .)
    INTERSECT       reduce using rule 151 (join_criteria -> empty .)
    UNION           reduce using rule 151 (join_criteria -> empty .)
    EXCEPT          reduce using rule 151 (join_criteria -> empty .)
    VALUES          reduce using rule 151 (join_criteria -> empty .)
    LPAREN          reduce using rule 151 (join_criteria -> empty .)
    SELECT          reduce using rule 151 (join_criteria -> empty .)
    ON              reduce using rule 151 (join_criteria -> empty .)
    USING           reduce using rule 151 (join_criteria -> empty .)
    JOIN            reduce using rule 146 (join_type -> empty .)

  ! JOIN            [ reduce using rule 151 (join_criteria -> empty .) ]


state 282

    (141) natural_join -> table_reference NATURAL join_type JOIN table_primary .

    ORDER           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    LIMIT           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    FOR             reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    LOCK            reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    $end            reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    CROSS           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    NATURAL         reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    INNER           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    LEFT            reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    RIGHT           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    FULL            reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    JOIN            reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    RPAREN          reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    SET             reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    COMMA           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    WHERE           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    FORCE           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    GROUP           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    HAVING          reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    INTERSECT       reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    UNION           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    EXCEPT          reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    VALUES          reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    LPAREN          reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    SELECT          reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    ON              reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)
    USING           reduce using rule 141 (natural_join -> table_reference NATURAL join_type JOIN table_primary .)


state 283

    (177) comparison_predicate -> value_expression comparison_operator value_expression .

    OR              reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    AND             reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    COMMA           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    INTERSECT       reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    UNION           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    EXCEPT          reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    ORDER           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    LIMIT           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    FOR             reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    LOCK            reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    $end            reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    RPAREN          reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    GROUP           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    HAVING          reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    THEN            reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    CROSS           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    NATURAL         reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    INNER           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    LEFT            reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    RIGHT           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    FULL            reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    JOIN            reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    SET             reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    WHERE           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    FORCE           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    VALUES          reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    LPAREN          reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    SELECT          reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    ON              reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)
    USING           reduce using rule 177 (comparison_predicate -> value_expression comparison_operator value_expression .)


state 284

    (178) between_predicate -> value_expression not_opt BETWEEN . value_expression AND value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 342
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 285

    (179) in_predicate -> value_expression not_opt IN . in_value
    (180) in_value -> . LPAREN in_expressions RPAREN
    (181) in_value -> . subquery
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN

    LPAREN          shift and go to state 344

    in_value                       shift and go to state 343
    subquery                       shift and go to state 345

state 286

    (184) like_predicate -> value_expression not_opt LIKE . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 346
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 287

    (185) regexp_predicate -> value_expression REGEXP value_expression .

    OR              reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    AND             reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    COMMA           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    INTERSECT       reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    UNION           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    EXCEPT          reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    ORDER           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    LIMIT           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    FOR             reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    LOCK            reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    $end            reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    RPAREN          reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    GROUP           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    HAVING          reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    THEN            reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    CROSS           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    NATURAL         reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    INNER           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    LEFT            reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    RIGHT           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    FULL            reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    JOIN            reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    SET             reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    WHERE           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    FORCE           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    VALUES          reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    LPAREN          reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    SELECT          reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    ON              reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)
    USING           reduce using rule 185 (regexp_predicate -> value_expression REGEXP value_expression .)


state 288

    (186) null_predicate -> value_expression IS not_opt . NULL

    NULL            shift and go to state 347


state 289

    (100) nonjoin_query_primary -> LPAREN nonjoin_query_expression . RPAREN
    (95) nonjoin_query_expression -> nonjoin_query_expression . UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> nonjoin_query_expression . EXCEPT set_quantifier_opt nonjoin_query_term

    RPAREN          shift and go to state 103
    UNION           shift and go to state 79
    EXCEPT          shift and go to state 80


state 290

    (126) table_expression_opt -> FROM relations force_index . where_opt group_by_opt having_opt for_update_opt
    (109) where_opt -> . WHERE search_condition
    (110) where_opt -> . WHERE LPAREN search_condition RPAREN
    (111) where_opt -> . empty
    (276) empty -> .

    WHERE           shift and go to state 201
    GROUP           reduce using rule 276 (empty -> .)
    HAVING          reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    where_opt                      shift and go to state 348
    empty                          shift and go to state 202

state 291

    (128) force_index -> FORCE . INDEX LPAREN identifier RPAREN

    INDEX           shift and go to state 349


state 292

    (129) force_index -> empty .

    WHERE           reduce using rule 129 (force_index -> empty .)
    GROUP           reduce using rule 129 (force_index -> empty .)
    HAVING          reduce using rule 129 (force_index -> empty .)
    FOR             reduce using rule 129 (force_index -> empty .)
    LOCK            reduce using rule 129 (force_index -> empty .)
    INTERSECT       reduce using rule 129 (force_index -> empty .)
    UNION           reduce using rule 129 (force_index -> empty .)
    EXCEPT          reduce using rule 129 (force_index -> empty .)
    ORDER           reduce using rule 129 (force_index -> empty .)
    LIMIT           reduce using rule 129 (force_index -> empty .)
    $end            reduce using rule 129 (force_index -> empty .)
    RPAREN          reduce using rule 129 (force_index -> empty .)


state 293

    (123) select_item -> DISTINCT LPAREN derived_column RPAREN .

    COMMA           reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    FROM            reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    INTERSECT       reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    UNION           reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    EXCEPT          reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    ORDER           reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    LIMIT           reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    FOR             reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    LOCK            reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    $end            reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)
    RPAREN          reduce using rule 123 (select_item -> DISTINCT LPAREN derived_column RPAREN .)


state 294

    (200) parenthetic_primary_expression -> LPAREN value_expression RPAREN .

    ASTERISK        reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    SLASH           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    PERCENT         reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    CONCAT          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    PLUS            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    MINUS           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    AS              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    IDENTIFIER      reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NON_RESERVED    reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    COMMA           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    FROM            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    INTERSECT       reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    UNION           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    EXCEPT          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ORDER           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LIMIT           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    FOR             reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LOCK            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    $end            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    RPAREN          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    REGEXP          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    IS              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    EQ              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NE              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LT              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LE              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    GT              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    GE              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NOT             reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    BETWEEN         reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    IN              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LIKE            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    OR              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    AND             reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    GROUP           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    HAVING          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    THEN            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    CROSS           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NATURAL         reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    INNER           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LEFT            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    RIGHT           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    FULL            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    JOIN            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    SET             reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    WHERE           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    FORCE           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    VALUES          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    LPAREN          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    SELECT          reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ON              reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    USING           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ASC             reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    DESC            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    NULLS           reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    WHEN            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    END             reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)
    ELSE            reduce using rule 200 (parenthetic_primary_expression -> LPAREN value_expression RPAREN .)


state 295

    (201) parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .

    ASTERISK        reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    SLASH           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    PERCENT         reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    CONCAT          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    PLUS            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    MINUS           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    AS              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    IDENTIFIER      reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NON_RESERVED    reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    COMMA           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    FROM            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    INTERSECT       reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    UNION           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    EXCEPT          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ORDER           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LIMIT           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    FOR             reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LOCK            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    $end            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    RPAREN          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    REGEXP          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    IS              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    EQ              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NE              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LT              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LE              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    GT              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    GE              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NOT             reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    BETWEEN         reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    IN              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LIKE            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    OR              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    AND             reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    GROUP           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    HAVING          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    THEN            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    CROSS           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NATURAL         reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    INNER           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LEFT            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    RIGHT           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    FULL            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    JOIN            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    SET             reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    WHERE           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    FORCE           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    VALUES          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    LPAREN          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    SELECT          reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ON              reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    USING           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ASC             reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    DESC            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    NULLS           reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    WHEN            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    END             reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)
    ELSE            reduce using rule 201 (parenthetic_primary_expression -> LPAREN parenthetic_primary_expression RPAREN .)


state 296

    (215) function_call -> qualified_name LPAREN call_args . RPAREN

    RPAREN          shift and go to state 350


state 297

    (216) function_call -> qualified_name LPAREN DISTINCT . call_args RPAREN
    (217) call_args -> . call_list
    (218) call_args -> . empty_call_args
    (231) call_list -> . call_list COMMA expression
    (232) call_list -> . expression
    (219) empty_call_args -> . ASTERISK
    (220) empty_call_args -> . empty
    (159) expression -> . search_condition
    (276) empty -> .
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty

  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ASTERISK        shift and go to state 301
    RPAREN          reduce using rule 276 (empty -> .)
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 276 (empty -> .) ]

    call_args                      shift and go to state 351
    call_list                      shift and go to state 298
    empty_call_args                shift and go to state 299
    expression                     shift and go to state 300
    empty                          shift and go to state 302
    search_condition               shift and go to state 72
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76

state 298

    (217) call_args -> call_list .
    (231) call_list -> call_list . COMMA expression

    RPAREN          reduce using rule 217 (call_args -> call_list .)
    COMMA           shift and go to state 352


state 299

    (218) call_args -> empty_call_args .

    RPAREN          reduce using rule 218 (call_args -> empty_call_args .)


state 300

    (232) call_list -> expression .

    COMMA           reduce using rule 232 (call_list -> expression .)
    RPAREN          reduce using rule 232 (call_list -> expression .)


state 301

    (219) empty_call_args -> ASTERISK .

    RPAREN          reduce using rule 219 (empty_call_args -> ASTERISK .)


state 302

    (220) empty_call_args -> empty .
    (255) not_opt -> empty .

    RPAREN          reduce using rule 220 (empty_call_args -> empty .)
    EXISTS          reduce using rule 255 (not_opt -> empty .)
    PLUS            reduce using rule 255 (not_opt -> empty .)
    MINUS           reduce using rule 255 (not_opt -> empty .)
    LPAREN          reduce using rule 255 (not_opt -> empty .)
    NULL            reduce using rule 255 (not_opt -> empty .)
    SCONST          reduce using rule 255 (not_opt -> empty .)
    QUOTED_IDENTIFIER reduce using rule 255 (not_opt -> empty .)
    QM              reduce using rule 255 (not_opt -> empty .)
    CURRENT_DATE    reduce using rule 255 (not_opt -> empty .)
    CURRENT_TIME    reduce using rule 255 (not_opt -> empty .)
    CURRENT_TIMESTAMP reduce using rule 255 (not_opt -> empty .)
    LOCALTIME       reduce using rule 255 (not_opt -> empty .)
    LOCALTIMESTAMP  reduce using rule 255 (not_opt -> empty .)
    CAST            reduce using rule 255 (not_opt -> empty .)
    DECIMAL         reduce using rule 255 (not_opt -> empty .)
    INTEGER         reduce using rule 255 (not_opt -> empty .)
    TRUE            reduce using rule 255 (not_opt -> empty .)
    FALSE           reduce using rule 255 (not_opt -> empty .)
    IDENTIFIER      reduce using rule 255 (not_opt -> empty .)
    DIGIT_IDENTIFIER reduce using rule 255 (not_opt -> empty .)
    ASTERISK        reduce using rule 255 (not_opt -> empty .)
    CASE            reduce using rule 255 (not_opt -> empty .)
    BACKQUOTED_IDENTIFIER reduce using rule 255 (not_opt -> empty .)
    NON_RESERVED    reduce using rule 255 (not_opt -> empty .)


state 303

    (262) integer_param_opt -> LPAREN INTEGER . RPAREN

    RPAREN          shift and go to state 353


state 304

    (263) integer_param_opt -> LPAREN RPAREN .

    ASTERISK        reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    SLASH           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    PERCENT         reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    CONCAT          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    PLUS            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    MINUS           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    AS              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    NON_RESERVED    reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    COMMA           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    FROM            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    INTERSECT       reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    UNION           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    EXCEPT          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    ORDER           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    LIMIT           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    FOR             reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    LOCK            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    $end            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    RPAREN          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    REGEXP          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    IS              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    EQ              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    NE              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    LT              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    LE              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    GT              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    GE              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    NOT             reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    BETWEEN         reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    IN              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    LIKE            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    OR              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    AND             reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    GROUP           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    HAVING          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    THEN            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    CROSS           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    NATURAL         reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    INNER           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    LEFT            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    RIGHT           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    FULL            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    JOIN            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    SET             reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    WHERE           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    FORCE           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    VALUES          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    LPAREN          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    SELECT          reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    ON              reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    USING           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    ASC             reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    DESC            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    NULLS           reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    WHEN            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    END             reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)
    ELSE            reduce using rule 263 (integer_param_opt -> LPAREN RPAREN .)


state 305

    (225) cast_specification -> CAST LPAREN value_expression . AS data_type RPAREN

    AS              shift and go to state 354


state 306

    (223) simple_case -> CASE value_expression when_clauses . else_opt END
    (226) when_clauses -> when_clauses . when_clause
    (229) else_opt -> . ELSE value_expression
    (230) else_opt -> . empty
    (228) when_clause -> . WHEN search_condition THEN value_expression
    (276) empty -> .

    ELSE            shift and go to state 309
    WHEN            shift and go to state 255
    END             reduce using rule 276 (empty -> .)

    else_opt                       shift and go to state 355
    when_clause                    shift and go to state 308
    empty                          shift and go to state 310

state 307

    (224) searched_case -> CASE when_clauses else_opt . END

    END             shift and go to state 356


state 308

    (226) when_clauses -> when_clauses when_clause .

    ELSE            reduce using rule 226 (when_clauses -> when_clauses when_clause .)
    WHEN            reduce using rule 226 (when_clauses -> when_clauses when_clause .)
    END             reduce using rule 226 (when_clauses -> when_clauses when_clause .)


state 309

    (229) else_opt -> ELSE . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 357
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 310

    (230) else_opt -> empty .

    END             reduce using rule 230 (else_opt -> empty .)


state 311

    (228) when_clause -> WHEN search_condition . THEN value_expression
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

    THEN            shift and go to state 358
    OR              shift and go to state 122
    AND             shift and go to state 123


state 312

    (13) column -> identifier column_type .
    (14) column -> identifier column_type . UNIQUE

    RPAREN          reduce using rule 13 (column -> identifier column_type .)
    COMMA           reduce using rule 13 (column -> identifier column_type .)
    UNIQUE          shift and go to state 359


state 313

    (15) column_type -> INT . column_end
    (16) column_type -> INT . LPAREN INTEGER RPAREN column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    LPAREN          shift and go to state 361
    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 360
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 314

    (17) column_type -> FLOAT . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 365
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 315

    (18) column_type -> BIGINT . column_end
    (19) column_type -> BIGINT . LPAREN INTEGER RPAREN column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    LPAREN          shift and go to state 367
    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 366
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 316

    (20) column_type -> TINYINT . LPAREN INTEGER RPAREN column_end

    LPAREN          shift and go to state 368


state 317

    (21) column_type -> DATETIME . column_end
    (22) column_type -> DATETIME . LPAREN INTEGER RPAREN column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    LPAREN          shift and go to state 370
    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 369
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 318

    (23) column_type -> VARCHAR . LPAREN INTEGER RPAREN column_end

    LPAREN          shift and go to state 371


state 319

    (24) column_type -> CHAR . LPAREN INTEGER RPAREN column_end

    LPAREN          shift and go to state 372


state 320

    (25) column_type -> TIMESTAMP . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 373
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 321

    (7) create_table -> CREATE TABLE identifier LPAREN column_list RPAREN . create_table_end
    (9) create_table_end -> . ENGINE EQ identifier DEFAULT CHARSET EQ identifier
    (10) create_table_end -> . DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    ENGINE          shift and go to state 375
    DEFAULT         shift and go to state 376

    create_table_end               shift and go to state 374

state 322

    (8) create_table -> CREATE TABLE identifier LPAREN column_list COMMA . primary_clause RPAREN create_table_end
    (12) column_list -> column_list COMMA . column
    (39) primary_clause -> . PRIMARY KEY LPAREN index_column_list RPAREN
    (40) primary_clause -> . PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list
    (13) column -> . identifier column_type
    (14) column -> . identifier column_type UNIQUE
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    PRIMARY         shift and go to state 379
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 256
    primary_clause                 shift and go to state 377
    column                         shift and go to state 378
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 323

    (69) for_update_opt -> FOR UPDATE NOWAIT .

    $end            reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    INTERSECT       reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    UNION           reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    EXCEPT          reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    ORDER           reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    LIMIT           reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    FOR             reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    LOCK            reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)
    RPAREN          reduce using rule 69 (for_update_opt -> FOR UPDATE NOWAIT .)


state 324

    (70) for_update_opt -> FOR UPDATE WAIT . INTEGER

    INTEGER         shift and go to state 380


state 325

    (71) for_update_opt -> LOCK IN SHARE . MODE

    MODE            shift and go to state 381


state 326

    (88) limit_opt -> LIMIT INTEGER COMMA INTEGER .

    FOR             reduce using rule 88 (limit_opt -> LIMIT INTEGER COMMA INTEGER .)
    LOCK            reduce using rule 88 (limit_opt -> LIMIT INTEGER COMMA INTEGER .)
    $end            reduce using rule 88 (limit_opt -> LIMIT INTEGER COMMA INTEGER .)
    RPAREN          reduce using rule 88 (limit_opt -> LIMIT INTEGER COMMA INTEGER .)


state 327

    (92) limit_opt -> LIMIT INTEGER OFFSET INTEGER .

    FOR             reduce using rule 92 (limit_opt -> LIMIT INTEGER OFFSET INTEGER .)
    LOCK            reduce using rule 92 (limit_opt -> LIMIT INTEGER OFFSET INTEGER .)
    $end            reduce using rule 92 (limit_opt -> LIMIT INTEGER OFFSET INTEGER .)
    RPAREN          reduce using rule 92 (limit_opt -> LIMIT INTEGER OFFSET INTEGER .)


state 328

    (90) limit_opt -> LIMIT QM COMMA QM .

    FOR             reduce using rule 90 (limit_opt -> LIMIT QM COMMA QM .)
    LOCK            reduce using rule 90 (limit_opt -> LIMIT QM COMMA QM .)
    $end            reduce using rule 90 (limit_opt -> LIMIT QM COMMA QM .)
    RPAREN          reduce using rule 90 (limit_opt -> LIMIT QM COMMA QM .)


state 329

    (79) sort_items -> sort_items COMMA sort_item .

    COMMA           reduce using rule 79 (sort_items -> sort_items COMMA sort_item .)
    LIMIT           reduce using rule 79 (sort_items -> sort_items COMMA sort_item .)
    FOR             reduce using rule 79 (sort_items -> sort_items COMMA sort_item .)
    LOCK            reduce using rule 79 (sort_items -> sort_items COMMA sort_item .)
    $end            reduce using rule 79 (sort_items -> sort_items COMMA sort_item .)
    RPAREN          reduce using rule 79 (sort_items -> sort_items COMMA sort_item .)


state 330

    (80) sort_item -> value_expression order_opt null_ordering_opt .

    COMMA           reduce using rule 80 (sort_item -> value_expression order_opt null_ordering_opt .)
    LIMIT           reduce using rule 80 (sort_item -> value_expression order_opt null_ordering_opt .)
    FOR             reduce using rule 80 (sort_item -> value_expression order_opt null_ordering_opt .)
    LOCK            reduce using rule 80 (sort_item -> value_expression order_opt null_ordering_opt .)
    $end            reduce using rule 80 (sort_item -> value_expression order_opt null_ordering_opt .)
    RPAREN          reduce using rule 80 (sort_item -> value_expression order_opt null_ordering_opt .)


state 331

    (84) null_ordering_opt -> NULLS . FIRST
    (85) null_ordering_opt -> NULLS . LAST

    FIRST           shift and go to state 382
    LAST            shift and go to state 383


state 332

    (86) null_ordering_opt -> empty .

    COMMA           reduce using rule 86 (null_ordering_opt -> empty .)
    LIMIT           reduce using rule 86 (null_ordering_opt -> empty .)
    FOR             reduce using rule 86 (null_ordering_opt -> empty .)
    LOCK            reduce using rule 86 (null_ordering_opt -> empty .)
    $end            reduce using rule 86 (null_ordering_opt -> empty .)
    RPAREN          reduce using rule 86 (null_ordering_opt -> empty .)


state 333

    (61) delete -> DELETE FROM relations where_opt order_by_opt limit_opt .

    $end            reduce using rule 61 (delete -> DELETE FROM relations where_opt order_by_opt limit_opt .)


state 334

    (110) where_opt -> WHERE LPAREN search_condition . RPAREN
    (161) search_condition -> LPAREN search_condition . RPAREN
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

    RPAREN          shift and go to state 384
    OR              shift and go to state 122
    AND             shift and go to state 123


state 335

    (62) update -> UPDATE relations SET update_set_list where_opt order_by_opt . limit_opt
    (87) limit_opt -> . LIMIT INTEGER
    (88) limit_opt -> . LIMIT INTEGER COMMA INTEGER
    (89) limit_opt -> . LIMIT QM
    (90) limit_opt -> . LIMIT QM COMMA QM
    (91) limit_opt -> . LIMIT ALL
    (92) limit_opt -> . LIMIT INTEGER OFFSET INTEGER
    (93) limit_opt -> . empty
    (276) empty -> .

    LIMIT           shift and go to state 106
    $end            reduce using rule 276 (empty -> .)

    limit_opt                      shift and go to state 385
    empty                          shift and go to state 107

state 336

    (64) update_set_list -> update_set_list COMMA update_set .

    COMMA           reduce using rule 64 (update_set_list -> update_set_list COMMA update_set .)
    WHERE           reduce using rule 64 (update_set_list -> update_set_list COMMA update_set .)
    ORDER           reduce using rule 64 (update_set_list -> update_set_list COMMA update_set .)
    LIMIT           reduce using rule 64 (update_set_list -> update_set_list COMMA update_set .)
    $end            reduce using rule 64 (update_set_list -> update_set_list COMMA update_set .)


state 337

    (53) insert -> INSERT ignore INTO table_reference VALUES LPAREN . insert_value RPAREN
    (57) insert_value -> . value
    (58) insert_value -> . insert_value COMMA value
    (209) value -> . NULL
    (210) value -> . SCONST
    (211) value -> . number
    (212) value -> . boolean_value
    (213) value -> . QUOTED_IDENTIFIER
    (214) value -> . QM
    (274) number -> . DECIMAL
    (275) number -> . INTEGER
    (256) boolean_value -> . TRUE
    (257) boolean_value -> . FALSE

    NULL            shift and go to state 167
    SCONST          shift and go to state 168
    QUOTED_IDENTIFIER shift and go to state 171
    QM              shift and go to state 172
    DECIMAL         shift and go to state 181
    INTEGER         shift and go to state 182
    TRUE            shift and go to state 183
    FALSE           shift and go to state 184

    insert_value                   shift and go to state 386
    value                          shift and go to state 387
    number                         shift and go to state 169
    boolean_value                  shift and go to state 170

state 338

    (54) insert -> INSERT ignore INTO table_reference LPAREN index_column_list . RPAREN VALUES LPAREN insert_value RPAREN
    (55) insert -> INSERT ignore INTO table_reference LPAREN index_column_list . RPAREN query_spec
    (46) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 388
    COMMA           shift and go to state 389


state 339

    (45) index_column_list -> identifier .

    RPAREN          reduce using rule 45 (index_column_list -> identifier .)
    COMMA           reduce using rule 45 (index_column_list -> identifier .)


state 340

    (149) join_criteria -> ON search_condition .
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

    ORDER           reduce using rule 149 (join_criteria -> ON search_condition .)
    LIMIT           reduce using rule 149 (join_criteria -> ON search_condition .)
    FOR             reduce using rule 149 (join_criteria -> ON search_condition .)
    LOCK            reduce using rule 149 (join_criteria -> ON search_condition .)
    $end            reduce using rule 149 (join_criteria -> ON search_condition .)
    CROSS           reduce using rule 149 (join_criteria -> ON search_condition .)
    NATURAL         reduce using rule 149 (join_criteria -> ON search_condition .)
    INNER           reduce using rule 149 (join_criteria -> ON search_condition .)
    LEFT            reduce using rule 149 (join_criteria -> ON search_condition .)
    RIGHT           reduce using rule 149 (join_criteria -> ON search_condition .)
    FULL            reduce using rule 149 (join_criteria -> ON search_condition .)
    JOIN            reduce using rule 149 (join_criteria -> ON search_condition .)
    RPAREN          reduce using rule 149 (join_criteria -> ON search_condition .)
    SET             reduce using rule 149 (join_criteria -> ON search_condition .)
    COMMA           reduce using rule 149 (join_criteria -> ON search_condition .)
    WHERE           reduce using rule 149 (join_criteria -> ON search_condition .)
    FORCE           reduce using rule 149 (join_criteria -> ON search_condition .)
    GROUP           reduce using rule 149 (join_criteria -> ON search_condition .)
    HAVING          reduce using rule 149 (join_criteria -> ON search_condition .)
    INTERSECT       reduce using rule 149 (join_criteria -> ON search_condition .)
    UNION           reduce using rule 149 (join_criteria -> ON search_condition .)
    EXCEPT          reduce using rule 149 (join_criteria -> ON search_condition .)
    VALUES          reduce using rule 149 (join_criteria -> ON search_condition .)
    LPAREN          reduce using rule 149 (join_criteria -> ON search_condition .)
    SELECT          reduce using rule 149 (join_criteria -> ON search_condition .)
    ON              reduce using rule 149 (join_criteria -> ON search_condition .)
    USING           reduce using rule 149 (join_criteria -> ON search_condition .)
    OR              shift and go to state 122
    AND             shift and go to state 123


state 341

    (150) join_criteria -> USING LPAREN . join_columns RPAREN
    (152) join_columns -> . identifier
    (153) join_columns -> . join_columns COMMA identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    join_columns                   shift and go to state 390
    identifier                     shift and go to state 391
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 342

    (178) between_predicate -> value_expression not_opt BETWEEN value_expression . AND value_expression

    AND             shift and go to state 392


state 343

    (179) in_predicate -> value_expression not_opt IN in_value .

    OR              reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    AND             reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    COMMA           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    INTERSECT       reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    UNION           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    EXCEPT          reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    ORDER           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    LIMIT           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    FOR             reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    LOCK            reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    $end            reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    RPAREN          reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    GROUP           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    HAVING          reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    THEN            reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    CROSS           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    NATURAL         reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    INNER           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    LEFT            reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    RIGHT           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    FULL            reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    JOIN            reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    SET             reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    WHERE           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    FORCE           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    VALUES          reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    LPAREN          reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    SELECT          reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    ON              reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)
    USING           reduce using rule 179 (in_predicate -> value_expression not_opt IN in_value .)


state 344

    (180) in_value -> LPAREN . in_expressions RPAREN
    (67) subquery -> LPAREN . query_expression order_by_opt limit_opt RPAREN
    (182) in_expressions -> . value_expression
    (183) in_expressions -> . in_expressions COMMA value_expression
    (73) query_expression -> . query_expression_body
    (188) value_expression -> . numeric_value_expression
    (74) query_expression_body -> . nonjoin_query_expression
    (75) query_expression_body -> . joined_table
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (94) nonjoin_query_expression -> . nonjoin_query_term
    (95) nonjoin_query_expression -> . nonjoin_query_expression UNION set_quantifier_opt nonjoin_query_term
    (96) nonjoin_query_expression -> . nonjoin_query_expression EXCEPT set_quantifier_opt nonjoin_query_term
    (136) joined_table -> . cross_join
    (137) joined_table -> . qualified_join
    (138) joined_table -> . natural_join
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (97) nonjoin_query_term -> . nonjoin_query_primary
    (98) nonjoin_query_term -> . nonjoin_query_term INTERSECT set_quantifier_opt nonjoin_query_primary
    (139) cross_join -> . table_reference CROSS JOIN table_primary
    (140) qualified_join -> . table_reference join_type JOIN table_reference join_criteria
    (141) natural_join -> . table_reference NATURAL join_type JOIN table_primary
    (197) factor -> . sign_opt primary_expression
    (99) nonjoin_query_primary -> . simple_table
    (100) nonjoin_query_primary -> . LPAREN nonjoin_query_expression RPAREN
    (132) table_reference -> . table_primary
    (133) table_reference -> . joined_table
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (101) simple_table -> . query_spec
    (102) simple_table -> . explicit_table
    (103) simple_table -> . table_value_constructor
    (134) table_primary -> . aliased_relation
    (135) table_primary -> . derived_table
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .
    (108) query_spec -> . SELECT select_items table_expression_opt
    (104) explicit_table -> . TABLE qualified_name
    (105) table_value_constructor -> . VALUES values_list
    (154) aliased_relation -> . qualified_name alias_opt
    (155) derived_table -> . subquery alias_opt
    (265) qualified_name -> . qualified_name PERIOD qualified_name
    (266) qualified_name -> . identifier
    (67) subquery -> . LPAREN query_expression order_by_opt limit_opt RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for DIGIT_IDENTIFIER resolved as shift
  ! shift/reduce conflict for ASTERISK resolved as shift
  ! shift/reduce conflict for BACKQUOTED_IDENTIFIER resolved as shift
  ! shift/reduce conflict for NON_RESERVED resolved as shift
    LPAREN          shift and go to state 11
    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    SELECT          shift and go to state 37
    TABLE           shift and go to state 9
    VALUES          shift and go to state 21
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 276 (empty -> .) ]
  ! DIGIT_IDENTIFIER [ reduce using rule 276 (empty -> .) ]
  ! ASTERISK        [ reduce using rule 276 (empty -> .) ]
  ! BACKQUOTED_IDENTIFIER [ reduce using rule 276 (empty -> .) ]
  ! NON_RESERVED    [ reduce using rule 276 (empty -> .) ]

    in_expressions                 shift and go to state 393
    query_expression               shift and go to state 50
    value_expression               shift and go to state 394
    query_expression_body          shift and go to state 23
    numeric_value_expression       shift and go to state 87
    nonjoin_query_expression       shift and go to state 24
    joined_table                   shift and go to state 25
    term                           shift and go to state 89
    nonjoin_query_term             shift and go to state 26
    cross_join                     shift and go to state 27
    qualified_join                 shift and go to state 28
    natural_join                   shift and go to state 29
    factor                         shift and go to state 91
    nonjoin_query_primary          shift and go to state 30
    table_reference                shift and go to state 20
    table_primary                  shift and go to state 31
    sign_opt                       shift and go to state 92
    simple_table                   shift and go to state 32
    sign                           shift and go to state 93
    empty                          shift and go to state 94
    query_spec                     shift and go to state 22
    explicit_table                 shift and go to state 33
    table_value_constructor        shift and go to state 34
    aliased_relation               shift and go to state 35
    derived_table                  shift and go to state 36
    qualified_name                 shift and go to state 38
    subquery                       shift and go to state 39
    identifier                     shift and go to state 10
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 345

    (181) in_value -> subquery .

    OR              reduce using rule 181 (in_value -> subquery .)
    AND             reduce using rule 181 (in_value -> subquery .)
    COMMA           reduce using rule 181 (in_value -> subquery .)
    INTERSECT       reduce using rule 181 (in_value -> subquery .)
    UNION           reduce using rule 181 (in_value -> subquery .)
    EXCEPT          reduce using rule 181 (in_value -> subquery .)
    ORDER           reduce using rule 181 (in_value -> subquery .)
    LIMIT           reduce using rule 181 (in_value -> subquery .)
    FOR             reduce using rule 181 (in_value -> subquery .)
    LOCK            reduce using rule 181 (in_value -> subquery .)
    $end            reduce using rule 181 (in_value -> subquery .)
    RPAREN          reduce using rule 181 (in_value -> subquery .)
    GROUP           reduce using rule 181 (in_value -> subquery .)
    HAVING          reduce using rule 181 (in_value -> subquery .)
    THEN            reduce using rule 181 (in_value -> subquery .)
    CROSS           reduce using rule 181 (in_value -> subquery .)
    NATURAL         reduce using rule 181 (in_value -> subquery .)
    INNER           reduce using rule 181 (in_value -> subquery .)
    LEFT            reduce using rule 181 (in_value -> subquery .)
    RIGHT           reduce using rule 181 (in_value -> subquery .)
    FULL            reduce using rule 181 (in_value -> subquery .)
    JOIN            reduce using rule 181 (in_value -> subquery .)
    SET             reduce using rule 181 (in_value -> subquery .)
    WHERE           reduce using rule 181 (in_value -> subquery .)
    FORCE           reduce using rule 181 (in_value -> subquery .)
    VALUES          reduce using rule 181 (in_value -> subquery .)
    LPAREN          reduce using rule 181 (in_value -> subquery .)
    SELECT          reduce using rule 181 (in_value -> subquery .)
    ON              reduce using rule 181 (in_value -> subquery .)
    USING           reduce using rule 181 (in_value -> subquery .)


state 346

    (184) like_predicate -> value_expression not_opt LIKE value_expression .

    OR              reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    AND             reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    COMMA           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    INTERSECT       reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    UNION           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    EXCEPT          reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    ORDER           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    LIMIT           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    FOR             reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    LOCK            reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    $end            reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    RPAREN          reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    GROUP           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    HAVING          reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    THEN            reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    CROSS           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    NATURAL         reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    INNER           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    LEFT            reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    RIGHT           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    FULL            reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    JOIN            reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    SET             reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    WHERE           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    FORCE           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    VALUES          reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    LPAREN          reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    SELECT          reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    ON              reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)
    USING           reduce using rule 184 (like_predicate -> value_expression not_opt LIKE value_expression .)


state 347

    (186) null_predicate -> value_expression IS not_opt NULL .

    OR              reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    AND             reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    COMMA           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    INTERSECT       reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    UNION           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    EXCEPT          reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    ORDER           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    LIMIT           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    FOR             reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    LOCK            reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    $end            reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    RPAREN          reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    GROUP           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    HAVING          reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    THEN            reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    CROSS           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    NATURAL         reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    INNER           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    LEFT            reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    RIGHT           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    FULL            reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    JOIN            reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    SET             reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    WHERE           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    FORCE           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    VALUES          reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    LPAREN          reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    SELECT          reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    ON              reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)
    USING           reduce using rule 186 (null_predicate -> value_expression IS not_opt NULL .)


state 348

    (126) table_expression_opt -> FROM relations force_index where_opt . group_by_opt having_opt for_update_opt
    (112) group_by_opt -> . GROUP BY grouping_expressions
    (113) group_by_opt -> . empty
    (276) empty -> .

    GROUP           shift and go to state 396
    HAVING          reduce using rule 276 (empty -> .)
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    group_by_opt                   shift and go to state 395
    empty                          shift and go to state 397

state 349

    (128) force_index -> FORCE INDEX . LPAREN identifier RPAREN

    LPAREN          shift and go to state 398


state 350

    (215) function_call -> qualified_name LPAREN call_args RPAREN .

    ASTERISK        reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    SLASH           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    PERCENT         reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    CONCAT          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    PLUS            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    MINUS           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    AS              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    IDENTIFIER      reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NON_RESERVED    reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    COMMA           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    FROM            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    INTERSECT       reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    UNION           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    EXCEPT          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ORDER           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LIMIT           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    FOR             reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LOCK            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    $end            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    RPAREN          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    REGEXP          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    IS              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    EQ              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NE              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LT              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LE              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    GT              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    GE              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NOT             reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    BETWEEN         reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    IN              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LIKE            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    OR              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    AND             reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    GROUP           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    HAVING          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    THEN            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    CROSS           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NATURAL         reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    INNER           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LEFT            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    RIGHT           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    FULL            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    JOIN            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    SET             reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    WHERE           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    FORCE           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    VALUES          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    LPAREN          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    SELECT          reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ON              reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    USING           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ASC             reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    DESC            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    NULLS           reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    WHEN            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    END             reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)
    ELSE            reduce using rule 215 (function_call -> qualified_name LPAREN call_args RPAREN .)


state 351

    (216) function_call -> qualified_name LPAREN DISTINCT call_args . RPAREN

    RPAREN          shift and go to state 399


state 352

    (231) call_list -> call_list COMMA . expression
    (159) expression -> . search_condition
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    expression                     shift and go to state 400
    search_condition               shift and go to state 72
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 353

    (262) integer_param_opt -> LPAREN INTEGER RPAREN .

    ASTERISK        reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    SLASH           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    PERCENT         reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    CONCAT          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    PLUS            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    MINUS           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    AS              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    IDENTIFIER      reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NON_RESERVED    reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    COMMA           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    FROM            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    INTERSECT       reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    UNION           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    EXCEPT          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ORDER           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LIMIT           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    FOR             reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LOCK            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    $end            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    RPAREN          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    REGEXP          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    IS              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    EQ              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NE              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LT              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LE              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    GT              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    GE              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NOT             reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    BETWEEN         reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    IN              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LIKE            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    OR              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    AND             reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    GROUP           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    HAVING          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    THEN            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    CROSS           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NATURAL         reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    INNER           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LEFT            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    RIGHT           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    FULL            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    JOIN            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    SET             reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    WHERE           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    FORCE           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    VALUES          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    LPAREN          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    SELECT          reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ON              reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    USING           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ASC             reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    DESC            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    NULLS           reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    WHEN            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    END             reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)
    ELSE            reduce using rule 262 (integer_param_opt -> LPAREN INTEGER RPAREN .)


state 354

    (225) cast_specification -> CAST LPAREN value_expression AS . data_type RPAREN
    (233) data_type -> . base_data_type type_param_list_opt
    (240) base_data_type -> . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    data_type                      shift and go to state 401
    base_data_type                 shift and go to state 402
    identifier                     shift and go to state 403
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 355

    (223) simple_case -> CASE value_expression when_clauses else_opt . END

    END             shift and go to state 404


state 356

    (224) searched_case -> CASE when_clauses else_opt END .

    ASTERISK        reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    SLASH           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    PERCENT         reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    CONCAT          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    PLUS            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    MINUS           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    AS              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    IDENTIFIER      reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    DIGIT_IDENTIFIER reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    BACKQUOTED_IDENTIFIER reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    NON_RESERVED    reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    COMMA           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    FROM            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    INTERSECT       reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    UNION           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    EXCEPT          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    ORDER           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    LIMIT           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    FOR             reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    LOCK            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    $end            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    RPAREN          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    REGEXP          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    IS              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    EQ              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    NE              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    LT              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    LE              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    GT              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    GE              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    NOT             reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    BETWEEN         reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    IN              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    LIKE            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    OR              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    AND             reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    GROUP           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    HAVING          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    THEN            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    CROSS           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    NATURAL         reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    INNER           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    LEFT            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    RIGHT           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    FULL            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    JOIN            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    SET             reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    WHERE           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    FORCE           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    VALUES          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    LPAREN          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    SELECT          reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    ON              reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    USING           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    ASC             reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    DESC            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    NULLS           reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    WHEN            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    END             reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)
    ELSE            reduce using rule 224 (searched_case -> CASE when_clauses else_opt END .)


state 357

    (229) else_opt -> ELSE value_expression .

    END             reduce using rule 229 (else_opt -> ELSE value_expression .)


state 358

    (228) when_clause -> WHEN search_condition THEN . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 405
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 359

    (14) column -> identifier column_type UNIQUE .

    RPAREN          reduce using rule 14 (column -> identifier column_type UNIQUE .)
    COMMA           reduce using rule 14 (column -> identifier column_type UNIQUE .)


state 360

    (15) column_type -> INT column_end .

    UNIQUE          reduce using rule 15 (column_type -> INT column_end .)
    RPAREN          reduce using rule 15 (column_type -> INT column_end .)
    COMMA           reduce using rule 15 (column_type -> INT column_end .)


state 361

    (16) column_type -> INT LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 406


state 362

    (26) column_end -> collate . NOT NULL comment_end
    (27) column_end -> collate . NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> collate . DEFAULT NULL comment_end
    (29) column_end -> collate . NULL DEFAULT NULL comment_end
    (30) column_end -> collate . UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> collate . NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> collate . NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> collate . NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end

    NOT             shift and go to state 407
    DEFAULT         shift and go to state 409
    NULL            shift and go to state 408
    UNSIGNED        shift and go to state 410


state 363

    (34) column_end -> empty .
    (36) collate -> empty .

    UNIQUE          reduce using rule 34 (column_end -> empty .)
    RPAREN          reduce using rule 34 (column_end -> empty .)
    COMMA           reduce using rule 34 (column_end -> empty .)
    NOT             reduce using rule 36 (collate -> empty .)
    DEFAULT         reduce using rule 36 (collate -> empty .)
    NULL            reduce using rule 36 (collate -> empty .)
    UNSIGNED        reduce using rule 36 (collate -> empty .)


state 364

    (35) collate -> COLLATE . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 411
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 365

    (17) column_type -> FLOAT column_end .

    UNIQUE          reduce using rule 17 (column_type -> FLOAT column_end .)
    RPAREN          reduce using rule 17 (column_type -> FLOAT column_end .)
    COMMA           reduce using rule 17 (column_type -> FLOAT column_end .)


state 366

    (18) column_type -> BIGINT column_end .

    UNIQUE          reduce using rule 18 (column_type -> BIGINT column_end .)
    RPAREN          reduce using rule 18 (column_type -> BIGINT column_end .)
    COMMA           reduce using rule 18 (column_type -> BIGINT column_end .)


state 367

    (19) column_type -> BIGINT LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 412


state 368

    (20) column_type -> TINYINT LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 413


state 369

    (21) column_type -> DATETIME column_end .

    UNIQUE          reduce using rule 21 (column_type -> DATETIME column_end .)
    RPAREN          reduce using rule 21 (column_type -> DATETIME column_end .)
    COMMA           reduce using rule 21 (column_type -> DATETIME column_end .)


state 370

    (22) column_type -> DATETIME LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 414


state 371

    (23) column_type -> VARCHAR LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 415


state 372

    (24) column_type -> CHAR LPAREN . INTEGER RPAREN column_end

    INTEGER         shift and go to state 416


state 373

    (25) column_type -> TIMESTAMP column_end .

    UNIQUE          reduce using rule 25 (column_type -> TIMESTAMP column_end .)
    RPAREN          reduce using rule 25 (column_type -> TIMESTAMP column_end .)
    COMMA           reduce using rule 25 (column_type -> TIMESTAMP column_end .)


state 374

    (7) create_table -> CREATE TABLE identifier LPAREN column_list RPAREN create_table_end .

    $end            reduce using rule 7 (create_table -> CREATE TABLE identifier LPAREN column_list RPAREN create_table_end .)


state 375

    (9) create_table_end -> ENGINE . EQ identifier DEFAULT CHARSET EQ identifier

    EQ              shift and go to state 417


state 376

    (10) create_table_end -> DEFAULT . CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    CHARSET         shift and go to state 418


state 377

    (8) create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause . RPAREN create_table_end

    RPAREN          shift and go to state 419


state 378

    (12) column_list -> column_list COMMA column .

    RPAREN          reduce using rule 12 (column_list -> column_list COMMA column .)
    COMMA           reduce using rule 12 (column_list -> column_list COMMA column .)


state 379

    (39) primary_clause -> PRIMARY . KEY LPAREN index_column_list RPAREN
    (40) primary_clause -> PRIMARY . KEY LPAREN index_column_list RPAREN COMMA index_list

    KEY             shift and go to state 420


state 380

    (70) for_update_opt -> FOR UPDATE WAIT INTEGER .

    $end            reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    INTERSECT       reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    UNION           reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    EXCEPT          reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    ORDER           reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    LIMIT           reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    FOR             reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    LOCK            reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)
    RPAREN          reduce using rule 70 (for_update_opt -> FOR UPDATE WAIT INTEGER .)


state 381

    (71) for_update_opt -> LOCK IN SHARE MODE .

    $end            reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    INTERSECT       reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    UNION           reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    EXCEPT          reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    ORDER           reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    LIMIT           reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    FOR             reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    LOCK            reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)
    RPAREN          reduce using rule 71 (for_update_opt -> LOCK IN SHARE MODE .)


state 382

    (84) null_ordering_opt -> NULLS FIRST .

    COMMA           reduce using rule 84 (null_ordering_opt -> NULLS FIRST .)
    LIMIT           reduce using rule 84 (null_ordering_opt -> NULLS FIRST .)
    FOR             reduce using rule 84 (null_ordering_opt -> NULLS FIRST .)
    LOCK            reduce using rule 84 (null_ordering_opt -> NULLS FIRST .)
    $end            reduce using rule 84 (null_ordering_opt -> NULLS FIRST .)
    RPAREN          reduce using rule 84 (null_ordering_opt -> NULLS FIRST .)


state 383

    (85) null_ordering_opt -> NULLS LAST .

    COMMA           reduce using rule 85 (null_ordering_opt -> NULLS LAST .)
    LIMIT           reduce using rule 85 (null_ordering_opt -> NULLS LAST .)
    FOR             reduce using rule 85 (null_ordering_opt -> NULLS LAST .)
    LOCK            reduce using rule 85 (null_ordering_opt -> NULLS LAST .)
    $end            reduce using rule 85 (null_ordering_opt -> NULLS LAST .)
    RPAREN          reduce using rule 85 (null_ordering_opt -> NULLS LAST .)


state 384

    (110) where_opt -> WHERE LPAREN search_condition RPAREN .
    (161) search_condition -> LPAREN search_condition RPAREN .

  ! reduce/reduce conflict for ORDER resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for LIMIT resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for GROUP resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for HAVING resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for LOCK resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for INTERSECT resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for UNION resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for EXCEPT resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    ORDER           reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    LIMIT           reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    $end            reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    GROUP           reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    HAVING          reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    FOR             reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    LOCK            reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    INTERSECT       reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    UNION           reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    EXCEPT          reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    RPAREN          reduce using rule 110 (where_opt -> WHERE LPAREN search_condition RPAREN .)
    OR              reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)
    AND             reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .)

  ! ORDER           [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! LIMIT           [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! $end            [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! GROUP           [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! HAVING          [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! FOR             [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! LOCK            [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! INTERSECT       [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! UNION           [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! EXCEPT          [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]
  ! RPAREN          [ reduce using rule 161 (search_condition -> LPAREN search_condition RPAREN .) ]


state 385

    (62) update -> UPDATE relations SET update_set_list where_opt order_by_opt limit_opt .

    $end            reduce using rule 62 (update -> UPDATE relations SET update_set_list where_opt order_by_opt limit_opt .)


state 386

    (53) insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value . RPAREN
    (58) insert_value -> insert_value . COMMA value

    RPAREN          shift and go to state 421
    COMMA           shift and go to state 422


state 387

    (57) insert_value -> value .

    RPAREN          reduce using rule 57 (insert_value -> value .)
    COMMA           reduce using rule 57 (insert_value -> value .)


state 388

    (54) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN . VALUES LPAREN insert_value RPAREN
    (55) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN . query_spec
    (108) query_spec -> . SELECT select_items table_expression_opt

    VALUES          shift and go to state 423
    SELECT          shift and go to state 37

    query_spec                     shift and go to state 424

state 389

    (46) index_column_list -> index_column_list COMMA . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 425
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 390

    (150) join_criteria -> USING LPAREN join_columns . RPAREN
    (153) join_columns -> join_columns . COMMA identifier

    RPAREN          shift and go to state 426
    COMMA           shift and go to state 427


state 391

    (152) join_columns -> identifier .

    RPAREN          reduce using rule 152 (join_columns -> identifier .)
    COMMA           reduce using rule 152 (join_columns -> identifier .)


state 392

    (178) between_predicate -> value_expression not_opt BETWEEN value_expression AND . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 428
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 393

    (180) in_value -> LPAREN in_expressions . RPAREN
    (183) in_expressions -> in_expressions . COMMA value_expression

    RPAREN          shift and go to state 429
    COMMA           shift and go to state 430


state 394

    (182) in_expressions -> value_expression .

    RPAREN          reduce using rule 182 (in_expressions -> value_expression .)
    COMMA           reduce using rule 182 (in_expressions -> value_expression .)


state 395

    (126) table_expression_opt -> FROM relations force_index where_opt group_by_opt . having_opt for_update_opt
    (116) having_opt -> . HAVING search_condition
    (117) having_opt -> . empty
    (276) empty -> .

    HAVING          shift and go to state 432
    FOR             reduce using rule 276 (empty -> .)
    LOCK            reduce using rule 276 (empty -> .)
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    having_opt                     shift and go to state 431
    empty                          shift and go to state 433

state 396

    (112) group_by_opt -> GROUP . BY grouping_expressions

    BY              shift and go to state 434


state 397

    (113) group_by_opt -> empty .

    HAVING          reduce using rule 113 (group_by_opt -> empty .)
    FOR             reduce using rule 113 (group_by_opt -> empty .)
    LOCK            reduce using rule 113 (group_by_opt -> empty .)
    INTERSECT       reduce using rule 113 (group_by_opt -> empty .)
    UNION           reduce using rule 113 (group_by_opt -> empty .)
    EXCEPT          reduce using rule 113 (group_by_opt -> empty .)
    ORDER           reduce using rule 113 (group_by_opt -> empty .)
    LIMIT           reduce using rule 113 (group_by_opt -> empty .)
    $end            reduce using rule 113 (group_by_opt -> empty .)
    RPAREN          reduce using rule 113 (group_by_opt -> empty .)


state 398

    (128) force_index -> FORCE INDEX LPAREN . identifier RPAREN
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 435
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 399

    (216) function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .

    ASTERISK        reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    SLASH           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    PERCENT         reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    CONCAT          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    PLUS            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    MINUS           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    AS              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    IDENTIFIER      reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NON_RESERVED    reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    COMMA           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    FROM            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    INTERSECT       reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    UNION           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    EXCEPT          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ORDER           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LIMIT           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    FOR             reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LOCK            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    $end            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    RPAREN          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    REGEXP          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    IS              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    EQ              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NE              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LT              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LE              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    GT              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    GE              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NOT             reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    BETWEEN         reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    IN              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LIKE            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    OR              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    AND             reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    GROUP           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    HAVING          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    THEN            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    CROSS           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NATURAL         reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    INNER           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LEFT            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    RIGHT           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    FULL            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    JOIN            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    SET             reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    WHERE           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    FORCE           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    VALUES          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    LPAREN          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    SELECT          reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ON              reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    USING           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ASC             reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    DESC            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    NULLS           reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    WHEN            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    END             reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)
    ELSE            reduce using rule 216 (function_call -> qualified_name LPAREN DISTINCT call_args RPAREN .)


state 400

    (231) call_list -> call_list COMMA expression .

    COMMA           reduce using rule 231 (call_list -> call_list COMMA expression .)
    RPAREN          reduce using rule 231 (call_list -> call_list COMMA expression .)


state 401

    (225) cast_specification -> CAST LPAREN value_expression AS data_type . RPAREN

    RPAREN          shift and go to state 436


state 402

    (233) data_type -> base_data_type . type_param_list_opt
    (234) type_param_list_opt -> . LPAREN type_param_list RPAREN
    (235) type_param_list_opt -> . empty
    (276) empty -> .

    LPAREN          shift and go to state 438
    RPAREN          reduce using rule 276 (empty -> .)

    type_param_list_opt            shift and go to state 437
    empty                          shift and go to state 439

state 403

    (240) base_data_type -> identifier .

    LPAREN          reduce using rule 240 (base_data_type -> identifier .)
    RPAREN          reduce using rule 240 (base_data_type -> identifier .)
    COMMA           reduce using rule 240 (base_data_type -> identifier .)


state 404

    (223) simple_case -> CASE value_expression when_clauses else_opt END .

    ASTERISK        reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    SLASH           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    PERCENT         reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    CONCAT          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    PLUS            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    MINUS           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    AS              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    IDENTIFIER      reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    DIGIT_IDENTIFIER reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    BACKQUOTED_IDENTIFIER reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NON_RESERVED    reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    COMMA           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    FROM            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    INTERSECT       reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    UNION           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    EXCEPT          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ORDER           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LIMIT           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    FOR             reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LOCK            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    $end            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    RPAREN          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    REGEXP          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    IS              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    EQ              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NE              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LT              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LE              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    GT              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    GE              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NOT             reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    BETWEEN         reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    IN              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LIKE            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    OR              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    AND             reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    GROUP           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    HAVING          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    THEN            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    CROSS           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NATURAL         reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    INNER           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LEFT            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    RIGHT           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    FULL            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    JOIN            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    SET             reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    WHERE           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    FORCE           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    VALUES          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    LPAREN          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    SELECT          reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ON              reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    USING           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ASC             reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    DESC            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    NULLS           reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    WHEN            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    END             reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)
    ELSE            reduce using rule 223 (simple_case -> CASE value_expression when_clauses else_opt END .)


state 405

    (228) when_clause -> WHEN search_condition THEN value_expression .

    ELSE            reduce using rule 228 (when_clause -> WHEN search_condition THEN value_expression .)
    WHEN            reduce using rule 228 (when_clause -> WHEN search_condition THEN value_expression .)
    END             reduce using rule 228 (when_clause -> WHEN search_condition THEN value_expression .)


state 406

    (16) column_type -> INT LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 440


state 407

    (26) column_end -> collate NOT . NULL comment_end
    (27) column_end -> collate NOT . NULL DEFAULT SCONST comment_end
    (31) column_end -> collate NOT . NULL AUTO_INCREMENT comment_end
    (32) column_end -> collate NOT . NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> collate NOT . NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end

    NULL            shift and go to state 441


state 408

    (29) column_end -> collate NULL . DEFAULT NULL comment_end

    DEFAULT         shift and go to state 442


state 409

    (28) column_end -> collate DEFAULT . NULL comment_end

    NULL            shift and go to state 443


state 410

    (30) column_end -> collate UNSIGNED . AUTO_INCREMENT comment_end

    AUTO_INCREMENT  shift and go to state 444


state 411

    (35) collate -> COLLATE identifier .

    NOT             reduce using rule 35 (collate -> COLLATE identifier .)
    DEFAULT         reduce using rule 35 (collate -> COLLATE identifier .)
    NULL            reduce using rule 35 (collate -> COLLATE identifier .)
    UNSIGNED        reduce using rule 35 (collate -> COLLATE identifier .)


state 412

    (19) column_type -> BIGINT LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 445


state 413

    (20) column_type -> TINYINT LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 446


state 414

    (22) column_type -> DATETIME LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 447


state 415

    (23) column_type -> VARCHAR LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 448


state 416

    (24) column_type -> CHAR LPAREN INTEGER . RPAREN column_end

    RPAREN          shift and go to state 449


state 417

    (9) create_table_end -> ENGINE EQ . identifier DEFAULT CHARSET EQ identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 450
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 418

    (10) create_table_end -> DEFAULT CHARSET . EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 451


state 419

    (8) create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN . create_table_end
    (9) create_table_end -> . ENGINE EQ identifier DEFAULT CHARSET EQ identifier
    (10) create_table_end -> . DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    ENGINE          shift and go to state 375
    DEFAULT         shift and go to state 376

    create_table_end               shift and go to state 452

state 420

    (39) primary_clause -> PRIMARY KEY . LPAREN index_column_list RPAREN
    (40) primary_clause -> PRIMARY KEY . LPAREN index_column_list RPAREN COMMA index_list

    LPAREN          shift and go to state 453


state 421

    (53) insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN .

    $end            reduce using rule 53 (insert -> INSERT ignore INTO table_reference VALUES LPAREN insert_value RPAREN .)


state 422

    (58) insert_value -> insert_value COMMA . value
    (209) value -> . NULL
    (210) value -> . SCONST
    (211) value -> . number
    (212) value -> . boolean_value
    (213) value -> . QUOTED_IDENTIFIER
    (214) value -> . QM
    (274) number -> . DECIMAL
    (275) number -> . INTEGER
    (256) boolean_value -> . TRUE
    (257) boolean_value -> . FALSE

    NULL            shift and go to state 167
    SCONST          shift and go to state 168
    QUOTED_IDENTIFIER shift and go to state 171
    QM              shift and go to state 172
    DECIMAL         shift and go to state 181
    INTEGER         shift and go to state 182
    TRUE            shift and go to state 183
    FALSE           shift and go to state 184

    value                          shift and go to state 454
    number                         shift and go to state 169
    boolean_value                  shift and go to state 170

state 423

    (54) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES . LPAREN insert_value RPAREN

    LPAREN          shift and go to state 455


state 424

    (55) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec .

    $end            reduce using rule 55 (insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN query_spec .)


state 425

    (46) index_column_list -> index_column_list COMMA identifier .

    RPAREN          reduce using rule 46 (index_column_list -> index_column_list COMMA identifier .)
    COMMA           reduce using rule 46 (index_column_list -> index_column_list COMMA identifier .)


state 426

    (150) join_criteria -> USING LPAREN join_columns RPAREN .

    ORDER           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    LIMIT           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    FOR             reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    LOCK            reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    $end            reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    CROSS           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    NATURAL         reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    INNER           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    LEFT            reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    RIGHT           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    FULL            reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    JOIN            reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    RPAREN          reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    SET             reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    COMMA           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    WHERE           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    FORCE           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    GROUP           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    HAVING          reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    INTERSECT       reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    UNION           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    EXCEPT          reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    VALUES          reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    LPAREN          reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    SELECT          reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    ON              reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)
    USING           reduce using rule 150 (join_criteria -> USING LPAREN join_columns RPAREN .)


state 427

    (153) join_columns -> join_columns COMMA . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 456
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 428

    (178) between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .

    OR              reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    AND             reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    COMMA           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    INTERSECT       reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    UNION           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    EXCEPT          reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    ORDER           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    LIMIT           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    FOR             reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    LOCK            reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    $end            reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    RPAREN          reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    GROUP           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    HAVING          reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    THEN            reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    CROSS           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    NATURAL         reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    INNER           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    LEFT            reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    RIGHT           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    FULL            reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    JOIN            reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    SET             reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    WHERE           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    FORCE           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    VALUES          reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    LPAREN          reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    SELECT          reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    ON              reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)
    USING           reduce using rule 178 (between_predicate -> value_expression not_opt BETWEEN value_expression AND value_expression .)


state 429

    (180) in_value -> LPAREN in_expressions RPAREN .

    OR              reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    AND             reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    COMMA           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    INTERSECT       reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    UNION           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    EXCEPT          reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    ORDER           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    LIMIT           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    FOR             reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    LOCK            reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    $end            reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    RPAREN          reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    GROUP           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    HAVING          reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    THEN            reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    CROSS           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    NATURAL         reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    INNER           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    LEFT            reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    RIGHT           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    FULL            reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    JOIN            reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    SET             reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    WHERE           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    FORCE           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    VALUES          reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    LPAREN          reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    SELECT          reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    ON              reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)
    USING           reduce using rule 180 (in_value -> LPAREN in_expressions RPAREN .)


state 430

    (183) in_expressions -> in_expressions COMMA . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 457
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 431

    (126) table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt . for_update_opt
    (68) for_update_opt -> . FOR UPDATE
    (69) for_update_opt -> . FOR UPDATE NOWAIT
    (70) for_update_opt -> . FOR UPDATE WAIT INTEGER
    (71) for_update_opt -> . LOCK IN SHARE MODE
    (72) for_update_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LOCK resolved as shift
    FOR             shift and go to state 191
    LOCK            shift and go to state 192
    INTERSECT       reduce using rule 276 (empty -> .)
    UNION           reduce using rule 276 (empty -> .)
    EXCEPT          reduce using rule 276 (empty -> .)
    ORDER           reduce using rule 276 (empty -> .)
    LIMIT           reduce using rule 276 (empty -> .)
    $end            reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

  ! FOR             [ reduce using rule 276 (empty -> .) ]
  ! LOCK            [ reduce using rule 276 (empty -> .) ]

    for_update_opt                 shift and go to state 458
    empty                          shift and go to state 193

state 432

    (116) having_opt -> HAVING . search_condition
    (160) search_condition -> . boolean_term
    (161) search_condition -> . LPAREN search_condition RPAREN
    (162) search_condition -> . search_condition OR search_condition
    (163) search_condition -> . search_condition AND search_condition
    (164) boolean_term -> . boolean_factor
    (165) boolean_term -> . LPAREN boolean_term RPAREN
    (166) boolean_factor -> . not_opt boolean_test
    (254) not_opt -> . NOT
    (255) not_opt -> . empty
    (276) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 74
    NOT             shift and go to state 77
    EXISTS          reduce using rule 276 (empty -> .)
    PLUS            reduce using rule 276 (empty -> .)
    MINUS           reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

  ! LPAREN          [ reduce using rule 276 (empty -> .) ]

    search_condition               shift and go to state 459
    boolean_term                   shift and go to state 73
    boolean_factor                 shift and go to state 75
    not_opt                        shift and go to state 76
    empty                          shift and go to state 78

state 433

    (117) having_opt -> empty .

    FOR             reduce using rule 117 (having_opt -> empty .)
    LOCK            reduce using rule 117 (having_opt -> empty .)
    INTERSECT       reduce using rule 117 (having_opt -> empty .)
    UNION           reduce using rule 117 (having_opt -> empty .)
    EXCEPT          reduce using rule 117 (having_opt -> empty .)
    ORDER           reduce using rule 117 (having_opt -> empty .)
    LIMIT           reduce using rule 117 (having_opt -> empty .)
    $end            reduce using rule 117 (having_opt -> empty .)
    RPAREN          reduce using rule 117 (having_opt -> empty .)


state 434

    (112) group_by_opt -> GROUP BY . grouping_expressions
    (114) grouping_expressions -> . value_expression
    (115) grouping_expressions -> . grouping_expressions COMMA value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    grouping_expressions           shift and go to state 460
    value_expression               shift and go to state 461
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 435

    (128) force_index -> FORCE INDEX LPAREN identifier . RPAREN

    RPAREN          shift and go to state 462


state 436

    (225) cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .

    ASTERISK        reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    SLASH           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    PERCENT         reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    CONCAT          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    PLUS            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    MINUS           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    AS              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    IDENTIFIER      reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    DIGIT_IDENTIFIER reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    BACKQUOTED_IDENTIFIER reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NON_RESERVED    reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    COMMA           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    FROM            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    INTERSECT       reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    UNION           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    EXCEPT          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ORDER           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LIMIT           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    FOR             reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LOCK            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    $end            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    RPAREN          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    REGEXP          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    IS              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    EQ              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NE              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LT              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LE              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    GT              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    GE              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NOT             reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    BETWEEN         reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    IN              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LIKE            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    OR              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    AND             reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    GROUP           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    HAVING          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    THEN            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    CROSS           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NATURAL         reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    INNER           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LEFT            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    RIGHT           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    FULL            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    JOIN            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    SET             reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    WHERE           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    FORCE           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    VALUES          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    LPAREN          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    SELECT          reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ON              reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    USING           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ASC             reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    DESC            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    NULLS           reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    WHEN            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    END             reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)
    ELSE            reduce using rule 225 (cast_specification -> CAST LPAREN value_expression AS data_type RPAREN .)


state 437

    (233) data_type -> base_data_type type_param_list_opt .

    RPAREN          reduce using rule 233 (data_type -> base_data_type type_param_list_opt .)


state 438

    (234) type_param_list_opt -> LPAREN . type_param_list RPAREN
    (236) type_param_list -> . type_param_list COMMA type_parameter
    (237) type_param_list -> . type_parameter
    (238) type_parameter -> . INTEGER
    (239) type_parameter -> . base_data_type
    (240) base_data_type -> . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    INTEGER         shift and go to state 465
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    type_param_list                shift and go to state 463
    type_parameter                 shift and go to state 464
    base_data_type                 shift and go to state 466
    identifier                     shift and go to state 403
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 439

    (235) type_param_list_opt -> empty .

    RPAREN          reduce using rule 235 (type_param_list_opt -> empty .)


state 440

    (16) column_type -> INT LPAREN INTEGER RPAREN . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 467
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 441

    (26) column_end -> collate NOT NULL . comment_end
    (27) column_end -> collate NOT NULL . DEFAULT SCONST comment_end
    (31) column_end -> collate NOT NULL . AUTO_INCREMENT comment_end
    (32) column_end -> collate NOT NULL . DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> collate NOT NULL . DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    DEFAULT         shift and go to state 469
    AUTO_INCREMENT  shift and go to state 470
    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 468
    empty                          shift and go to state 472

state 442

    (29) column_end -> collate NULL DEFAULT . NULL comment_end

    NULL            shift and go to state 473


state 443

    (28) column_end -> collate DEFAULT NULL . comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 474
    empty                          shift and go to state 472

state 444

    (30) column_end -> collate UNSIGNED AUTO_INCREMENT . comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 475
    empty                          shift and go to state 472

state 445

    (19) column_type -> BIGINT LPAREN INTEGER RPAREN . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 476
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 446

    (20) column_type -> TINYINT LPAREN INTEGER RPAREN . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 477
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 447

    (22) column_type -> DATETIME LPAREN INTEGER RPAREN . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 478
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 448

    (23) column_type -> VARCHAR LPAREN INTEGER RPAREN . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 479
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 449

    (24) column_type -> CHAR LPAREN INTEGER RPAREN . column_end
    (26) column_end -> . collate NOT NULL comment_end
    (27) column_end -> . collate NOT NULL DEFAULT SCONST comment_end
    (28) column_end -> . collate DEFAULT NULL comment_end
    (29) column_end -> . collate NULL DEFAULT NULL comment_end
    (30) column_end -> . collate UNSIGNED AUTO_INCREMENT comment_end
    (31) column_end -> . collate NOT NULL AUTO_INCREMENT comment_end
    (32) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end
    (33) column_end -> . collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end
    (34) column_end -> . empty
    (35) collate -> . COLLATE identifier
    (36) collate -> . empty
    (276) empty -> .

    COLLATE         shift and go to state 364
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)
    NOT             reduce using rule 276 (empty -> .)
    DEFAULT         reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    UNSIGNED        reduce using rule 276 (empty -> .)

    column_end                     shift and go to state 480
    collate                        shift and go to state 362
    empty                          shift and go to state 363

state 450

    (9) create_table_end -> ENGINE EQ identifier . DEFAULT CHARSET EQ identifier

    DEFAULT         shift and go to state 481


state 451

    (10) create_table_end -> DEFAULT CHARSET EQ . identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 482
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 452

    (8) create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end .

    $end            reduce using rule 8 (create_table -> CREATE TABLE identifier LPAREN column_list COMMA primary_clause RPAREN create_table_end .)


state 453

    (39) primary_clause -> PRIMARY KEY LPAREN . index_column_list RPAREN
    (40) primary_clause -> PRIMARY KEY LPAREN . index_column_list RPAREN COMMA index_list
    (45) index_column_list -> . identifier
    (46) index_column_list -> . index_column_list COMMA identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    index_column_list              shift and go to state 483
    identifier                     shift and go to state 339
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 454

    (58) insert_value -> insert_value COMMA value .

    RPAREN          reduce using rule 58 (insert_value -> insert_value COMMA value .)
    COMMA           reduce using rule 58 (insert_value -> insert_value COMMA value .)


state 455

    (54) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN . insert_value RPAREN
    (57) insert_value -> . value
    (58) insert_value -> . insert_value COMMA value
    (209) value -> . NULL
    (210) value -> . SCONST
    (211) value -> . number
    (212) value -> . boolean_value
    (213) value -> . QUOTED_IDENTIFIER
    (214) value -> . QM
    (274) number -> . DECIMAL
    (275) number -> . INTEGER
    (256) boolean_value -> . TRUE
    (257) boolean_value -> . FALSE

    NULL            shift and go to state 167
    SCONST          shift and go to state 168
    QUOTED_IDENTIFIER shift and go to state 171
    QM              shift and go to state 172
    DECIMAL         shift and go to state 181
    INTEGER         shift and go to state 182
    TRUE            shift and go to state 183
    FALSE           shift and go to state 184

    insert_value                   shift and go to state 484
    value                          shift and go to state 387
    number                         shift and go to state 169
    boolean_value                  shift and go to state 170

state 456

    (153) join_columns -> join_columns COMMA identifier .

    RPAREN          reduce using rule 153 (join_columns -> join_columns COMMA identifier .)
    COMMA           reduce using rule 153 (join_columns -> join_columns COMMA identifier .)


state 457

    (183) in_expressions -> in_expressions COMMA value_expression .

    RPAREN          reduce using rule 183 (in_expressions -> in_expressions COMMA value_expression .)
    COMMA           reduce using rule 183 (in_expressions -> in_expressions COMMA value_expression .)


state 458

    (126) table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .

    INTERSECT       reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    UNION           reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    EXCEPT          reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    ORDER           reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    LIMIT           reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    FOR             reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    LOCK            reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    $end            reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)
    RPAREN          reduce using rule 126 (table_expression_opt -> FROM relations force_index where_opt group_by_opt having_opt for_update_opt .)


state 459

    (116) having_opt -> HAVING search_condition .
    (162) search_condition -> search_condition . OR search_condition
    (163) search_condition -> search_condition . AND search_condition

    FOR             reduce using rule 116 (having_opt -> HAVING search_condition .)
    LOCK            reduce using rule 116 (having_opt -> HAVING search_condition .)
    INTERSECT       reduce using rule 116 (having_opt -> HAVING search_condition .)
    UNION           reduce using rule 116 (having_opt -> HAVING search_condition .)
    EXCEPT          reduce using rule 116 (having_opt -> HAVING search_condition .)
    ORDER           reduce using rule 116 (having_opt -> HAVING search_condition .)
    LIMIT           reduce using rule 116 (having_opt -> HAVING search_condition .)
    $end            reduce using rule 116 (having_opt -> HAVING search_condition .)
    RPAREN          reduce using rule 116 (having_opt -> HAVING search_condition .)
    OR              shift and go to state 122
    AND             shift and go to state 123


state 460

    (112) group_by_opt -> GROUP BY grouping_expressions .
    (115) grouping_expressions -> grouping_expressions . COMMA value_expression

    HAVING          reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    FOR             reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    LOCK            reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    INTERSECT       reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    UNION           reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    EXCEPT          reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    ORDER           reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    LIMIT           reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    $end            reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    RPAREN          reduce using rule 112 (group_by_opt -> GROUP BY grouping_expressions .)
    COMMA           shift and go to state 485


state 461

    (114) grouping_expressions -> value_expression .

    COMMA           reduce using rule 114 (grouping_expressions -> value_expression .)
    HAVING          reduce using rule 114 (grouping_expressions -> value_expression .)
    FOR             reduce using rule 114 (grouping_expressions -> value_expression .)
    LOCK            reduce using rule 114 (grouping_expressions -> value_expression .)
    INTERSECT       reduce using rule 114 (grouping_expressions -> value_expression .)
    UNION           reduce using rule 114 (grouping_expressions -> value_expression .)
    EXCEPT          reduce using rule 114 (grouping_expressions -> value_expression .)
    ORDER           reduce using rule 114 (grouping_expressions -> value_expression .)
    LIMIT           reduce using rule 114 (grouping_expressions -> value_expression .)
    $end            reduce using rule 114 (grouping_expressions -> value_expression .)
    RPAREN          reduce using rule 114 (grouping_expressions -> value_expression .)


state 462

    (128) force_index -> FORCE INDEX LPAREN identifier RPAREN .

    WHERE           reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    GROUP           reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    HAVING          reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    FOR             reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    LOCK            reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    INTERSECT       reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    UNION           reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    EXCEPT          reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    ORDER           reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    LIMIT           reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    $end            reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)
    RPAREN          reduce using rule 128 (force_index -> FORCE INDEX LPAREN identifier RPAREN .)


state 463

    (234) type_param_list_opt -> LPAREN type_param_list . RPAREN
    (236) type_param_list -> type_param_list . COMMA type_parameter

    RPAREN          shift and go to state 486
    COMMA           shift and go to state 487


state 464

    (237) type_param_list -> type_parameter .

    RPAREN          reduce using rule 237 (type_param_list -> type_parameter .)
    COMMA           reduce using rule 237 (type_param_list -> type_parameter .)


state 465

    (238) type_parameter -> INTEGER .

    RPAREN          reduce using rule 238 (type_parameter -> INTEGER .)
    COMMA           reduce using rule 238 (type_parameter -> INTEGER .)


state 466

    (239) type_parameter -> base_data_type .

    RPAREN          reduce using rule 239 (type_parameter -> base_data_type .)
    COMMA           reduce using rule 239 (type_parameter -> base_data_type .)


state 467

    (16) column_type -> INT LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 16 (column_type -> INT LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 16 (column_type -> INT LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 16 (column_type -> INT LPAREN INTEGER RPAREN column_end .)


state 468

    (26) column_end -> collate NOT NULL comment_end .

    UNIQUE          reduce using rule 26 (column_end -> collate NOT NULL comment_end .)
    RPAREN          reduce using rule 26 (column_end -> collate NOT NULL comment_end .)
    COMMA           reduce using rule 26 (column_end -> collate NOT NULL comment_end .)


state 469

    (27) column_end -> collate NOT NULL DEFAULT . SCONST comment_end
    (32) column_end -> collate NOT NULL DEFAULT . CURRENT_TIMESTAMP comment_end
    (33) column_end -> collate NOT NULL DEFAULT . CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end

    SCONST          shift and go to state 488
    CURRENT_TIMESTAMP shift and go to state 489


state 470

    (31) column_end -> collate NOT NULL AUTO_INCREMENT . comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 490
    empty                          shift and go to state 472

state 471

    (37) comment_end -> COMMENT . SCONST

    SCONST          shift and go to state 491


state 472

    (38) comment_end -> empty .

    UNIQUE          reduce using rule 38 (comment_end -> empty .)
    RPAREN          reduce using rule 38 (comment_end -> empty .)
    COMMA           reduce using rule 38 (comment_end -> empty .)


state 473

    (29) column_end -> collate NULL DEFAULT NULL . comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 492
    empty                          shift and go to state 472

state 474

    (28) column_end -> collate DEFAULT NULL comment_end .

    UNIQUE          reduce using rule 28 (column_end -> collate DEFAULT NULL comment_end .)
    RPAREN          reduce using rule 28 (column_end -> collate DEFAULT NULL comment_end .)
    COMMA           reduce using rule 28 (column_end -> collate DEFAULT NULL comment_end .)


state 475

    (30) column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .

    UNIQUE          reduce using rule 30 (column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .)
    RPAREN          reduce using rule 30 (column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .)
    COMMA           reduce using rule 30 (column_end -> collate UNSIGNED AUTO_INCREMENT comment_end .)


state 476

    (19) column_type -> BIGINT LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 19 (column_type -> BIGINT LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 19 (column_type -> BIGINT LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 19 (column_type -> BIGINT LPAREN INTEGER RPAREN column_end .)


state 477

    (20) column_type -> TINYINT LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 20 (column_type -> TINYINT LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 20 (column_type -> TINYINT LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 20 (column_type -> TINYINT LPAREN INTEGER RPAREN column_end .)


state 478

    (22) column_type -> DATETIME LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 22 (column_type -> DATETIME LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 22 (column_type -> DATETIME LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 22 (column_type -> DATETIME LPAREN INTEGER RPAREN column_end .)


state 479

    (23) column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 23 (column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 23 (column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 23 (column_type -> VARCHAR LPAREN INTEGER RPAREN column_end .)


state 480

    (24) column_type -> CHAR LPAREN INTEGER RPAREN column_end .

    UNIQUE          reduce using rule 24 (column_type -> CHAR LPAREN INTEGER RPAREN column_end .)
    RPAREN          reduce using rule 24 (column_type -> CHAR LPAREN INTEGER RPAREN column_end .)
    COMMA           reduce using rule 24 (column_type -> CHAR LPAREN INTEGER RPAREN column_end .)


state 481

    (9) create_table_end -> ENGINE EQ identifier DEFAULT . CHARSET EQ identifier

    CHARSET         shift and go to state 493


state 482

    (10) create_table_end -> DEFAULT CHARSET EQ identifier . COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    COLLATE         shift and go to state 494


state 483

    (39) primary_clause -> PRIMARY KEY LPAREN index_column_list . RPAREN
    (40) primary_clause -> PRIMARY KEY LPAREN index_column_list . RPAREN COMMA index_list
    (46) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 495
    COMMA           shift and go to state 389


state 484

    (54) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value . RPAREN
    (58) insert_value -> insert_value . COMMA value

    RPAREN          shift and go to state 496
    COMMA           shift and go to state 422


state 485

    (115) grouping_expressions -> grouping_expressions COMMA . value_expression
    (188) value_expression -> . numeric_value_expression
    (189) numeric_value_expression -> . numeric_value_expression PLUS term
    (190) numeric_value_expression -> . numeric_value_expression MINUS term
    (191) numeric_value_expression -> . term
    (192) term -> . term ASTERISK factor
    (193) term -> . term SLASH factor
    (194) term -> . term PERCENT factor
    (195) term -> . term CONCAT factor
    (196) term -> . factor
    (197) factor -> . sign_opt primary_expression
    (258) sign_opt -> . sign
    (259) sign_opt -> . empty
    (260) sign -> . PLUS
    (261) sign -> . MINUS
    (276) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 90
    LPAREN          reduce using rule 276 (empty -> .)
    NULL            reduce using rule 276 (empty -> .)
    SCONST          reduce using rule 276 (empty -> .)
    QUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    QM              reduce using rule 276 (empty -> .)
    CURRENT_DATE    reduce using rule 276 (empty -> .)
    CURRENT_TIME    reduce using rule 276 (empty -> .)
    CURRENT_TIMESTAMP reduce using rule 276 (empty -> .)
    LOCALTIME       reduce using rule 276 (empty -> .)
    LOCALTIMESTAMP  reduce using rule 276 (empty -> .)
    CAST            reduce using rule 276 (empty -> .)
    DECIMAL         reduce using rule 276 (empty -> .)
    INTEGER         reduce using rule 276 (empty -> .)
    TRUE            reduce using rule 276 (empty -> .)
    FALSE           reduce using rule 276 (empty -> .)
    IDENTIFIER      reduce using rule 276 (empty -> .)
    DIGIT_IDENTIFIER reduce using rule 276 (empty -> .)
    ASTERISK        reduce using rule 276 (empty -> .)
    CASE            reduce using rule 276 (empty -> .)
    BACKQUOTED_IDENTIFIER reduce using rule 276 (empty -> .)
    NON_RESERVED    reduce using rule 276 (empty -> .)

    value_expression               shift and go to state 497
    numeric_value_expression       shift and go to state 87
    term                           shift and go to state 89
    factor                         shift and go to state 91
    sign_opt                       shift and go to state 92
    sign                           shift and go to state 93
    empty                          shift and go to state 94

state 486

    (234) type_param_list_opt -> LPAREN type_param_list RPAREN .

    RPAREN          reduce using rule 234 (type_param_list_opt -> LPAREN type_param_list RPAREN .)


state 487

    (236) type_param_list -> type_param_list COMMA . type_parameter
    (238) type_parameter -> . INTEGER
    (239) type_parameter -> . base_data_type
    (240) base_data_type -> . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    INTEGER         shift and go to state 465
    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    type_parameter                 shift and go to state 498
    base_data_type                 shift and go to state 466
    identifier                     shift and go to state 403
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 488

    (27) column_end -> collate NOT NULL DEFAULT SCONST . comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 499
    empty                          shift and go to state 472

state 489

    (32) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP . comment_end
    (33) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP . ON UPDATE CURRENT_TIMESTAMP comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    ON              shift and go to state 501
    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 500
    empty                          shift and go to state 472

state 490

    (31) column_end -> collate NOT NULL AUTO_INCREMENT comment_end .

    UNIQUE          reduce using rule 31 (column_end -> collate NOT NULL AUTO_INCREMENT comment_end .)
    RPAREN          reduce using rule 31 (column_end -> collate NOT NULL AUTO_INCREMENT comment_end .)
    COMMA           reduce using rule 31 (column_end -> collate NOT NULL AUTO_INCREMENT comment_end .)


state 491

    (37) comment_end -> COMMENT SCONST .

    UNIQUE          reduce using rule 37 (comment_end -> COMMENT SCONST .)
    RPAREN          reduce using rule 37 (comment_end -> COMMENT SCONST .)
    COMMA           reduce using rule 37 (comment_end -> COMMENT SCONST .)


state 492

    (29) column_end -> collate NULL DEFAULT NULL comment_end .

    UNIQUE          reduce using rule 29 (column_end -> collate NULL DEFAULT NULL comment_end .)
    RPAREN          reduce using rule 29 (column_end -> collate NULL DEFAULT NULL comment_end .)
    COMMA           reduce using rule 29 (column_end -> collate NULL DEFAULT NULL comment_end .)


state 493

    (9) create_table_end -> ENGINE EQ identifier DEFAULT CHARSET . EQ identifier

    EQ              shift and go to state 502


state 494

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE . EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 503


state 495

    (39) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN .
    (40) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN . COMMA index_list

    RPAREN          reduce using rule 39 (primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN .)
    COMMA           shift and go to state 504


state 496

    (54) insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN .

    $end            reduce using rule 54 (insert -> INSERT ignore INTO table_reference LPAREN index_column_list RPAREN VALUES LPAREN insert_value RPAREN .)


state 497

    (115) grouping_expressions -> grouping_expressions COMMA value_expression .

    COMMA           reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    HAVING          reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    FOR             reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    LOCK            reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    INTERSECT       reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    UNION           reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    EXCEPT          reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    ORDER           reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    LIMIT           reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    $end            reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)
    RPAREN          reduce using rule 115 (grouping_expressions -> grouping_expressions COMMA value_expression .)


state 498

    (236) type_param_list -> type_param_list COMMA type_parameter .

    RPAREN          reduce using rule 236 (type_param_list -> type_param_list COMMA type_parameter .)
    COMMA           reduce using rule 236 (type_param_list -> type_param_list COMMA type_parameter .)


state 499

    (27) column_end -> collate NOT NULL DEFAULT SCONST comment_end .

    UNIQUE          reduce using rule 27 (column_end -> collate NOT NULL DEFAULT SCONST comment_end .)
    RPAREN          reduce using rule 27 (column_end -> collate NOT NULL DEFAULT SCONST comment_end .)
    COMMA           reduce using rule 27 (column_end -> collate NOT NULL DEFAULT SCONST comment_end .)


state 500

    (32) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .

    UNIQUE          reduce using rule 32 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .)
    RPAREN          reduce using rule 32 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .)
    COMMA           reduce using rule 32 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP comment_end .)


state 501

    (33) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON . UPDATE CURRENT_TIMESTAMP comment_end

    UPDATE          shift and go to state 505


state 502

    (9) create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ . identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 506
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 503

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ . identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 507
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 504

    (40) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA . index_list
    (41) index_list -> . index_key identifier LPAREN index_column_list RPAREN index_end
    (42) index_list -> . index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end
    (43) index_key -> . KEY
    (44) index_key -> . UNIQUE KEY

    KEY             shift and go to state 508
    UNIQUE          shift and go to state 511

    index_list                     shift and go to state 509
    index_key                      shift and go to state 510

state 505

    (33) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE . CURRENT_TIMESTAMP comment_end

    CURRENT_TIMESTAMP shift and go to state 512


state 506

    (9) create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ identifier .

    $end            reduce using rule 9 (create_table_end -> ENGINE EQ identifier DEFAULT CHARSET EQ identifier .)


state 507

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier . COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    COMPRESSION     shift and go to state 513


state 508

    (43) index_key -> KEY .

    IDENTIFIER      reduce using rule 43 (index_key -> KEY .)
    DIGIT_IDENTIFIER reduce using rule 43 (index_key -> KEY .)
    ASTERISK        reduce using rule 43 (index_key -> KEY .)
    BACKQUOTED_IDENTIFIER reduce using rule 43 (index_key -> KEY .)
    NON_RESERVED    reduce using rule 43 (index_key -> KEY .)


state 509

    (40) primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list .
    (42) index_list -> index_list . COMMA index_key identifier LPAREN index_column_list RPAREN index_end

    RPAREN          reduce using rule 40 (primary_clause -> PRIMARY KEY LPAREN index_column_list RPAREN COMMA index_list .)
    COMMA           shift and go to state 514


state 510

    (41) index_list -> index_key . identifier LPAREN index_column_list RPAREN index_end
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 515
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 511

    (44) index_key -> UNIQUE . KEY

    KEY             shift and go to state 516


state 512

    (33) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP . comment_end
    (37) comment_end -> . COMMENT SCONST
    (38) comment_end -> . empty
    (276) empty -> .

    COMMENT         shift and go to state 471
    UNIQUE          reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)
    COMMA           reduce using rule 276 (empty -> .)

    comment_end                    shift and go to state 517
    empty                          shift and go to state 472

state 513

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION . EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 518


state 514

    (42) index_list -> index_list COMMA . index_key identifier LPAREN index_column_list RPAREN index_end
    (43) index_key -> . KEY
    (44) index_key -> . UNIQUE KEY

    KEY             shift and go to state 508
    UNIQUE          shift and go to state 511

    index_key                      shift and go to state 519

state 515

    (41) index_list -> index_key identifier . LPAREN index_column_list RPAREN index_end

    LPAREN          shift and go to state 520


state 516

    (44) index_key -> UNIQUE KEY .

    IDENTIFIER      reduce using rule 44 (index_key -> UNIQUE KEY .)
    DIGIT_IDENTIFIER reduce using rule 44 (index_key -> UNIQUE KEY .)
    ASTERISK        reduce using rule 44 (index_key -> UNIQUE KEY .)
    BACKQUOTED_IDENTIFIER reduce using rule 44 (index_key -> UNIQUE KEY .)
    NON_RESERVED    reduce using rule 44 (index_key -> UNIQUE KEY .)


state 517

    (33) column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .

    UNIQUE          reduce using rule 33 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .)
    RPAREN          reduce using rule 33 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .)
    COMMA           reduce using rule 33 (column_end -> collate NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP comment_end .)


state 518

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ . SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    SCONST          shift and go to state 521


state 519

    (42) index_list -> index_list COMMA index_key . identifier LPAREN index_column_list RPAREN index_end
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 522
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 520

    (41) index_list -> index_key identifier LPAREN . index_column_list RPAREN index_end
    (45) index_column_list -> . identifier
    (46) index_column_list -> . index_column_list COMMA identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 339
    index_column_list              shift and go to state 523
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 521

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST . REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    REPLICA_NUM     shift and go to state 524


state 522

    (42) index_list -> index_list COMMA index_key identifier . LPAREN index_column_list RPAREN index_end

    LPAREN          shift and go to state 525


state 523

    (41) index_list -> index_key identifier LPAREN index_column_list . RPAREN index_end
    (46) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 526
    COMMA           shift and go to state 389


state 524

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM . EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 527


state 525

    (42) index_list -> index_list COMMA index_key identifier LPAREN . index_column_list RPAREN index_end
    (45) index_column_list -> . identifier
    (46) index_column_list -> . index_column_list COMMA identifier
    (267) identifier -> . IDENTIFIER
    (268) identifier -> . quoted_identifier
    (269) identifier -> . non_reserved
    (270) identifier -> . DIGIT_IDENTIFIER
    (271) identifier -> . ASTERISK
    (273) quoted_identifier -> . BACKQUOTED_IDENTIFIER
    (272) non_reserved -> . NON_RESERVED

    IDENTIFIER      shift and go to state 40
    DIGIT_IDENTIFIER shift and go to state 43
    ASTERISK        shift and go to state 44
    BACKQUOTED_IDENTIFIER shift and go to state 45
    NON_RESERVED    shift and go to state 46

    identifier                     shift and go to state 339
    index_column_list              shift and go to state 528
    quoted_identifier              shift and go to state 41
    non_reserved                   shift and go to state 42

state 526

    (41) index_list -> index_key identifier LPAREN index_column_list RPAREN . index_end
    (47) index_end -> . BLOCK_SIZE INTEGER
    (48) index_end -> . empty
    (276) empty -> .

    BLOCK_SIZE      shift and go to state 530
    COMMA           reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    index_end                      shift and go to state 529
    empty                          shift and go to state 531

state 527

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ . INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    INTEGER         shift and go to state 532


state 528

    (42) index_list -> index_list COMMA index_key identifier LPAREN index_column_list . RPAREN index_end
    (46) index_column_list -> index_column_list . COMMA identifier

    RPAREN          shift and go to state 533
    COMMA           shift and go to state 389


state 529

    (41) index_list -> index_key identifier LPAREN index_column_list RPAREN index_end .

    COMMA           reduce using rule 41 (index_list -> index_key identifier LPAREN index_column_list RPAREN index_end .)
    RPAREN          reduce using rule 41 (index_list -> index_key identifier LPAREN index_column_list RPAREN index_end .)


state 530

    (47) index_end -> BLOCK_SIZE . INTEGER

    INTEGER         shift and go to state 534


state 531

    (48) index_end -> empty .

    COMMA           reduce using rule 48 (index_end -> empty .)
    RPAREN          reduce using rule 48 (index_end -> empty .)


state 532

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER . BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    BLOCK_SIZE      shift and go to state 535


state 533

    (42) index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN . index_end
    (47) index_end -> . BLOCK_SIZE INTEGER
    (48) index_end -> . empty
    (276) empty -> .

    BLOCK_SIZE      shift and go to state 530
    COMMA           reduce using rule 276 (empty -> .)
    RPAREN          reduce using rule 276 (empty -> .)

    index_end                      shift and go to state 536
    empty                          shift and go to state 531

state 534

    (47) index_end -> BLOCK_SIZE INTEGER .

    COMMA           reduce using rule 47 (index_end -> BLOCK_SIZE INTEGER .)
    RPAREN          reduce using rule 47 (index_end -> BLOCK_SIZE INTEGER .)


state 535

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE . EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 537


state 536

    (42) index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end .

    COMMA           reduce using rule 42 (index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end .)
    RPAREN          reduce using rule 42 (index_list -> index_list COMMA index_key identifier LPAREN index_column_list RPAREN index_end .)


state 537

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ . INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    INTEGER         shift and go to state 538


state 538

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER . USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    USE_BLOOM_FILTER shift and go to state 539


state 539

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER . EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 540


state 540

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ . FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    FALSE           shift and go to state 541


state 541

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE . TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER

    TABLET_SIZE     shift and go to state 542


state 542

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE . EQ INTEGER PCTFREE EQ INTEGER

    EQ              shift and go to state 543


state 543

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ . INTEGER PCTFREE EQ INTEGER

    INTEGER         shift and go to state 544


state 544

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER . PCTFREE EQ INTEGER

    PCTFREE         shift and go to state 545


state 545

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE . EQ INTEGER

    EQ              shift and go to state 546


state 546

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ . INTEGER

    INTEGER         shift and go to state 547


state 547

    (10) create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER .

    $end            reduce using rule 10 (create_table_end -> DEFAULT CHARSET EQ identifier COLLATE EQ identifier COMPRESSION EQ SCONST REPLICA_NUM EQ INTEGER BLOCK_SIZE EQ INTEGER USE_BLOOM_FILTER EQ FALSE TABLET_SIZE EQ INTEGER PCTFREE EQ INTEGER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 21 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 49 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 74 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 85 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 89 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 125 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 159 resolved as shift
WARNING: shift/reduce conflict for DIGIT_IDENTIFIER in state 159 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 159 resolved as shift
WARNING: shift/reduce conflict for BACKQUOTED_IDENTIFIER in state 159 resolved as shift
WARNING: shift/reduce conflict for NON_RESERVED in state 159 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 161 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 174 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 176 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 177 resolved as shift
WARNING: shift/reduce conflict for PERIOD in state 186 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 201 resolved as shift
WARNING: shift/reduce conflict for CROSS in state 210 resolved as shift
WARNING: shift/reduce conflict for NATURAL in state 210 resolved as shift
WARNING: shift/reduce conflict for INNER in state 210 resolved as shift
WARNING: shift/reduce conflict for LEFT in state 210 resolved as shift
WARNING: shift/reduce conflict for RIGHT in state 210 resolved as shift
WARNING: shift/reduce conflict for FULL in state 210 resolved as shift
WARNING: shift/reduce conflict for ON in state 210 resolved as shift
WARNING: shift/reduce conflict for USING in state 210 resolved as shift
WARNING: shift/reduce conflict for OR in state 213 resolved as shift
WARNING: shift/reduce conflict for AND in state 213 resolved as shift
WARNING: shift/reduce conflict for OR in state 214 resolved as shift
WARNING: shift/reduce conflict for AND in state 214 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 235 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 236 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 241 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 241 resolved as shift
WARNING: shift/reduce conflict for DIGIT_IDENTIFIER in state 241 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 241 resolved as shift
WARNING: shift/reduce conflict for BACKQUOTED_IDENTIFIER in state 241 resolved as shift
WARNING: shift/reduce conflict for NON_RESERVED in state 241 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 244 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 244 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 255 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 272 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 279 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 297 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 297 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 344 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 344 resolved as shift
WARNING: shift/reduce conflict for DIGIT_IDENTIFIER in state 344 resolved as shift
WARNING: shift/reduce conflict for ASTERISK in state 344 resolved as shift
WARNING: shift/reduce conflict for BACKQUOTED_IDENTIFIER in state 344 resolved as shift
WARNING: shift/reduce conflict for NON_RESERVED in state 344 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 352 resolved as shift
WARNING: shift/reduce conflict for FOR in state 431 resolved as shift
WARNING: shift/reduce conflict for LOCK in state 431 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 432 resolved as shift
WARNING: reduce/reduce conflict in state 281 resolved using rule (join_type -> empty)
WARNING: rejected rule (join_criteria -> empty) in state 281
WARNING: reduce/reduce conflict in state 384 resolved using rule (where_opt -> WHERE LPAREN search_condition RPAREN)
WARNING: rejected rule (search_condition -> LPAREN search_condition RPAREN) in state 384
